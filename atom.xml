<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>衷深学习</title>
  <icon>https://www.gravatar.com/avatar/1a78ec769217974f51d40169d81d53e1</icon>
  <subtitle>石晓强的小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://steven-shixq.github.io/"/>
  <updated>2020-02-28T07:17:17.788Z</updated>
  <id>https://steven-shixq.github.io/</id>
  
  <author>
    <name>石晓强</name>
    <email>2583551979@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日外闻22</title>
    <link href="https://steven-shixq.github.io/2020/02/28/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB22/"/>
    <id>https://steven-shixq.github.io/2020/02/28/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB22/</id>
    <published>2020-02-27T23:57:42.000Z</published>
    <updated>2020-02-28T07:17:17.788Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Health/My-message-to-Americas-top-scientists" target="_blank" rel="noopener">My message to America’s top scientists</a></p></blockquote><p>People often ask me which technologies have the most potential to change our lives in the decades ahead.</p><p>AI is always near the top of the list. Gene-based tools are another technology that I always mention. For example, advances in that field are giving researchers powerful new tools to investigate potential cures for AIDS, sickle-cell disease, and other conditions.</p><p>*<em>The Diseases of Poverty and The Potential of AI and Gene Therapy *</em></p><p>The core of our foundation work focus on eliminating the gross inequities in health that we had seen a few years earlier on our first trip to Africa.</p><p>Today, I want to talk about several exciting and important tools of modern science that have the potential to help us solve some of the biggest health problems—not only in low- and middle-income countries, but everywhere.</p><p>Today, we have an opportunity with the evolution of tools like AI and gene-based technologies to develop a new generation of health solutions that can benefit everyone, everywhere. </p><p>Since Alan Turing laid the groundwork for artificial intelligence in 1950, AI has gone through a kind of <u>boom-and-bust</u> (繁荣和萧条) cycle—enthusiasm would grow and then expectations weren’t met.</p><p>But we are finally beginning to realize the potential of AI. The computational power available for AI applications is doubling every three and half months—far surpassing the historical metric of Moore’s Law. This processing capability is being coupled with troves of new data, and we are learning to annotate this data in smarter ways. That’s enabling us to realize some of the promises of AI: the ability to synthesize, analyze, see patterns, gain insights, and make predictions across many, many more dimensions than a human can comprehend.</p><p>This data revolution will apply to virtually all of the disciplines represented here today. What I’m most excited about is how it can help us make sense of complex biological systems and accelerate the discovery of therapeutics to improve health in the poorest countries.</p><p>And, with recent breakthroughs in gene-editing technologies like CRISPR, we are on the verge of a new era of precision diagnostics, therapeutics, and vaccines that has the potential to improve health—not only for rare genetic disorders, but also for diseases that predominately afflict people in poor countries.</p><p>It’s amazing to think how far we’ve come since Crick, Watson, and Franklin laid the foundation for modern genetics. It was only 15 years ago that the Human Genome Project gave us the ability to read our DNA and identify specific sequences that cause or contribute to disease. It was only 8 years ago that CRISPR gave us the ability to edit DNA precisely.</p><p>Now, with the latest CRISPR gene-editing approaches, it’s believed that up to 89% of genetic variants known to be associated with human disease can be corrected.</p><p>Last year, researchers began using the molecular scissors of CRISPR in clinical trials to remove, edit, and inject people’s cells back into their bodies.</p><p>In short, artificial intelligence and CRISPR have emerged as powerful tools with the potential to revolutionize healthcare and many other fields.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-How two technologies can benefit the world’s poorest.
    
    </summary>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/English/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻21</title>
    <link href="https://steven-shixq.github.io/2020/02/27/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB21/"/>
    <id>https://steven-shixq.github.io/2020/02/27/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB21/</id>
    <published>2020-02-27T02:03:18.000Z</published>
    <updated>2020-02-27T02:51:56.258Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Turtles-All-the-Way-Down" target="_blank" rel="noopener">My family loved reading this book together</a></p></blockquote><p><em>Turtles All the Way Down</em> by John Green</p><p>中文书名：《龟背上的世界》</p><p><em>Turtles All the Way Down</em> tells the story of Aza Holmes, a high school student from Indianapolis. When a local billionaire goes missing and a $100,000 reward is offered for information about his disappearance, she and her best friend decide to <u>track him down</u> (追踪他).</p><p>Aza’s quest is complicated by the fact that she has <u>obsessive compulsive disorder</u> (OCD，强迫症) and severe anxiety. Her struggles are a huge part of the book, as her compulsions (强迫) constantly get in the way of her social life. John’s writing feels almost claustrophobic (患幽闭恐怖症的) when describing Aza’s mental <strong>swirl</strong> (盘绕，旋涡). Some people might find those parts difficult to read, but he really gives you a sense of what it feels like to live with OCD.</p><p>Because this is a John Green novel, romance must factor into the equation. Aza <u>begins to develop feelings for</u> （开始对…产生感情）Davis, the son of missing billionaire Russell Pickett. He is initially skeptical about her intentions, because he’s used to people <strong>sucking up</strong> (拍马屁，恭维)to him to get close to his dad. </p><p>Here’s what Phoebe had to say:</p><p>“For years I have been a loyal John Green fan—devouring his novels in the back of coffee shops, while traveling, and curled up on my couch. Something about the imagery of his books makes me get caught up in the fantasy of his stories, but <em>Turtles All the Way Down</em> hit closer to home for me than the rest. As someone who has struggled with OCD for years, I saw some of myself in the main character. But more than anything, this book struck close to home due to the <strong>intriguing</strong> (有趣的，迷人的) character of Davis.</p><p>“Never has a book been able to capture so well what it is like to live in the shadow of someone else’s legacy. This story shows how Davis struggled to find his own identity outside of his father’s fame and wealth. Although we have very different relationships with our dads, I recognized his struggle, which also plays into my own life as I find my way in this world. This read was captivating like none other I have read before.”</p><p>Phoebe is much closer to John’s intended demographic than I am, but I think readers of all ages will enjoy <em>Turtles All the Way Down</em>. It’s a fun, moving story filled with <strong>quirky</strong> (古怪的) but related characters.</p><p>He made her promise not to share it with anyone, and she stayed true to her word：他让她承诺不告诉任何人,她恪守了诺言。</p><p>suck up to sb.: 拍某人马屁</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/English/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻20</title>
    <link href="https://steven-shixq.github.io/2020/02/26/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB20/"/>
    <id>https://steven-shixq.github.io/2020/02/26/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB20/</id>
    <published>2020-02-26T02:43:40.000Z</published>
    <updated>2020-02-26T05:48:01.473Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.newscientist.com/article/2235009-animal-that-doesnt-need-oxygen-to-survive-discovered/" target="_blank" rel="noopener">Animal that doesn’t need oxygen to survive discovered</a></p></blockquote><p>能呼吸氧气一直以来都被当做是多细胞生物的一项基本特征，但科学家最近发现了一种动物不能呼吸氧气，它们没有线粒体这个细胞器，丧失了呼吸氧气的能力。</p><p>这种感染鲑鱼的寄生虫如何在没有氧气的情况下获得所需的能量，仍然是一个谜，科学家猜测寄生虫可能通过宿主来获取所需的氧气。</p><p>所有动植物都是使用氧气来产生ATP，ATP为细胞提供所需的能量。细胞通过利用氧气产生ATP的过程发生在线粒体中。线粒体中存在和细胞核分开的基因组，但科学家使用DNA染料对该寄生虫（<em>Henneguya salminicola</em>）的细胞进行染色时，没有在除了细胞核以外的细胞质区域发现该荧光染料。相比之下，在该寄生虫的近亲中进行DNA染色时，可以看到该寄生虫近亲细胞中的线粒体的存在。</p><p>虽然<em>Henneguya salminicola</em>的细胞有看起来像线粒体的结构，但它们不能制造利用氧气产生ATP所需的酶，这些结构不是真正的线粒体。这以为着其作为一种多细胞动物，可以在没有氧气的情况下存活。</p><p>2010年，意大利马尔凯理工大学的Roberto Danovaro报道说，生活在深海沉积物中的一群名为loriciferans的小动物在显微镜下观察不到线粒体，必须依赖其他能源，例如氢硫化物代替。但是该结论还需要进行基因组测序来进一步确认。</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      NewScientist-Animal that doesn&#39;t need oxygen to survive discovered
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="science" scheme="https://steven-shixq.github.io/tags/science/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻19</title>
    <link href="https://steven-shixq.github.io/2020/02/25/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB19/"/>
    <id>https://steven-shixq.github.io/2020/02/25/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB19/</id>
    <published>2020-02-25T01:52:58.000Z</published>
    <updated>2020-02-25T08:07:28.241Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/The-Myth-of-the-Strong-Leader" target="_blank" rel="noopener">What makes a great leader?</a></p></blockquote><p><em>The Myth of the Strong Leader</em> - by Archie Brown</p><p>Most casual observers of history probably don’t have <u>a great deal of</u> (许多) familiarity with the story of Adolfo Suárez.</p><p>We can see from the book that leaders like Suárez, who served as prime minister of Spain from 1976 to 1981, possess leadership styles and capacities that are incredibly effective, and depressingly rare in our society.</p><p>After General Francisco Franco’s death in 1975, tensions were high. The country had just emerged from nearly four decades of <strong>authoritarianism</strong> (独裁主义), and faced a number of possible futures—many of them bloody. Suárez, who had come from the right-wing Franco <strong>regime</strong> （政权，体制）, could have tried to rule through <strong>intimidation</strong> (恐吓，威胁)and <strong>exclusion</strong> （排斥）. Instead, he made it a priority to bring the left-wing leaders of the Communist and Socialist parties into the fold （放在首位）. Through negotiation, persuasion, and some very <strong>adroit</strong> (敏捷的，灵巧的) coalition-building (联盟构建), he convinced those around him of the importance of democracy and <strong>pluralism</strong> (多元化，多元主义), <strong>staving off</strong> （躲开） a <strong>military coup</strong> (军事政变) and eventually creating the constitutional <strong>monarchy</strong> (君主政体) that exists today. At one point, Suárez convinced the <strong>parliament</strong> (国会，议会) that was appointed under Franco—at that time, the “old elite”—to <em>abolish itself</em> to make way for elected parties. For scholars of leadership, it’s hard to imagine a better illustration of skill than that.</p><p>The story of Suárez is one of a series of case studies that animate (使…充满生气) Brown’s book and make it an important and unusual read. Whereas most books about political leadership are chronologies (年表；年代学), mapping the rise and fall of leaders over time, this one is more of a <strong>taxonomy</strong> (分类). Brown takes a deep look at the <strong>traits</strong> (特质) and tendencies leaders exhibit, and the categories they fall into, as a way of understanding the egos （自我）, motivations, and behaviors responsible for so much progress, and so much suffering, in the world. Throughout, he presents a new way to think about today’s challenges—and the people we <strong>entrust</strong> (委托，托付) with solving them.</p><p>Brown’s core argument is exactly what his title suggests: despite a worldwide <strong>fixation</strong> (异常依恋，痴迷) on strength as a positive quality, strong leaders—those who concentrate power and decision-making in their own hands—are not necessarily good leaders. On the contrary, Brown argues that the leaders who make the biggest difference in office, and change millions of lives for the better, are the ones who collaborate, delegate, and negotiate—the ones who recognize that no one person can or should have all the answers （没有一个人能拥有所有答案）.</p><p>To make his case, Brown sorts successful leaders into two categories. “Redefining” leaders radically change the political landscape, not by “[seeking] centre ground” but by “[moving] the centre in their direction.” Brown puts Franklin Delano Roosevelt and Lyndon Baines Johnson in this category, because several of their <u>signature achievements</u> （标志性成就）—FDR’s New Deal, and LBJ’s War on Poverty and dedication to civil rights—have had a major and lasting impact on American society. We tend to think of these men as strong leaders, and in many ways we’re right. But Brown shows a different side of the story: because of the <u>checks and balances</u> (制衡) of the American political system, neither FDR nor LBJ had the ability to govern by <strong>fiat</strong> (命令). Their strength lay in their power to persuade—to convince their colleagues in government, and the American people, to understand and support their point of view.</p><p>“Transformational” leaders, Brown argues, go a step further, by fundamentally transforming the political or economic system itself (政治或者经济体系本身). If you’re <strong>dismayed</strong> (失望的) at how rare it is for an American president to reshape our political or economic system, as many voters today seem to be, consider that the last transformational American leader, in Brown’s analysis, was Abraham Lincoln. Transformational leaders are the ones, like Suárez, who leave their country a completely different place than they found it. In this category, Brown lists Charles de Gaulle, Mikhail Gorbachev, Deng Xiaoping, and Nelson Mandela.</p><p>These qualities can be <strong><u>boiled down</u></strong> (归结) to a belief, on the part of the leader, that he or she—and usually he—is the only one who knows what the country needs, and the only one who can deliver it.</p><p>Though <em>The Myth of the Strong Leader</em> is about political leadership, you come away from Brown’s analysis with a deeper understanding of leadership in general.</p><p>Through my work in the business world and at the foundation, I’ve seen firsthand how ineffective and even dangerous it can be when leaders make decisions alone—and how much good we can do when we work together. Good leaders will challenge themselves, bring in fresh thinking and expert advice, and not only invite but seriously consider opposing viewpoints.</p><p>好的领导者会合作听取别人的意见，他们不仅欢迎别人提出相反的意见，还会认真的考虑这些相反的意见，在听取了广泛的意见之后再做出决策。这和瑞·达利欧的《原则》中三坚持的原则：<strong>“优秀想法至上”，即 idea meritocracy，而不是权力至上</strong>，有异曲同工之妙。</p><p>avid : 狂热的，贪婪的</p><hr><p><em>See you tomrrow</em></p>]]></content>
    
    <summary type="html">
    
      Gats-What makes a great leader?
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="管理" scheme="https://steven-shixq.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻18</title>
    <link href="https://steven-shixq.github.io/2020/02/24/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB18/"/>
    <id>https://steven-shixq.github.io/2020/02/24/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB18/</id>
    <published>2020-02-24T03:02:46.000Z</published>
    <updated>2020-02-24T10:40:39.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/The-Gene" target="_blank" rel="noopener">Lost and found with “the most wondrous map ever produced”</a></p></blockquote><p><em>The Gene: An Intimate History</em> by Siddhartha Mukherjee</p><p>中文书名：《基因转：众生之源》</p><p>本书作者悉达多.穆克吉是哥伦比亚大学癌症医生和研究员，曾写过一本书<em>The Emperor of All Maladies</em>，中文书名《众病之王：癌症传》，并以此作品获得了普利策奖。</p><p>The year Melinda and I started our foundation, President Bill Clinton convened in the White House some of the world’s great scientists to announce a huge milestone for humanity. Two rival efforts, one led by the National Institutes of Health and the other by a private company, had completed the first draft of the human genome map. “Without a doubt,” <a href="https://www.genome.gov/10001356/june-2000-white-house-event/" target="_blank" rel="noopener">Clinton said</a>, “this is the most important, most <strong>wondrous</strong> (奇妙的) map ever produced by humankind.”</p><p><u>Fast forward 16 years</u> (快进16年). With little public fanfare, geneticists have reached another super important milestone. While the human genome map gave us the ability to <em>read</em> all three billion letters of our genetic code, we now have the power to <em>edit</em> the human genome as well. </p><p>Scientists have now launched early-stage clinical trials with these new genome-editing tools. These tools are generating a ton of optimism for diagnosing, treating, and curing human disease. Even before researchers successfully complete clinical trials in humans, genome editing will be put to good use in modifying plants and animals—all of which holds big promise for our foundation’s work to alleviate hunger and improve health in poor countries.</p><p>Although I am excited about these advances, we have to approach them with caution. It’s one thing to reprogram the code that runs our computers. Reprogramming the code that runs our species is a very different thing altogether.</p><p>As with any powerful new technology, genome editing will be attractive to people with both good intentions (reducing human suffering) and bad (causing it). Even just with <strong>respect to</strong> (关于) the former, the ethical questions are enormous.</p><p>I loved <a href="https://www.ted.com/talks/siddhartha_mukherjee_soon_we_ll_cure_diseases_with_a_cell_not_a_pill?language=en#t-672063" target="_blank" rel="noopener">Mukherjee’s 2015 TED Talk</a> and his brilliant book about cancer, <em>The Emperor of All Maladies</em>, which won the Pulitzer Prize in 2011. It must really tick off full-time writers that a doctor can win a Pulitzer in his spare time!</p><p>In <em>The Gene</em>, Mukherjee once again shows his gift for making hard science easily accessible. He wrote this book for general audiences, because he knows that it’s not good enough for scientists alone to debate the huge ethical questions that their discoveries provoke. As he emphasized repeatedly in our conversation, determining the proper rules and <strong>boundaries</strong> (边界) for these technologies requires broad public discussion, debate, and consensus (共识).</p><p>Mukherjee makes <em>The Gene</em> accessible in a variety of ways. Like all good science writers, he offers creative metaphors to explain difficult concepts. He is also a beautiful storyteller. He uses that talent to weave in his own family’s history of mental illness, which I found incredibly touching.  And through stories, he introduces us to the key pioneers in genetics—from Gregor Mendel, who repeatedly failed the exam to teach high school science but later ushered in the modern science of genetics, to Francis Collins, the <strong>devout</strong> (虔诚的) Christian motorcycle enthusiast who brilliantly led the public effort to sequence the human genome.  </p><p>Within 10 years, it will be possible for clinicians to use genome editing to help people with diseases caused by faulty genes. This form of therapy could be highly effective, but it would mean that children born from these sperm or eggs <em>would <u>pass along</u> (传递) their genetically modified genomes to their own children</em>—altering the human germ line and crossing an ethical Rubicon.</p><p>“By the time this book is published … the first ‘post-genomic’ human might be on his or her way to being born,” Mukherjee reports. And he is right! He Jiankui, a Chinese scientist who had announced the world first genome editing baby had born.</p><p>As I read <em>The Gene</em>, I <u><strong>came up with</strong></u> (提出，想出) long lists of ethical questions of my own. For example, what if a prenatal test told you with a high degree of certainty that your child will have an IQ of 80 unless you do this little edit? What if a private IVF clinic offered its patients a little enhancement to their fertilized embryos to boost children’s likely IQ from high to very high? This could <strong>exacerbate</strong> (恶化，加剧) inequities that are already a big problem—especially if this technology is available only for wealthy people. What about a series of edits that could dramatically reduce the incidence of disorders on the <u>autism spectrum</u> (自闭症)? Wouldn’t that mean reducing human diversity in dangerous ways—perhaps even eliminating the possibility of a future Alan Turing, the brilliant computer pioneer (开拓者，先锋) who helped break Germany’s Enigma code during World War II?</p><p>Technology is <strong>amoral</strong> (与道德无关的，无从区分是非的). It is neither good nor bad. It is up to all of us—not just scientists, government officials, and people fortunate enough to lead foundations—to <strong>think hard</strong> (认真思考) about these new technologies and how they should and should not be used. Reading <em>The Gene</em> will get you the point where you can actively engage in that debate.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-The Gene An Intimate History
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="gene" scheme="https://steven-shixq.github.io/tags/gene/"/>
    
      <category term="基因" scheme="https://steven-shixq.github.io/tags/%E5%9F%BA%E5%9B%A0/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻17</title>
    <link href="https://steven-shixq.github.io/2020/02/23/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB17/"/>
    <id>https://steven-shixq.github.io/2020/02/23/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB17/</id>
    <published>2020-02-23T02:32:55.000Z</published>
    <updated>2020-02-23T07:47:37.265Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Hillbilly-Elegy" target="_blank" rel="noopener">From coal country to Yale</a></p></blockquote><p><em>Hillbilly Elegy</em>—J.D. Vance</p><p>中文书名《乡下人的悲歌》</p><p>Vance grew up in Appalachian Ohio and Kentucky, in poor white communities where family <strong>strife</strong> (冲突) was a <strong>constant</strong> (经常的), work was not, and even many <strong>pawnshops</strong> (当铺) had closed their doors.</p><p>So imagine what it was like for him when he managed—through the high expectations of his grandparents, the discipline of the Marines, and his own big brain—to get himself into Yale Law School. Suddenly he began experiencing life not as the “abandoned son of a man I hardly knew and a woman I wished I didn’t”(书中作者的爸妈) but as a highly <strong>sought-after</strong> (广受欢迎的) member of one of America’s most elite institutions. He was a stranger in a strange land.</p><p>“Two years earlier, I had applied to dozens of places in the hope of landing a well-paying job after college but was rebuffed every time,” Vance writes. “After only a year at Yale Law, my classmates and I were being handed six-figure salaries by men who had argued before the United States Supreme Court.”</p><p>Through deeply personal stories like these, <em>Hillbilly Elegy</em> sheds light our nation’s vast cultural divide—a topic that has become far more relevant than Vance ever dreamed when he was writing this book.</p><p>The fact that <em>Hillbilly Elegy</em> is not just an important read but also a great one came as a bit of a surprise to me. There are no big <strong>cliffhangers</strong> (扣人心弦的)and no “how will it end?”-type mystery propelling this story. We know from the <strong>outset</strong> (开始) that the <strong>narrator</strong> (叙述者)<u>survives his chaotic</u>, mostly fatherless (没有父亲的) childhood and lands at Yale Law School.</p><p>I think the book was such a good read in part because of Vance’s bravery. Vance learns early in life that there is “no greater disloyalty than class betrayal.” Yet by writing this book he risks being called a traitor by portraying a culture that, in his view, is suffering from self-inflicted wounds.</p><p>An element that makes this book so readable is the cast of characters. My favorites are Vance’s grandparents, Mamaw and Papaw. In a scene that takes place before Vance was born, Mamaw finally gets <strong><u>fed up with</u></strong> (受够了，厌恶) her husband’s violent <strong>drunkenness</strong> (醉酒) and tells him that she’ll kill him if he ever comes home drunk again. When Papaw ignores her, “Mamaw, never one to tell a lie, calmly retrieved a <u>gasoline canister</u> (汽油罐) from the <strong>garage</strong> (车库), poured it all over her husband, <u>lit a match</u> (点燃火柴), and dropped it on his chest…. <strong>Miraculously</strong> (奇迹般地), Papaw survived the episode (插曲，经历) with only minor burns.”</p><p>While lighting your husband on fire is nothing to admire, Mamaw is usually <u>tough in the right way</u> (以正确的方式强硬). Vance can’t count the number of times he had to flee (逃跑，逃走) to Mamaw’s house to escape his mother’s dysfunction. “Mamaw was the best thing that ever happened to me,” he writes. She spent the last two decades of her life “showing me the value of love and stability.”</p><p>Another <u>guardian angel</u> (守护天使) is Vance’s half-sister Lindsay, who is five years older. “During explosive fights between Mom and whatever man she let into our home, it was Lindsay who withdrew to her bedroom to place a rescue call to Mamaw and Papaw. She fed me when I was hungry, changed my diaper when no one else did, and dragged me everywhere with her—even though … I weighed nearly as much as she did.” Papaw once called Lindsay “the one true adult in the house.”</p><p>To Vance’s credit, he doesn’t pretend to be a policy expert and doesn’t offer simplistic solutions. But of course as I read the book I thought about what can be done to empower and create opportunity in poor communities, rural and urban alike. The key take-home for me is that whatever else we do to address the complex realities of poverty in America, we must find more ways to surround children with high expectations and as many loving and caring adults as possible (我们必须找到更多的方法，使孩子们处在高期待的环境中，让尽可能多的有爱心的成年人陪伴在孩子们身边). </p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-From coal country to Yale
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="回忆录" scheme="https://steven-shixq.github.io/tags/%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
      <category term="自转" scheme="https://steven-shixq.github.io/tags/%E8%87%AA%E8%BD%AC/"/>
    
  </entry>
  
  <entry>
    <title>R语言学习笔记2</title>
    <link href="https://steven-shixq.github.io/2020/02/22/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>https://steven-shixq.github.io/2020/02/22/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</id>
    <published>2020-02-22T15:19:24.000Z</published>
    <updated>2020-02-22T16:16:18.395Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>R语言教程-R数据类型与运算1</strong></p><h2 id="3-常亮与变量"><a href="#3-常亮与变量" class="headerlink" title="3. 常亮与变量"></a>3. 常亮与变量</h2><h3 id="3-1-常量"><a href="#3-1-常量" class="headerlink" title="3.1 常量"></a>3.1 常量</h3><p>R语言基本的数据类型有数值型， 逻辑型（TRUE, FALSE），文本（字符串）。 支持缺失值，有专门的复数类型。</p><p>数值型常量包括整型、单精度、双精度等，一般不需要区分。写法如<code>123</code>, <code>123.45</code>, <code>-123.45</code>, <code>-0.012</code>, <code>1.23E2</code>, <code>-1.2E-2</code>等。 为了表示<code>123</code>是整型，可以写成<code>123L</code>。</p><p>字符型常量用两个双撇号或两个单撇号包围，如<code>&quot;Li Ming&quot;</code>或<code>&#39;Li Ming&#39;</code>。 字符型支持中文，如<code>&quot;李明&quot;</code>或<code>&#39;李明&#39;</code>。 国内的中文编码主要有GBK编码和UTF-8编码， 有时会遇到编码错误造成乱码的问题，MS Windows下R程序一般用GBK编码，但是RStudio软件采用UTF-8编码。 在R软件内字符串一般用UTF-8编码保存。</p><p>逻辑型常量只有TRUE和FALSE。</p><p>缺失值用NA表示。统计计算中经常会遇到缺失值，表示记录丢失、因为错误而不能用、节假日没有数据等。 除了数值型，逻辑型和字符型也可以有缺失值， 而且字符型的空白值不会自动辨识为缺失值，需要自己规定。 R支持特殊的Inf值，这是实数型值，表示正无穷大，不算缺失值。</p><p>复数常量写法如<code>2.2 + 3.5i</code>, <code>1i</code>等。</p><h3 id="3-2-变量"><a href="#3-2-变量" class="headerlink" title="3.2 变量"></a>3.2 变量</h3><p>程序语言中的变量用来保存输入的值或者计算得到的值。 在R中，变量可以保存所有的数据类型， 比如标量、向量、矩阵、数据框、函数等。</p><p>变量都有变量名，R变量名必须以字母、数字、下划线和句点组成， 变量名的第一个字符不能取为数字。 在中文环境下，汉字也可以作为变量名的合法字符使用。 变量名是区分大小写的， <code>y</code>和<code>Y</code>是两个不同的变量名。</p><p>赋值：<code>&lt;-</code>或<code>=</code>，一般用第一种形式</p><p>R的变量没有固定的类型， 给已有变量赋值为新的类型， 该变量就变成新的类型， 但一般应避免这样的行为。 R是“动态类型”语言， 赋值实际上是“绑定”（binding）， 即将一个变量名与一个存储地址联系在一起， 同一个存储地址可以有多个变量名与其联系。</p><h3 id="3-3-R数据类型"><a href="#3-3-R数据类型" class="headerlink" title="3.3 R数据类型"></a>3.3 R数据类型</h3><p>R语言数据结构包括向量，矩阵和数据框，多维数组， 列表，对象等。数据中元素、行、列还可以用名字访问。 最基本的是向量类型。 向量类型数据的访问方式也是其他数据类型访问方式的基础。<br><a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/R%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" data-fancybox="group" data-caption="R中的数据结构" class="fancybox"><img alt="R中的数据结构" title="R中的数据结构" data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/R%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" class="lazyload"></a></p><h2 id="4-数值型向量及其运算"><a href="#4-数值型向量及其运算" class="headerlink" title="4. 数值型向量及其运算"></a>4. 数值型向量及其运算</h2><h3 id="4-1-数值型向量"><a href="#4-1-数值型向量" class="headerlink" title="4.1 数值型向量"></a>4.1 数值型向量</h3><p><strong>向量</strong>是将若干个<u>基础类型相同的值</u>存储在一起， 各个元素可以按序号访问。 如果将若干个数值存储在一起可以用序号访问， 就叫做一个数值型向量。</p><p>用<code>c()</code>函数把多个元素或向量组合成一个向量。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(1:3, 10:13)</span><br><span class="line">x</span><br><span class="line">x1 &lt;- c(1, 2)</span><br><span class="line">x2 &lt;- c(3, 4)</span><br><span class="line">x &lt;- c(x1, x2)</span><br><span class="line">x</span><br></pre></td></tr></table></figure></div><p>10:13这样的写法表示从10到13的整数组成的向量。<br>显示结果中，每行显示的行首会有方括号和数字序号， 代表该行显示的第一个向量元素的下标。<br><code>length(x)</code>可以求x的长度。<code>numeric(10)</code>会生成元素为10个零的向量。</p><h3 id="4-2-向量运算"><a href="#4-2-向量运算" class="headerlink" title="4.2 向量运算"></a>4.2 向量运算</h3><p><strong>标量和标量运算</strong><br>单个数值称为<code>标量</code>， R没有单独的标量类型， 标量实际是长度为1的向量。<br>用<code>%/%</code>表示整除，用<code>%%</code>表示求余。</p><p><strong>向量与标量的运算</strong><br>一个向量乘以一个标量， 就是线性代数中的数乘运算。</p><p>四则运算时如果有缺失值，缺失元素参加的运算相应结果元素仍缺失。</p><p><strong>等长向量运算</strong><br>等长向量的运算为对应元素两两运算。<br>两个等长向量的加、减运算就是线性代数中两个向量的加、减运算。</p><p><strong>不等长向量的运算</strong><br>两个不等长向量的四则运算， 如果其长度为倍数关系，规则是每次从头重复利用短的一个。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x1 &lt;- c(10, 20)</span><br><span class="line">x2 &lt;- c(1, 3, 5, 7)</span><br><span class="line">x1 + x2</span><br><span class="line">x1 * x2</span><br></pre></td></tr></table></figure></div><p>不仅是四则运算，R中有两个或多个向量按照元素一一对应参与某种运算或函数调用时， 如果向量长度不同，一般都采用这样的规则。</p><p>如果两个向量的长度不是倍数关系，会给出警告信息。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c(1,2) + c(1,2,3)</span><br></pre></td></tr></table></figure></div><h3 id="4-3-向量函数"><a href="#4-3-向量函数" class="headerlink" title="4.3 向量函数"></a>4.3 向量函数</h3><p><strong>向量化的函数</strong><br>R中的函数一般都是向量化的: 在R中， 如果普通的一元函数以向量为自变量，一般会对每个元素计算。 这样的函数包括sqrt, log10, log, exp, sin, cos, tan等许多。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sqrt(c(1, 4, 6.25))</span><br></pre></td></tr></table></figure></div><p>运行命令<code>help.start()</code>,可查看这些基础的数学函数的列表。</p><p>如果自己编写的函数没有考虑向量化问题， 可以用<code>Vectorize()</code>函数将其转换成向量化版本。</p><p><strong>排序函数</strong><br>sort(x)返回排序结果。 rev(x)返回把各元素排列次序反转后的结果。 order(x)返回排序用的下标。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(33, 55, 11)</span><br><span class="line">sort(x)</span><br><span class="line">rev(sort(x))</span><br><span class="line">order(x)</span><br><span class="line">x[order(x)]</span><br></pre></td></tr></table></figure></div><p><strong>统计函数</strong></p><p><code>sum</code>(求和), <code>mean</code>(求平均值), <code>var</code>(求样本方差), <code>sd</code>(求样本标准差), <code>min</code>(求最小值), <code>max</code>(求最大值), <code>range</code>(求最小值和最大值)等函数称为统计函数， 把输入向量看作样本，计算样本统计量。 <code>prod</code>求所有元素的乘积。</p><p><code>cumsum</code>和<code>cumprod</code>计算累加和累乘积。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cumsum(1:5)</span><br><span class="line">cumprod(1:5)</span><br></pre></td></tr></table></figure></div><p> 在命令行界面用“?函数名”的方法查询函数的帮助文档</p><p><strong>生成规则序列的函数</strong></p><p>seq函数是冒号运算符的推广。 比如，seq(5)等同于1:5。 seq(2,5)等同于2:5。 seq(11, 15, by=2)产生11,13,15。 seq(0, 2*pi, length.out=100)产生从0到的等间隔序列， 序列长度指定为100。</p><p>seq(to=5, from=2)仍等同于2:5。</p><p><code>rep()</code>函数用来产生重复数值。 为了产生一个初值为零的长度为n的向量， 用<code>x &lt;- rep(0, n)</code>。 <code>rep(c(1,3), 2)</code>把第一个自变量重复两次， 结果相当于<code>c(1,3,1,3)</code>。<br><code>rep(c(1,3), c(2,4))</code>则需要利用R的一般向量化规则， 把第一自变量的第一个元素1按照第二自变量中第一个元素2的次数重复， 把第一自变量中第二个元素3按照第二自变量中第二个元素4的次数重复， 结果相当于<code>c(1,1,3,3,3,3)</code>。</p><p>如果希望重复完一个元素后再重复另一元素，用<code>each=</code>选项， 比如<code>rep(c(1,3), each=2)</code>结果相当于<code>c(1,1,3,3)</code>。</p><p><strong>复数向量</strong><br>复数常数表示如<code>3.5+2.4i</code>, <code>1i</code>。 用函数<code>complex()</code>生成复数向量， 指定实部和虚部。 如<code>complex(real = c(1,0,-1,0), imaginary = c(0,1,0,-1))</code>相当于<code>c(1+0i, 1i, -1+0i, -1i)</code>。</p><p><strong>练习</strong></p><ol><li><p>示1到100的整数的平方根和立方根（提示：立方根就是三分之一次方）。</p></li><li><p>设有10个人的小测验成绩为:<br>77,60,91,73,85,82,35,100,66,75</p><ol><li>把这10个成绩存入变量x;</li><li>从小到大排序；</li><li>计算<code>order(x)</code>，解释<code>order(x)</code>结果中第3项代表的意义。</li><li>计算这些成绩的平均值、标准差、最小值、最大值、中位数。</li></ol></li><li><p>生成区间上等间隔的100个格子点存入变量x中。</p></li></ol><h2 id="5-逻辑型向量及其运算"><a href="#5-逻辑型向量及其运算" class="headerlink" title="5. 逻辑型向量及其运算"></a>5. 逻辑型向量及其运算</h2><h3 id="5-1-逻辑型向量与比较运算"><a href="#5-1-逻辑型向量与比较运算" class="headerlink" title="5.1 逻辑型向量与比较运算"></a>5.1 逻辑型向量与比较运算</h3><p>逻辑型是R的基本数据类型之一，只有两个值TRUE和FALSE, 缺失时为NA。逻辑值一般产生自比较<br>向量比较结果为逻辑型向量。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c(1, 3, 5) &gt; 2</span><br><span class="line">(1:4) &gt;&#x3D; (4:1)</span><br></pre></td></tr></table></figure></div><p>从例子可以看出，向量比较也遵从R的向量间运算的一般规则： 向量与标量的运算是向量每个元素与标量都分别运算一次， 等长向量的运算时对应元素的运算， 不等长但长度为倍数关系的向量运算是把短的从头重复利用。</p><p>与NA比较产生NA，为了判断向量每个元素是否NA， 用is.na()函数，如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is.na(c(1,NA, 3) &gt; 2)</span><br></pre></td></tr></table></figure></div><p>用is.finite()判断向量每个元素是否Inf值。<br>%in%是比较特殊的比较， x %in% y的运算把向量y看成集合， 运算结果是一个逻辑型向量， 第个元素的值为x的第元素是否属于y的逻辑型值。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c(1,3,NA) %in% c(2,3,4,5,NA)</span><br></pre></td></tr></table></figure></div><p>函数match(x, y)起到和x %in% y运算类似的作用， 但是其返回结果不是找到与否， 而是对x的每个元素， 找到其在y中首次出现的下标，找不到时取缺失值，如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">match(c(1, 3), c(2,3,4,3))</span><br></pre></td></tr></table></figure></div><h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h3><p>为了表达如“而且”, “或者”之类的复合比较， 需要使用逻辑运算把两个比较连接起来。 逻辑运算符为<code>&amp;</code>, <code>|</code>和<code>!</code>, 分别表示“同时成立”、“两者至少其一成立”、“条件的反面”。 比如，设<code>age&lt;=3</code>表示婴儿，<code>sex==&#39;女&#39;</code>表示女性，则 <code>age&lt;=3 &amp; sex==&#39;女&#39;</code>表示女婴, <code>age&lt;=3 | sex==&#39;女&#39;</code>表示婴儿或妇女, <code>!(age&lt;=3 | sex==&#39;女&#39;)</code>表示既非婴儿也非妇女。 为了确定运算的先后次序可以用圆括号<code>()</code>指定。</p><p><code>&amp;&amp;</code>和<code>||</code>分别为短路的标量逻辑与和短路的标量逻辑或， 仅对两个标量进行运算，如果有向量也仅使用第一个元素。</p><h3 id="5-3-逻辑运算函数"><a href="#5-3-逻辑运算函数" class="headerlink" title="5.3 逻辑运算函数"></a>5.3 逻辑运算函数</h3><p>函数which()返回真值对应的所有下标，如\</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which(c(FALSE, TRUE, TRUE, FALSE, NA))</span><br><span class="line">which((11:15) &gt; 12)</span><br></pre></td></tr></table></figure></div><p>函数all.equal()与identical()类似， 但是在比较数值型时不区分整数型与实数型， 而且相同时返回标量TRUE， 但是不同时会返回一个说明有何不同的字符串。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">all.equal(c(1,2,3), c(1,2,NA))</span><br></pre></td></tr></table></figure></div><p>函数duplicated()返回每个元素是否为重复值的结果，用函数unique()可以返回去掉重复值的结果.如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">duplicated(c(1,2,1,3,NA,4,NA))</span><br><span class="line">unique(c(1,2,1,3,NA,4,NA))</span><br></pre></td></tr></table></figure></div><h2 id="6-字符型数据及其处理"><a href="#6-字符型数据及其处理" class="headerlink" title="6. 字符型数据及其处理"></a>6. 字符型数据及其处理</h2><p><strong>字符型向量</strong><br>字符型向量是元素为字符串的向量。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s1 &lt;- c(&#39;abc&#39;, &#39;&#39;, &#39;a cat&#39;, NA, &#39;李明&#39;)</span><br></pre></td></tr></table></figure></div><p>注意空字符串并不能自动认为是缺失值， 字符型的缺失值仍用NA表示。</p><p><strong>一些函数</strong></p><ol><li>针对字符型数据最常用的R函数是paste()函数。 paste()用来连接两个字符型向量， 元素一一对应连接， 默认用空格连接。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 一下两种结果相等</span><br><span class="line">paste(c(&quot;ab&quot;, &quot;cd&quot;), c(&quot;ef&quot;, &quot;gh&quot;))</span><br><span class="line">c(&quot;ab ef&quot;, &quot;cd gh&quot;)</span><br></pre></td></tr></table></figure></div><p><code>paste()</code>在连接两个字符型向量时采用R的一般向量间运算规则， 而且可以自动把数值型向量转换为字符型向量。 可以作一对多连接， 如<code>paste(&quot;x&quot;, 1:3)</code>结果相当于<code>c(&quot;x 1&quot;, &quot;x 2&quot;, &quot;x 3&quot;)</code>。</p><p>用<code>sep=</code>指定分隔符， 如<code>paste(&quot;x&quot;, 1:3, sep=&quot;&quot;)</code>结果相当于<code>c(&quot;x1&quot;, &quot;x2&quot;, &quot;x3&quot;)</code>。<br>使用collapse=参数可以把字符型向量的各个元素连接成一个单一的字符串, 如paste(c(“a”, “b”, “c”), collapse=””)结果相当于”abc”。</p><ol start="2"><li><p><code>toupper()</code>函数把字符型向量内容转为大写， <code>tolower()</code>函数转为小写。<br>这两个函数可以用于不区分大小写的比较， 比如，不论x的值是’JAN’, ‘Jan’还是’jan’， toupper(x)==’JAN’的结果都为TRUE。</p></li><li><p>用nchar(x, type=’bytes’)计算字符型向量x中每个字符串的以字节为单位的长度，这一点对中英文是有差别的， 中文通常一个汉字占两个字节，英文字母、数字、标点占一个字节。 用nchar(x, type=’chars’)计算字符型向量x中每个字符串的以字符个数为单位的长度，这时一个汉字算一个单位。</p></li><li><p>substr(x, start, stop)从字符串x中取出从第start个到第stop个的子串，不同于python（计数从0开始），R的技术从1开始。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">substr(&#39;JAN07&#39;, 1, 3)</span><br><span class="line"># 如果x是一个字符型向量，substr将对每个元素取子串。</span><br><span class="line">substr(c(&#39;JAN07&#39;, &#39;MAR66&#39;), 1, 3)</span><br></pre></td></tr></table></figure></div><p>用substring(x, start)可以从字符串x中取出从第start个到末尾的子串。</p></li></ol><p><strong>类型转换</strong></p><p>用as.numeric()把内容是数字的字符型值转换为数值，如<br>substr(‘JAN07’, 4, 5) + 2000不能相加，substr取出的值时字符型，不能与数值相加，需要转换为数值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">as.numeric(substr(&#39;JAN07&#39;, 4, 5)) + 2000</span><br><span class="line">substr(c(&#39;JAN07&#39;, &#39;MAR66&#39;),4,5)</span><br><span class="line">as.numeric(substr(c(&#39;JAN07&#39;, &#39;MAR66&#39;), 4, 5))</span><br></pre></td></tr></table></figure></div><p>as.numeric()是向量化的， 可以转换一个向量的每个元素为数值型。</p><p>用as.character()函数把数值型转换为字符型</p><p>为了用指定的格式数值型转换成字符型， 可以使用sprintf()函数， 其用法与C语言的sprintf()函数相似， 只不过是向量化的。例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sprintf(&#39;file%04d.txt&#39;, c(1, 99, 100))</span><br></pre></td></tr></table></figure></div><p><strong>字符串拆分</strong><br>用strsplit()函数可以把一个字符串按照某种分隔符拆分开，例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- &#39;10,8,7&#39;</span><br><span class="line">strsplit(x, &#39;,&#39;, fixed &#x3D; TRUE)[[1]]</span><br><span class="line">as.numeric(strsplit(x,&#39;,&#39;,fixed &#x3D; TRUE)[[1]])</span><br></pre></td></tr></table></figure></div><p><strong>字符串替换功能</strong><br>用gsub()可以替换字符串中的子串， 这样的功能经常用在数据清理中。 比如，把数据中的中文标点改为英文标点， 去掉空格，等等。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- &#39;1, 3; 5&#39;</span><br><span class="line"># 替换</span><br><span class="line">a &lt;- gsub(&#39;;&#39;, &#39;,&#39;, x, fixed&#x3D;TRUE)</span><br><span class="line">a</span><br><span class="line"># 将字符串按逗号分隔分开</span><br><span class="line">b &lt;- strsplit(a, &quot;,&quot;,fixed &#x3D; T)[[1]]</span><br><span class="line">b</span><br><span class="line"># 转化为数值型向量</span><br><span class="line">c &lt;- as.numeric(b)</span><br><span class="line">c</span><br></pre></td></tr></table></figure></div><p><strong>正则表达式</strong></p><p>正则表达式(regular expression)是一种匹配某种字符串模式的方法。 用这样的方法，可以从字符串中查找某种模式的出现位置， 替换某种模式，等等。 这样的技术可以用于文本数据的预处理， 比如用网络爬虫下载的大量网页文本数据。 R中支持perl语言格式的正则表达式， grep()和grepl()函数从字符串中查询某个模式， sub()和gsub()替换某模式。 比如， 下面的程序把多于一个空格替换成一个空格</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gsub(&#39;[[:space:]]+&#39;, &#39; &#39;, &#39;a   cat  in a box&#39;, perl&#x3D;TRUE)</span><br></pre></td></tr></table></figure></div><p>后面会有更加详细的介绍。</p><h2 id="7-R向量下标和子集"><a href="#7-R向量下标和子集" class="headerlink" title="7. R向量下标和子集"></a>7. R向量下标和子集</h2><p>变量可归结为名义型、有序型或连续型变量。</p><ul><li><code>名义型变量</code>是没有顺序之分的类别变量。糖尿病类型Diabetes（Type1、Type2）是名义型变量的一例。即使在数据中Type1编码为1而Type2编码为2，这也并不意味着二者是有序的。</li><li><code>有序型变量</code>表示一种顺序关系，而非数量关系。病情Status（poor、improved、excellent）是顺序型变量的一个上佳示例。我们明白，病情为poor（较差）病人的状态不如improved（病情好转）的病人，但并不知道相差多少。</li><li><code>连续型变量</code>可以呈现为某个范围内的任意值，并同时表示了顺序和数量。年龄Age就是一个连续型变量，它能够表示像14.5或22.8这样的值以及其间的其他任意值。</li></ul><p>类别（名义型）变量和有序类别（有序型）变量在R中称为<code>因子（factor）</code>。</p><p><strong>正整数下标</strong></p><p>对向量x, 在后面加方括号和下标可以访问向量的元素和子集。<br>设x &lt;- c(1, 4, 6.25)。 x[2]取出第二个元素； x[2] &lt;- 99修改第二个元素。 x[c(1,3)]取出第1、3号元素； x[c(1,3)] &lt;- c(11, 13)修改第1、3号元素。 下标可重复。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(1,4,6.25)</span><br><span class="line"># 下标从1开始计数</span><br><span class="line">x[0]</span><br><span class="line"># 修改1,3号元素为11,13</span><br><span class="line">x[c(1,3)] &lt;- c(11, 13)</span><br><span class="line">print(x)</span><br><span class="line">x[c(1,3,1)]</span><br></pre></td></tr></table></figure></div><p><strong>负整数下标</strong></p><p>负下标表示扣除相应的元素后的子集</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(1,4,6.25)</span><br><span class="line">x[-2]</span><br><span class="line">## 1.00 6.25</span><br><span class="line">x[-c(1,3)]</span><br><span class="line">## 4</span><br></pre></td></tr></table></figure></div><p>负整数下标不能与正整数下标同时用来从某一向量中取子集， 比如，x[c(1,-2)]没有意义。</p><p><strong>空下标与零下标</strong></p><p>x[]表示取x的全部元素作为子集。 这与x本身不同</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(1,4,6.25)</span><br><span class="line">x[]</span><br><span class="line">x[] &lt;- 999</span><br><span class="line">x</span><br><span class="line">x &lt;- c(1,4,6.25)</span><br><span class="line">x &lt;- 999</span><br><span class="line">x</span><br></pre></td></tr></table></figure></div><p><strong>下标超界</strong></p><p>设向量x长度为n, 则使用正整数下标时下标应在1…n中取值。 如果使用大于的下标， 读取时返回缺失值，并不出错。 给超出的下标元素赋值， 则向量自动变长， 中间没有赋值的元素为缺失值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(1,4,6.25)</span><br><span class="line">x[5]</span><br><span class="line">x</span><br><span class="line">x[5] &lt;- 9</span><br><span class="line">x</span><br></pre></td></tr></table></figure></div><p>虽然R的语法对下标超界不视作错误， 但是这样的做法往往来自不良的程序思路， 而且对程序效率有影响，所以实际编程中应避免下标超界。</p><p><strong>逻辑下标</strong></p><p>下标可以是与向量等长的逻辑表达式， 一般是关于本向量或者与本向量等长的其它向量的比较结果</p><p>要注意的是，如果逻辑下标中有缺失值， 对应结果也是缺失值。 所以，在用逻辑下标作子集选择时， 一定要考虑到缺失值问题。正确的做法是加上!is.na前提</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(1,4,6.25)</span><br><span class="line">x[x &gt; 3]</span><br><span class="line">x &lt;- c(1, 4, 6.25, NA)</span><br><span class="line">x[x &gt; 2]</span><br><span class="line">x[!is.na(x) &amp; x &gt; 2]</span><br></pre></td></tr></table></figure></div><p><strong>which()、which.min()、which.max()函数</strong></p><p>函数which()可以用来找到满足条件的下标,其他两个函数分别找最小与最大值的下标。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(3, 4, 3, 5, 7, 5, 9)</span><br><span class="line">which(x &gt; 5)</span><br></pre></td></tr></table></figure></div><p><strong>元素名</strong></p><p>向量可以为每个元素命名。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages &lt;- c(&quot;李明&quot;&#x3D;30, &quot;张聪&quot;&#x3D;25, &quot;刘颖&quot;&#x3D;28)</span><br></pre></td></tr></table></figure></div><p>或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages &lt;- c(30, 25, 28)</span><br><span class="line">names(ages) &lt;- c(&quot;李明&quot;, &quot;张聪&quot;, &quot;刘颖&quot;)</span><br></pre></td></tr></table></figure></div><p>或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages &lt;- setNames(c(30, 25, 28), c(&quot;李明&quot;, &quot;张聪&quot;, &quot;刘颖&quot;))</span><br></pre></td></tr></table></figure></div><p>这时可以用元素名或元素名向量作为向量的下标，如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages[&quot;张聪&quot;]</span><br><span class="line">## 张聪 </span><br><span class="line">##   25</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages[c(&quot;李明&quot;, &quot;刘颖&quot;)]</span><br><span class="line">## 李明 刘颖 </span><br><span class="line">##   30   28</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages[&quot;张聪&quot;] &lt;- 26</span><br></pre></td></tr></table></figure></div><p>这实际上建立了字符串到数值的映射表。</p><p>用unname(x)返回去掉了元素名的x的副本， 用names(x) &lt;- NULL可以去掉x的元素名。</p><p><strong>练习</strong></p><p>设文件class.csv内容如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name,sex,age,height,weight</span><br><span class="line">Alice,F,13,56.5,84</span><br><span class="line">Becka,F,13,65.3,98</span><br><span class="line">Gail,F,14,64.3,90</span><br><span class="line">Karen,F,12,56.3,77</span><br><span class="line">Kathy,F,12,59.8,84.5</span><br><span class="line">Mary,F,15,66.5,112</span><br><span class="line">Sandy,F,11,51.3,50.5</span><br><span class="line">Sharon,F,15,62.5,112.5</span><br><span class="line">Tammy,F,14,62.8,102.5</span><br><span class="line">Alfred,M,14,69,112.5</span><br><span class="line">Duke,M,14,63.5,102.5</span><br><span class="line">Guido,M,15,67,133</span><br><span class="line">James,M,12,57.3,83</span><br><span class="line">Jeffrey,M,13,62.5,84</span><br><span class="line">John,M,12,59,99.5</span><br><span class="line">Philip,M,16,72,150</span><br><span class="line">Robert,M,12,64.8,128</span><br><span class="line">Thomas,M,11,57.5,85</span><br><span class="line">William,M,15,66.5,112</span><br></pre></td></tr></table></figure></div><p>用如下程序可以把上述文件读入为R数据框d.class, 并取出其中的name和age列到变量name和age中：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d.class &lt;- read.csv(&#39;class.csv&#39;, header&#x3D;TRUE, stringsAsFactors&#x3D;FALSE)</span><br><span class="line">name &lt;- d.class[,&#39;name&#39;]</span><br><span class="line">name</span><br><span class="line">age &lt;- d.class[,&#39;age&#39;]</span><br><span class="line">age</span><br></pre></td></tr></table></figure></div><ol><li><p>求出age中第3, 5, 7号的值；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">age[c(3,5,7)]</span><br></pre></td></tr></table></figure></div></li><li><p>用变量age, 求出达到15岁及以上的那些值；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">which(age &gt; 15)</span><br><span class="line">age[age &gt; 15]</span><br></pre></td></tr></table></figure></div></li><li><p>用变量name和age, 求出Mary与James的年龄。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">names(age) &lt;- name</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">age[&quot;Mary&quot;]</span><br><span class="line">age[&quot;James&quot;]</span><br></pre></td></tr></table></figure></div></li><li><p>求age中除Mary与James这两人之外的那些人的年龄值，保存到变量age1中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">age</span><br><span class="line">age1 &lt;- age[-c(6,13)]</span><br><span class="line">age1</span><br></pre></td></tr></table></figure></div></li><li><p>假设向量x长度为n, 其元素是{1,2,…,n}的一个重排。 可以把x看成一个i到x[i]的映射(i在{1,2,…,n}中取值)。 求向量y, 保存了上述映射的逆映射，即： 如果x[i]=j, 则y[j]=i。</p></li></ol><h2 id="8-R数据类型的性质"><a href="#8-R数据类型的性质" class="headerlink" title="8. R数据类型的性质"></a>8. R数据类型的性质</h2><p>在R语言中数值一般看作double, 如果需要明确表明某些数值是整数， 可以在数值后面附加字母L</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">is.double(c(1,-3))</span><br><span class="line">is.integer(c(1L, -3L))</span><br></pre></td></tr></table></figure></div><p>在R的向量类型中， integer类型、double类型、logical类型、character类型、还有complex类型和raw类型称为原子类型(atomic types)， 原子类型的向量中元素都是同一基本类型的。 比如， double型向量的元素都是double或者缺失值。 除了原子类型的向量， 在R语言的定义中， 向量还包括后面要讲到的列表（list）， 列表的元素不需要属于相同的基本类型， 而且列表的元素可以不是单一基本类型元素。 用typeof()函数可以返回向量的类型， 列表返回结果为”list”:</p><p>原子类型的各个元素除了基本类型相同， 还不包含任何嵌套结构，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c(1, c(2,3, c(4,5)))</span><br></pre></td></tr></table></figure></div><p>R有一个特殊的NULL类型， 这个类型只有唯一的一个NULL值， 表示不存在。 要把NULL与NA区分开来， NA是有类型的（integer、double、logical、character等), NA表示存在但是未知。 用is.null()函数判断某个变量是否取NULL。</p><p>在用c()函数合并若干元素时， 如果元素基本类型不同， 将统一转换成最复杂的一个，复杂程度从简单到复杂依次为： logical&lt;integer&lt;double&lt;character。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">c(FALSE, 1L, 2.5, &quot;3.6&quot;)</span><br></pre></td></tr></table></figure></div><p>不同类型参与要求类型相同的运算时，也会统一转换为最复杂的类型， 如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">TRUE + 10</span><br></pre></td></tr></table></figure></div><p>不同类型参与要求类型相同的运算时，也会统一转换为最复杂的类型， 如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">paste(&quot;abc&quot;, 1)</span><br></pre></td></tr></table></figure></div><p><strong>属性</strong></p><p>除了NULL以外， R的变量都可以看成是对象， 都可以有属性。 在R语言中， 属性是把变量看成对象后， 除了其存储内容（如元素）之外的其它附加信息， 如维数、类属等。 对象x的所有属性可以用attributes()读取， 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- table(c(1,2,1,3,2,1)); </span><br><span class="line">print(x)</span><br><span class="line">attributes(x)</span><br></pre></td></tr></table></figure></div><p>用print()函数可以显示对象内容。 如果内容很多， 显示行数可能也很多。 用str()函数可以显示对象的类型和主要结构及典型内容。例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s &lt;- 101:200</span><br><span class="line">attr(s,&#39;author&#39;) &lt;- &#39;李小明&#39;</span><br><span class="line">attr(s,&#39;date&#39;) &lt;- &#39;2016-09-12&#39;</span><br><span class="line">str(s)</span><br></pre></td></tr></table></figure></div><p>str函数<br>即structure，紧凑的显示对象内部结构，即对象里有什么。</p><h2 id="9-R日期时间"><a href="#9-R日期时间" class="headerlink" title="9. R日期时间"></a>9. R日期时间</h2><p>主要为lubridate()函数的使用</p><blockquote><p>详细讲解：<a href="http://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/prog-type-date.html" target="_blank" rel="noopener">R日期时间</a></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(lubridate)</span><br><span class="line"># 函数lubridate::today()返回当前日期</span><br><span class="line">today()</span><br><span class="line"># 函数lubridate::now()返回当前日期时间：</span><br><span class="line">now()</span><br><span class="line"># </span><br><span class="line">ymd(c(&quot;1998-3-10&quot;, &quot;2018-01-17&quot;, &quot;18-1-17&quot;))</span><br></pre></td></tr></table></figure></div><p>lubridate包的如下函数可以取出日期型或日期时间型数据中的组成部分：</p><ul><li><code>year()</code>取出年</li><li><code>month()</code>取出月份数值</li><li><code>mday()</code>取出日数值</li><li><code>yday()</code>取出日期在一年中的序号，元旦为1</li><li><code>wday()</code>取出日期在一个星期内的序号， 但是一个星期从星期天开始， 星期天为1,星期一为2，星期六为7。</li><li><code>hour()</code>取出小时</li><li><code>minute()</code>取出分钟</li><li><code>second()</code>取出秒</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 取出月份</span><br><span class="line">month(as.POSIXct(&quot;2018-1-17 13:15:40&quot;))</span><br><span class="line"># 取出日</span><br><span class="line">mday(as.POSIXct(&quot;2018-1-17 13:15:40&quot;))</span><br></pre></td></tr></table></figure></div><h2 id="10-R因子类型"><a href="#10-R因子类型" class="headerlink" title="10 R因子类型"></a>10 R因子类型</h2><h3 id="10-1-因子"><a href="#10-1-因子" class="headerlink" title="10.1 因子"></a>10.1 因子</h3><p>R中用因子代表数据中分类变量, 如性别、省份、职业。 有序因子代表有序量度，如打分结果，疾病严重程度等。</p><p>用factor()函数把字符型向量转换成因子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(&quot;男&quot;, &quot;女&quot;, &quot;男&quot;, &quot;男&quot;,  &quot;女&quot;)</span><br><span class="line">sex &lt;- factor(x)</span><br><span class="line">sex</span><br><span class="line"># 查看属性</span><br><span class="line">attributes(sex)</span><br></pre></td></tr></table></figure></div><p>因子有class属性，取值为”factor”， 还有一个levels(水平值)属性， 此属性可以用levels()函数访问</p><p>事实上， <code>read.csv()</code>函数的默认操作会把输入文件的字符型列自动转换成因子， 这对于性别、职业、地名这样的列是合适的， 但是对于姓名、日期、详细地址这样的列则不合适。 所以，在<code>read.csv()</code>调用中经常加选项<code>stringsAsFactors=FALSE</code>选项禁止这样的自动转换，还可以用<code>colClasses</code>选项逐个指定每列的类型。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 把因子转换为纯粹的整数值</span><br><span class="line">as.numeric(sex)</span><br><span class="line"># 把因子转换成原来的字符型</span><br><span class="line">as.character(sex)</span><br></pre></td></tr></table></figure></div><p>为了对因子执行字符型操作（如取子串）， 保险的做法是先用as.character()函数强制转换为字符型。</p><p>factor()函数的一般形式为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">factor(x, levels = sort(unique(x), na.last = <span class="literal">TRUE</span>), </span><br><span class="line">       labels, exclude = <span class="literal">NA</span>, ordered = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure></div><ul><li><code>levels</code>自行指定各水平值, 不指定时由x的不同值来求得。</li><li><code>labels</code>指定各水平的标签, 不指定时用各水平值的对应字符串。</li><li><code>exclude</code>选项指定要转换为缺失值(NA)的元素值集合。</li><li><code>ordered</code>取真值时表示因子水平是有次序的(按编码次序)。</li></ul><p>在使用factor()函数定义因子时， 如果知道自变量元素的所有可能取值， 应尽可能使用levels=参数指定这些不同可能取值， 这样， 即使某个取值没有出现， 此变量代表的含义和频数信息也是完整的。 自己指定levels=的另一好处是可以按正确的次序显示因子的分类统计值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">li1 &lt;- factor(c(&#39;男&#39;, &#39;女&#39;), levels&#x3D;c(&#39;男&#39;, &#39;女&#39;))</span><br><span class="line">li2 &lt;- factor(c(&#39;男&#39;, &#39;男&#39;), levels&#x3D;c(&#39;男&#39;, &#39;女&#39;))</span><br><span class="line"># 这种合并方法会出错，结果不在是因子</span><br><span class="line">c(li1, li2)</span><br><span class="line"># 恢复成字符型后合并， 然后再转换为因子。 在合并两个数据框时也存在这样的问题。</span><br><span class="line">factor(c(as.character(li1), as.character(li2)))</span><br><span class="line">print(levels(factor(&quot;------&quot;)))</span><br><span class="line">attributes(li1)</span><br><span class="line">print(&quot;------&quot;)</span><br><span class="line">levels(li1)</span><br></pre></td></tr></table></figure></div><h3 id="10-2-table-函数"><a href="#10-2-table-函数" class="headerlink" title="10.2 table()函数"></a>10.2 <code>table()</code>函数</h3><p>用table()函数统计因子各水平的出现次数（称为频数或频率）。 也可以对一般的向量统计每个不同元素的出现次数。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">x &lt;- c(&quot;男&quot;, &quot;女&quot;, &quot;男&quot;, &quot;男&quot;,  &quot;女&quot;)</span><br><span class="line">sex &lt;- factor(x)</span><br><span class="line">table(sex)</span><br></pre></td></tr></table></figure></div><h3 id="10-3-tapply-函数"><a href="#10-3-tapply-函数" class="headerlink" title="10.3 tapply()函数"></a>10.3 <code>tapply()</code>函数</h3><p>可以按照因子分组然后每组计算另一变量的概括统计。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sex &lt;- factor(c(&quot;男&quot;, &quot;女&quot;, &quot;男&quot;, &quot;男&quot;,  &quot;女&quot;))</span><br><span class="line"># h与sex等长</span><br><span class="line">h &lt;- c(165, 170, 168, 172, 159)</span><br><span class="line"># 按照sex分组，然后统计h变量的Mean值</span><br><span class="line">tapply(h, sex, mean)</span><br></pre></td></tr></table></figure></div><h3 id="10-4-forcats包的因子函数"><a href="#10-4-forcats包的因子函数" class="headerlink" title="10.4 forcats包的因子函数"></a>10.4 forcats包的因子函数</h3><ul><li>tapply()函数可以按照因子分组然后每组计算另一变量的概括统计。</li><li>R语言中set.seed()作用是设定生成随机数的种子，种子是为了让结果具有重复性，重现结果。如果不设定种子，生成的随机数无法重现。如set.seed(1),中的1知识一个标记符号</li><li>round函数用于舍入到最接近的整数。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">library(forcats)</span><br><span class="line">set.seed(1)</span><br><span class="line">fac &lt;- sample(c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;), 30, replace &#x3D; TRUE)</span><br><span class="line">fac &lt;- factor(fac, levels &#x3D; c(&quot;red&quot;, &quot;green&quot;, &quot;blue&quot;))</span><br><span class="line">x &lt;- round(100*(10+rt(30,2)))</span><br><span class="line">res1 &lt;- tapply(x,fac,sd);res1</span><br><span class="line">barplot(res1)</span><br></pre></td></tr></table></figure></div>如果希望按照统计量次序对因子排序， 可以用forcats::fct_reorder()函数<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fac2 &lt;- fct_reorder(fac, x, sd)</span><br><span class="line">res2 &lt;- tapply(x, fac2, sd);barplot(res2)</span><br></pre></td></tr></table></figure></div></li></ul><p>有时在因子水平数较多时仅想将特定的一个或几个水平次序放到因子水平最前面， 可以用forcats::fct_relevel()函数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">levels(fac)</span><br><span class="line">fac3 &lt;- fct_relevel(fac, &quot;blue&quot;,&quot;green&quot;)</span><br><span class="line">levels(fac3)</span><br><span class="line">fac3 &lt;- fct_relevel(fac, &quot;blue&quot;)</span><br><span class="line">levels(fac3)</span><br></pre></td></tr></table></figure></div><p>fct_relevel()第一个参数是要修改次序的因子， 后续可以有多个字符型参数表示要提前的水平。</p><p>forcats::fct_reorder2(f, x, y)也调整因子f的水平的次序， 但是根据与每组中最大的x值相对应的y值大小调整次序， 这样在作多个因子水平对应的曲线图时可以比较容易地区分多条曲线。</p><p>forcats::fct_recode()可以修改每个水平的名称</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">fac4 &lt;- fct_recode(</span><br><span class="line">  fac,</span><br><span class="line">  &quot;红&quot;&#x3D;&quot;red&quot;, &quot;绿&quot;&#x3D;&quot;green&quot;, &quot;蓝&quot;&#x3D;&quot;blue&quot;)</span><br><span class="line">table(fac4)</span><br><span class="line">levels(fac4)</span><br></pre></td></tr></table></figure></div><p>fct_recode()在修改水平名时允许多个旧水平对应到一个新水平， 从而合并原来的水平。 如果合并很多， 可以用fct_collapse()函数， 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exam &lt;- factor(c(&quot;其他&quot;,&quot;联想&quot;,&quot;百度&quot;),levels &#x3D; c(&quot;其他&quot;,&quot;联想&quot;,&quot;百度&quot;))</span><br><span class="line">levels(exam)</span><br><span class="line">exam1 &lt;- fct_recode(</span><br><span class="line">  exam,</span><br><span class="line">  &quot;other&quot;&#x3D;&quot;其他&quot;, &quot;lenovo&quot;&#x3D;&quot;联想&quot;, &quot;baidu&quot;&#x3D;&quot;百度&quot;</span><br><span class="line">)</span><br><span class="line">levels(exam1)</span><br><span class="line">exam2 &lt;- fct_collapse(</span><br><span class="line">  exam,</span><br><span class="line">  &quot;其它&quot;&#x3D;c(&quot;无名&quot;, &quot;无应答&quot;),</span><br><span class="line">  &quot;联想&quot;&#x3D;c(&quot;联想&quot;, &quot;联想集团&quot;),</span><br><span class="line">  &quot;百度&quot;&#x3D;c(&quot;百度&quot;, &quot;百度集团&quot;)</span><br><span class="line">)</span><br><span class="line">levels(exam2)</span><br></pre></td></tr></table></figure></div><p><strong>练习</strong></p><p>设文件class.csv中包含如下内容:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name,sex,age,height,weight</span><br><span class="line">Alice,F,13,56.5,84</span><br><span class="line">Becka,F,13,65.3,98</span><br><span class="line">Gail,F,14,64.3,90</span><br><span class="line">Karen,F,12,56.3,77</span><br><span class="line">Kathy,F,12,59.8,84.5</span><br><span class="line">Mary,F,15,66.5,112</span><br><span class="line">Sandy,F,11,51.3,50.5</span><br><span class="line">Sharon,F,15,62.5,112.5</span><br><span class="line">Tammy,F,14,62.8,102.5</span><br><span class="line">Alfred,M,14,69,112.5</span><br><span class="line">Duke,M,14,63.5,102.5</span><br><span class="line">Guido,M,15,67,133</span><br><span class="line">James,M,12,57.3,83</span><br><span class="line">Jeffrey,M,13,62.5,84</span><br><span class="line">John,M,12,59,99.5</span><br><span class="line">Philip,M,16,72,150</span><br><span class="line">Robert,M,12,64.8,128</span><br><span class="line">Thomas,M,11,57.5,85</span><br><span class="line">William,M,15,66.5,112</span><br></pre></td></tr></table></figure></div><p>用如下程序把该文件读入为R数据框d.class, 其中的sex列已经自动转换为因子。 取出其中的sex和age列到变量sex和age中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d.class &lt;- read.csv(&#39;class.csv&#39;, header&#x3D;TRUE)</span><br><span class="line">sex &lt;- d.class[,&#39;sex&#39;]</span><br><span class="line">age &lt;- d.class[,&#39;age&#39;]</span><br></pre></td></tr></table></figure></div><ol><li><p>统计并显示列出sex的不同值频数；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">table(sex)</span><br></pre></td></tr></table></figure></div></li><li><p>分男女两组分别求年龄最大值；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">tapply(age,sex,max)</span><br></pre></td></tr></table></figure></div></li><li><p>把sex变量转换为一个新的因子，F显示成“Female”，M显示成“Male”。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sex</span><br><span class="line">sexf1 &lt;- factor(sex)</span><br><span class="line">library(forcats)</span><br><span class="line">sexf2 &lt;- fct_recode(</span><br><span class="line">  sexf1,</span><br><span class="line">  &quot;Femal&quot;&#x3D;&quot;F&quot;, &quot;Male&quot;&#x3D;&quot;M&quot;</span><br><span class="line">)</span><br><span class="line">sexf2</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
    
    <summary type="html">
    
      R语言的基本数据类型与运算1
    
    </summary>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="编程" scheme="https://steven-shixq.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻16</title>
    <link href="https://steven-shixq.github.io/2020/02/22/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB16/"/>
    <id>https://steven-shixq.github.io/2020/02/22/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB16/</id>
    <published>2020-02-22T02:12:03.000Z</published>
    <updated>2020-02-22T04:15:00.345Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> <a href="https://www.gatesnotes.com/Books/How-Not-to-be-Wrong" target="_blank" rel="noopener">How math secretly affects your life</a></p></blockquote><p><em>How Not to Be Wrong: The Power of Mathematical Thinking</em></p><p><em>如何不犯错：数学思维的力量</em></p><p>中文书名《魔鬼数学》</p><p>I took a lot of math classes in college. I remember Professor Shlomo Sternberg getting up on the first day of his class and telling us we weren’t going to see any numbers other than 0, 1, and 2. I had a great time in that one.</p><p>Jordan Ellenberg, the author of <em>How Not to Be Wrong: The Power of Mathematical Thinking</em>, also studied under Sternberg. On the surface it’s about math, but it’s really about how much math plays into our daily lives without our even knowing it.</p><p>The book starts with a story about Abraham Wald, an Eastern European mathematician who worked for the American government during World War II. One day the military <u>came to him and said</u> (来找他说), “We have a problem. We send our planes overseas, and when they come back, their engines are fine, but their tails are <strong>riddled with</strong> (充满) bullet holes. If we put more <strong>armor</strong> (装甲，盔甲) on the tails, though, the planes get too heavy to fly. Can you help us <u>figure out</u> (弄清楚) how to protect the planes’ tails better?”</p><p>And he said, “No.”</p><p>They were surprised, but then he explained that they were asking the wrong question. “You need to put more armor where there <em>aren’t</em> bullet holes. Clearly, when the plane gets hit in the tail, it makes it back to you. Your problem is the planes that get hit in the engine, because those are the ones that aren’t coming back.”</p><p>Ultimately, that’s really what the book is: a series of stories about how a lot of the apparently non-mathematical systems that <strong>underpin</strong> (巩固，支持) our daily lives are actually deeply mathematical, and people couldn’t develop them until they started asking the right questions. Each chapter starts somewhere that seems <u>fairly straightforward</u> (相当简单)—electoral politics, say, or the Massachusetts lottery—and then uses that as a jumping-off point to talk about the math involved.</p><p>In some places the math gets quite complicated. Ellenberg deals with cutting-edge thinking about subjects like <strong>prime numbers</strong> (质数，素数), extra dimensions, and relative infinities. A non-mathematician might get a little lost along the way. But even if you don’t feel like following him all the way to the bottom of things like Fano planes, 24-dimensional <strong>spheres</strong> (球，领域), and Condorcet’s <strong>paradox</strong> (悖论), after he goes really deep he always comes back to make sure you’ re still with him.</p><p>The way he deals with the lottery is a great example. For several years, the Massachusetts lottery ran in a way that allowed three teams—one led by an MIT student, one by a medical researcher, and one by a guy from Michigan—to game the system and win millions of dollars. You might ask, How could the state let them cheat like that for so long? Part of the answer is, the state didn’t care. Massachusetts got 80 cents for every $2 lottery ticket sold, no matter who won. And the second part of the answer is, they weren’t cheating. They were taking advantage of math to give themselves slightly better odds at winning and other people slightly worse odds. They basically turned themselves into the house at a casino.</p><p>But Ellenberg extends his analysis even further, because while two of the teams just had the Quic Pic machine choose their numbers randomly, the team of students <strong><u>filled out</u></strong> (填写) its tickets by hand. Tens of thousands of tickets, every time they played! Ellenberg has mathematical explanations for the difference—filling out the tickets by hand exposed the students to less risk of losing money in any given week—and then points out that, if you’re on a student’s budget, the thought of losing any money at all is pretty scary.</p><p>Toward the end of each chapter, Ellenberg broadens from these specific examples to a series of questions about how <em>else</em> some of the ideas in the chapter might be used, what kinds of mathematical questions are left to answer, and what kinds of real-life problems they might eventually solve.</p><p>Given how black-and-white so much of our political dialogue has become, I think it’s great to have somebody advocating for looking at the numbers, explaining the relative costs of things like alternative tax policies or what happens when you <strong>implement</strong> different voting strategies. Even if you don’t follow the deepest math behind these things, you can still appreciate the argument and the rigor (严密) of the thinking, and the world can always use more rigorous (严格的) thinking.</p><p>The writing is funny, smooth, and accessible—not what you might expect from a book about math. What Ellenberg has written is ultimately a love letter to math. If the stories he tells add up to a larger lesson, it’s that “to do mathematics is to be, at once, touched by fire and bound by reason”—and that there are ways in which we’re <em>all</em> doing math, all the time (一直是这样).</p><p>riddled ：充斥的；解谜</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-How math secretly affects your life
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="Math" scheme="https://steven-shixq.github.io/tags/Math/"/>
    
      <category term="数学" scheme="https://steven-shixq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻15</title>
    <link href="https://steven-shixq.github.io/2020/02/21/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB15/"/>
    <id>https://steven-shixq.github.io/2020/02/21/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB15/</id>
    <published>2020-02-20T16:36:15.000Z</published>
    <updated>2020-02-22T02:17:38.279Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Seveneves" target="_blank" rel="noopener">The day the moon blew up</a></p></blockquote><p><em>The novel that <strong>rekindled</strong> my love for sci-fi.</em></p><p>The plot of <em>Seveneves</em> (七夏娃) gets going when the moon blows up without warning and for no apparent reason. This isn’t a spoiler—it’s the first sentence of the book. “The moon blew up without warning and for no apparent reason.” People figure out that in two years, chunks of the moon will rain down on Earth in a cataclysmic (灾难性的) <strong>meteor</strong> (陨石) shower, <u>wiping out</u> (摧毁) every living thing and leaving the planet <strong>uninhabitable</strong> (不适宜居住的) for thousands of years. The world unites on a plan to get as many spacecraft as possible into <strong>orbit</strong> (轨道), where a few select people can <strong>ride out</strong> (安全度过) this Hard Rain and keep humanity going.</p><p>The book has so many cool ideas, for example, one is Stephenson’s writing on technology. <em>Seveneves</em> belongs in the subgenre of hard science fiction, which means it emphasizes scientific accuracy. Everything adheres to physical laws, so unlike <em>Star Wars</em>, no one travels anywhere near the speed of light. Stephenson tells you not just what happens, but how it happens. You’ll learn all about how orbits work and what it takes to connect two spacecraft in different orbits. You’ll learn the difference between fuel and <strong>propellant</strong> (推进燃料). There’s a long but clever passage about a woman who flies from Earth into orbit in a <strong>glider</strong> (滑翔机) while wearing a suit made of intelligent <strong>fabric</strong> (织物).</p><p>The other thing that struck me is the way the book pushes you to think big and long-term. If everyone learned that the world would end two days from now, there would be global panic, plus a big dose of <strong>hedonism</strong> (享乐主义). But what if it were ending two years from now? Would people keep going to work? Would kids go to school? If they did, what would you teach them?</p><p>In the last third of the book, there’s a fascinating exploration of the connection between culture and genetics. If only a few humans survived and had to <strong><u>start all over</u></strong> (重新开始), what would happen to distinctions of class and race? How much are you shaped by your genes, your family’s history, and your own experiences? In the wrong hands, this material could be <strong>dreary</strong> (枯燥的，沉闷的), but Stephenson does a good job of exploring it while moving the story along.</p><p>It helps that he throws in other nice touches to keep you thinking. The title is a palindrome (回文), though how that’s relevant is left up to you. The number 7 from the title turns out to matter in more than one way. And you might enjoy trying to figure out which characters were inspired by real people. There’s a famous <strong>astrophysicist</strong> (天体物理学家)/science explainer who sounds a lot like Neil deGrasse Tyson.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-The day the moon blew up
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="科幻小说" scheme="https://steven-shixq.github.io/tags/%E7%A7%91%E5%B9%BB%E5%B0%8F%E8%AF%B4/"/>
    
      <category term="sci-fi" scheme="https://steven-shixq.github.io/tags/sci-fi/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻14</title>
    <link href="https://steven-shixq.github.io/2020/02/20/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB14/"/>
    <id>https://steven-shixq.github.io/2020/02/20/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB14/</id>
    <published>2020-02-20T02:33:05.000Z</published>
    <updated>2020-02-22T02:32:27.729Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Sapiens-A-Brief-History-of-Humankind" target="_blank" rel="noopener">How did humans get smart?</a></p></blockquote><p>Yuval Noah Harari’s <em>Sapiens: A Brief History of Humankind</em></p><p>Harari, who is an Israeli historian, takes on a daunting challenge: to tell the entire history of us, the human race, in a mere 400 pages. I’ve always been a fan of writers who try to connect the dots and make sense of the sweep of history. </p><p>Probably no one has done it better than David Christian in his <a href="https://www.bighistoryproject.com/home" target="_blank" rel="noopener">Big History</a> lectures, which distill 13.7 billion years of history, from the Big Bang on, into a manageable framework that spans biology, physics, humanities, and the social sciences. While Harari concerns himself with a shorter time frame, the last 70,000 years of human history, his job is no less difficult. He sets out to explain how we, <em>Homo sapiens</em> (Latin for “wise person”), came to dominate the Earth and what may lie ahead for our species.</p><p>Most humans assume that we were always the ones in charge, lording over the rest of the animals. But Harari reminds us that long before we built the pyramids (金字塔), wrote symphonies (交响乐), or walked on the moon, there was nothing special about us. “The most important thing to know about prehistoric humans,” Harari writes, “is that they were insignificant animals with no more impact on their environment than gorillas (大猩猩), fireflies (萤火虫) or jellyfish (水母).” </p><p>One hundred thousand years ago, <em>Homo sapiens</em> was just one of a number of different human species, all competing for supremacy (霸权). Just as today we see different species of bears or pigs, there were different species of humans. While our own ancestors lived mainly in East Africa, our relatives <em>Homo neanderthalensis</em>, better known as Neanderthals, inhabited Europe. Another species, <em>Homo erectus</em>, populated Asia, and the island of Java was home to <em>Homo soloensis</em>.</p><p>Today, of course, there is just one human species alive. How did we <em>Homo sapiens</em> become so successful and others did not? Harari believes it was our unique cognitive abilities that made the difference. About 70,000 years ago, <em>Homo sapiens</em> <strong>underwent</strong> (经历)a “cognitive revolution,” Harari writes, which gave them the <strong>edge over</strong> (比…有优势) their rivals to spread from East Africa across the planet.</p><p>Other species had big brains too, but what made <em>Homo sapiens</em> so successful is that we are the only animals who are capable of large-scale cooperation. We know how to organize ourselves as nations, companies, and religions, giving us the power to accomplish complex tasks. Harari’s concept of a “cognitive revolution” reminded me of David Christian’s notion in Big History of “collective learning,” how the ability to share, store, and build upon information truly distinguishes us as humans and allowed us to thrive.</p><p>What’s unique about Harari’s take is that he focuses on the power of stories and myths to bring people together. Baboons, wolves, and other animals also know how to function as a group, of course, but their groups are defined by close social ties that limit their groups to small numbers. <em>Homo sapiens</em> has the special ability to unite millions of strangers around commons myths. Ideas like freedom, human rights, gods, laws, and capitalism exist in our imaginations, yet they can bind us together and motivate us to cooperate on complex tasks.</p><p>As much as I enjoyed <em>Sapiens</em>, there was plenty to disagree with in the book. For example, Harari sets out to prove that the agricultural revolution was one of the biggest mistakes in human history. Yes, it allowed civilizations to thrive, but on an individual level, he writes, we were much better off as hunter-gatherers. As farmers, people had to work a lot harder and in exchange they had a worse diet than they had as <strong>foragers</strong> (觅食者). Agricultural societies also created social <strong>hierarchies</strong> (阶级) in which the majority <strong>toiled</strong> (辛勤劳作，苦干) as <strong>peasants</strong> (农名) and a minority of elites ruled over them.</p><p>That’s certainly a provocative argument, but I wasn’t convinced. First, arguing that we were happier as hunter-gatherers than as farmers creates a choice when there isn’t one. It’s not as if we can turn back the clock and restart as hunter-gatherers or we can run an experiment to prove one way of life is better than the other. Second, I think Harari underestimates the hardships of being a hunter-gatherer. He suggests that death and violence rates were much lower in hunter-gatherer societies than after the agricultural revolution. But it’s more likely the violence was higher because of competition over resources. A farming society can support many more people per square mile than a hunter-gathering society. In order to keep population densities low, conflict was inevitable among groups of hunter- gatherers. Finally, calling the shift to agriculture a “mistake” overlooks the fact that farming societies were able to specialize, leading to written languages, new technologies, and art—all things we value today.</p><p> I would recommend this book to anyone interested in a fun, engaging look at early human history. Harari tells our history in such an <strong>approachable</strong> (容易理解的) way that you’ll have a hard time putting it down. He’s also an <strong>agile</strong> (机敏的)writer, <strong>deftly</strong> (灵巧地，熟练地) <strong>weaving</strong> (编织，编造) in entertaining historical stories</p><p>In the final section of the book especially stimulating. He wonders how artificial intelligence, genetic engineering, and other technologies will change our species. He also poses some fundamental questions about happiness. When in our long history as <em>Homo sapiens</em> were we most fulfilled? As hunter-gatherers chasing down <strong>mammoths</strong> (猛犸)? As farmers <u><strong>tilling</strong> (耕种) the soil</u> (耕地)? Maybe as God-fearing (敬畏上帝的) peasants in the Middle Ages? More fundamentally, he asks: Who are we as a species? And where are we going?</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-How did humans get smart?
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="历史" scheme="https://steven-shixq.github.io/tags/%E5%8E%86%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻13</title>
    <link href="https://steven-shixq.github.io/2020/02/19/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB13/"/>
    <id>https://steven-shixq.github.io/2020/02/19/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB13/</id>
    <published>2020-02-19T02:17:35.000Z</published>
    <updated>2020-02-22T02:32:02.810Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Mindset-The-New-Psychology-of-Success" target="_blank" rel="noopener">What you believe affects what you achieve</a></p></blockquote><p><em>Carol Dweck’s fascinating work on the growth mindset.</em></p><p>Even as my glasses have gotten smaller and hopefully cooler over the years, I am still a proud member of Nerd Nation. As such, I read a lot of books—usually more than 50 a year. Many of the books I review on Gates Notes are recent releases, because I figure people are generally more interested in hearing about newer works. But I also like to revisit older books that feel especially important or relevant. <em>Mindset: The New Psychology of Success</em> (2006), by the Stanford psychologist Dr. Carol Dweck, is one of those books.</p><p>Here is Dweck’s thesis: Our genes influence our intelligence and talents, <em>but these qualities are not fixed at birth.</em> If you mistakenly believe that your capabilities derive from DNA and destiny, rather than practice and perseverance (坚持不懈，毅力), then you operate with what Dweck calls a “fixed mindset (固定型思维模式)” rather than a “growth mindset (成长型思维模式).” Our parents and teachers exert a big influence on which mindset we adopt—and that mindset, in turn, has a profound impact on how we learn and which paths we take in life.</p><p>In experiment after experiment, Dweck has shown that the fixed mindset is a <u>huge psychological roadblock</u> (巨大的心理障碍)—regardless of whether you feel you were blessed with talent or not. If you have the fixed mindset and believe you were blessed with <u>raw talent</u> (天生的天赋), you tend to spend a lot of time trying to validate your “gift” rather than cultivating it. To protect your self-identity as someone who’s super smart or gifted, you often <strong><u>steer clear of</u></strong> (绕开，避开) tough challenges that might <strong>jeopardize</strong> (危害) that identity. Here’s how Dweck puts it: “From the point of view of the fixed mindset, effort is only for people with deficiencies…. If you’re considered a genius, a talent, or a natural (天生的)—then you have a lot to lose. Effort can reduce you.”</p><p>If you have the fixed mindset and believe you lost the genetic <strong>lottery</strong> (彩票), you also have little incentive to work hard. Why bother putting in a lot of effort to learn a difficult concept if you’ve convinced yourself that you’re <strong>lousy</strong> (糟糕) at it and nothing is going to alter that basic equation? When I was visiting with community college students in Arizona, one young man said to me, “I’m one of the people who’s not good at math.” It kills me when I hear that kind of thing. I think about how different things might have been if he had been told consistently (一贯的，始终的) “you’re very capable of learning this stuff.”</p><p>In contrast, people with the growth mindset believe that basic qualities, including intelligence, can be strengthened like muscles. It’s not that they believe that anyone can become the next Albert Einstein or Michael Jordan if they just work hard enough on their physics homework or <strong>fadeaway</strong> (后仰投篮)jumpers. Instead, in Dweck’s words “they believe a person’s true potential is unknown (and unknowable); that it’s impossible to <strong>foresee</strong>  (预见)what can be accomplished with years of passion, toil (辛勤劳作), and training.” As a result, they have every <strong>incentive</strong> (动机，激励的) to take on tough challenges and <strong>seek out</strong> opportunities to improve. </p><p>One of the reasons I loved <em>Mindset</em> is because it’s solutions-oriented. In the book’s final chapter, Dweck describes the workshop she and her colleagues have developed to shift students from a fixed to a growth mindset. These workshops demonstrate that “just learning about the growth mindset can cause a big shift in the way people think about themselves and their lives.”</p><p>My only criticism of the book is that Dweck slightly oversimplifies for her general audience. Contrary to the impression that Dweck creates here (but probably not in her academic papers), most of us are not purely fixed-mindset people or growth-mindset people. We’re both. When I was reading the book, I realized that I have approached some things with a growth mindset (like bridge) while other things in a fixed mindset (like basketball).</p><p>The greatest virtue of the book is that you can’t help but ask yourself things like, “Which areas have I always looked at through a fixed-mindset lens?” and “In what ways am I sending the wrong message to my children about mindset and effort?” Thanks to Dweck’s skillful coaching, you’re almost guaranteed to approach these tough questions with a growth mindset.</p><hr><p>Thanks to the encourage of my parents and primary school teachers , they helped me cultivate a “growth mindset”, which has a profound impact on my life.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-Mindset-The New Psychology of Success
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="psychology" scheme="https://steven-shixq.github.io/tags/psychology/"/>
    
      <category term="心理学" scheme="https://steven-shixq.github.io/tags/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻12</title>
    <link href="https://steven-shixq.github.io/2020/02/18/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB12/"/>
    <id>https://steven-shixq.github.io/2020/02/18/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB12/</id>
    <published>2020-02-18T01:57:38.000Z</published>
    <updated>2020-02-18T10:09:42.938Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Why-We-Sleep" target="_blank" rel="noopener">This book put me to sleep</a></p></blockquote><p>Back in my early Microsoft days, I routinely <u>pulled all-nighters</u> (整夜工作) when we had to deliver a piece of software. <strong>Once or twice</strong>  (有一两次), I stayed up two nights <strong>in a row</strong> (连续). I knew I wasn’t as sharp when I was operating mostly on caffeine and adrenaline, but I was obsessed with my work, and I felt that sleeping a lot was lazy.(我迷上了自己的工作，我还觉得睡太多觉是懒惰的行为)</p><p>Now that I’ve read Matthew Walker’s <em>Why We Sleep</em>, I realize that my all-nighters, combined with almost never getting eight hours of sleep, took a big toll (敲钟).</p><p>Walker, the author of the book, explains how neglecting sleep undercuts (削弱) your creativity, problem solving, decision-making, learning, memory, heart health, brain health, mental health, emotional well-being, immune system, and even your life span (寿命). “The decimation of sleep throughout industrialized nations is having a catastrophic impact,” Walker writes.</p><p>I don’t necessarily <strong>buy into</strong> (接受) all of Walker’s reporting, such as the strong link he claims between not getting enough sleep and developing Alzheimer’s. In an effort to wake us all up to the harm of sleeping too little, he sometimes reports as fact what science has not yet clearly demonstrated (他有时会报道科学尚未清楚证明的事实). But even if you apply a mild discount factor, <em>Why We Sleep</em> is an important and fascinating book.</p><p>Some questions in this book that we might cared about:</p><p><strong>Does everyone really need seven or eight hours of sleep a night?</strong></p><p>The answer is Yes! In the words of Dr. Thomas Roth, of the Henry Ford Hospital in Detroit, “The number of people who can survive on five hours of sleep or less without impairment (损伤), and <u>rounded to a whole number</u>  (四舍五入为整数), is zero.”</p><p><strong>Why do we sleep?</strong></p><p>In brief, sleep produces complex neurochemical baths that improve our brains in various ways. And it “restocks the armory of our immune system, helping fight <strong>malignancy</strong> (恶性肿瘤), preventing infection, and <strong>warding off</strong> (抵挡，避开) all manner of sickness.” In other words, sleep greatly enhances our evolutionary fitness—just in ways we can’t see.</p><p><strong>What can I do to improve my sleep hygiene?</strong></p><ul><li><p>Replace any LEDs bulbs in your bedroom, because they <strong>emit</strong> the most sleep-corroding (腐蚀) blue light.</p></li><li><p>Limit alcohol, because alcohol is <em>not</em> a sleep aid, contrary to popular belief. While it might help induce sleep, “alcohol is one of the most powerful suppressors of REM [rapid-eye-movement] sleep,” Walker says.</p></li><li><p>If you can possibly take a short midday nap like our ancestors used to, you should (but not too long). It will likely improve your creativity and coronary health as well as extend your lifetime.</p></li></ul><p>In the words of sb. :用某人的话来说</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gate-A book about why we sleep?
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
  </entry>
  
  <entry>
    <title>人是为了什么而活着？</title>
    <link href="https://steven-shixq.github.io/2020/02/18/%E6%B4%BB%E7%9D%80-%E4%BD%99%E5%8D%8E/"/>
    <id>https://steven-shixq.github.io/2020/02/18/%E6%B4%BB%E7%9D%80-%E4%BD%99%E5%8D%8E/</id>
    <published>2020-02-17T16:13:01.000Z</published>
    <updated>2020-02-22T02:18:30.949Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这本书很短，花了几个小时读完，先标记一下，要写读书笔记可能还要再去看看，语言太贫乏了。</p>]]></content>
    
    <summary type="html">
    
      余华-《活着》
    
    </summary>
    
    
      <category term="读书" scheme="https://steven-shixq.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="小说" scheme="https://steven-shixq.github.io/categories/%E8%AF%BB%E4%B9%A6/%E5%B0%8F%E8%AF%B4/"/>
    
    
      <category term="读书" scheme="https://steven-shixq.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="《活着》" scheme="https://steven-shixq.github.io/tags/%E3%80%8A%E6%B4%BB%E7%9D%80%E3%80%8B/"/>
    
      <category term="余华" scheme="https://steven-shixq.github.io/tags/%E4%BD%99%E5%8D%8E/"/>
    
      <category term="人生" scheme="https://steven-shixq.github.io/tags/%E4%BA%BA%E7%94%9F/"/>
    
      <category term="小说" scheme="https://steven-shixq.github.io/tags/%E5%B0%8F%E8%AF%B4/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻11</title>
    <link href="https://steven-shixq.github.io/2020/02/17/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB11/"/>
    <id>https://steven-shixq.github.io/2020/02/17/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB11/</id>
    <published>2020-02-17T02:41:08.000Z</published>
    <updated>2020-02-22T02:30:33.306Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Measure-What-Matters" target="_blank" rel="noopener">Management tips from a brilliant business leader</a></p></blockquote><p><em>It’s not what you know, it’s what you can accomplish.</em></p><p>In the early days of Microsoft, I felt pretty confident about my coding skills, but I had a lot to learn about project management. Andy Grove, <u>A precise (精明的), hard-driving (进取心十足的) guy</u>, who used to employed by Intel to help me improve my management skills. I studied several of the business books he wrote early on, and Microsoft adopted some of the methods that Intel used. I consider Andy one of the great business leaders of the 20th century.</p><p>Andy’s ideas are a basis for the management system called OKRs (Objectives and Key Results) developed by John Doerr, a venture capitalist and a frequent business partner of mine. In his new book, <em>Measure What Matters: How Google, Bono, and the Gates Foundation Rock the World With OKRs</em>, John explains how OKRs work and shows how you can apply them in <u>all sorts of situations</u> (各种各样的情况).</p><p>I’d recommend John’s book for anyone interested in becoming a better manager. In the <strong>excerpt</strong> (摘录) below, John tells the inside story of how Andy inspired the idea of OKRs.</p><p><strong>Excerpt from <em>Measure What Matters</em></strong><br><strong>By John Doerr</strong></p><p>In the space of an hour, Grove traced the company’s history, year by year. He summarized Intel’s core pursuits: a profit margin twice the industry norm, market leadership in any product line it entered, the creation of “challenging jobs” and “growth opportunities” for employees. Fair enough, I thought, though I’d heard similar things at business school.</p><p>Then <u>he said something that left a lasting impression on me</u> (他说的一些话给我留下了深刻持久的印象). He referenced his previous company, Fairchild, where he went on to <strong>blaze a trail</strong> (开辟道路，开创先河) in <strong>silicon wafer</strong> (硅片) research. Fairchild was the industry’s gold standard, but it had one great flaw: a lack of “<strong>achievement orientation</strong> (成就向导).”</p><p>“Expertise was very much valued there,” Andy explained. “That is why people got hired. That’s why people got promoted. Their effectiveness at translating that knowledge into actual results was kind of <strong>shrugged off</strong>.” At Intel, he went on, “we tend to be exactly the opposite. It almost doesn’t matter what you know. It’s what you can do with whatever you know or can acquire and actually accomplish [that] tends to be valued here.” Hence the company’s slogan: “Intel delivers (交付，递交).”</p><p><em>It almost doesn’t matter what you know</em>… To claim that knowledge was secondary and execution <strong>all-important</strong> (至关重要)—well, I wouldn’t learn that at Harvard. I found the proposition thrilling (我发现这个提议是令人兴奋的), a real-world <strong>affirmation</strong> (肯定，断言) of accomplishment (成就) over credentials (证书). But Grove wasn’t finished, and he had saved (保存) the best for last. <u><strong>Over a few closing minutes</strong></u>, <u>he <strong>outlined</strong> (概述，提纲) a system</u> he’d begun to install in 1971, when Intel was three years old. It was my first exposure to the art of formal goal setting. I was mesmerized. (这是我第一次接触正式的目标设定艺术。我被迷住了。)</p><p>Now, the two key <strong>phrases</strong> (短语，词组)…are objectives and the key result. And they match the two purposes. The objective is the direction: “We want to dominate the mid-range microcomputer component business.” That’s an objective. That’s where we’re going to go. Key results for this <strong>quarter</strong> (季度): “Win ten new designs for the 8085” is one key result. It’s a milestone. The two are not the same…</p><p>The key result has to be measurable. But at the end you can look, and without any arguments: Did I do that or did I not do it? Yes? No? Simple. No judgments in it.</p><p>关键结果必须是可衡量的，最后根据有没有取得关键成果，答案只有是或者不是，没有任何可以争论的地方。</p><p>Now, did we dominate the mid-range microcomputer business? That’s for us to argue in the years to come, but over the next quarter we’ll know whether we’ve won ten new designs or not.</p><p>It was a “very, very simple system,” Grove said, knowing simplicity was <strong>catnip</strong> to an audience of engineers. <strong>On its face</strong> (表面上), the conception seemed logical, <strong>commonsensical</strong> (有基本常识的)—and inspiring (鼓舞人心的，启发的). Against the <strong>stale</strong> (陈旧的) management <strong>orthodoxy</strong> (正统) of the period, Grove had created something fresh and <strong>original</strong> (创新的，新颖的). <strong>Strictly speaking</strong> (严格来说), however, his “objectives and key results” <u>did not spring (生长,涌出) from the void</u> (并非源于虚无). The process had a precursor. In finding his way, Grove had <strong>followed the trail of</strong> (跟着，向…学习)a <strong>legendary</strong> (传奇人物), Vienna-born gadfly, the first great “modern” business management thinker: Peter Drucker (彼得.德鲁克).</p><hr><p>shrugged off: 不以为然，忽略</p><p>Over a few closing minutes: 在短短的几分钟内</p><p>That’s where we’re going to go: 那就是我们要去的地方</p><hr><p>个人管理与管理他人（包含公司的管理）：</p><ol><li><p>相较于知道，能做到更加的重要；</p></li><li><p>以成就为向导；</p></li><li><p>管理的两个关键词：<code>目标</code>和<code>关键结果</code></p></li><li><p>设立目标：<code>目标</code>就是方向,就是我们要去往的地方（最后这个问题的答案会存在争论）；</p></li><li><p>预期的关键结果：<code>关键结果</code>必须是可衡量的，最后根据有没有取得关键成果，答案只有是或者不是，没有任何可以争论的地方。</p></li></ol><hr><p><em>See you tommorow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-Management tips from a brilliant business leader
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="管理" scheme="https://steven-shixq.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻10</title>
    <link href="https://steven-shixq.github.io/2020/02/16/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB10/"/>
    <id>https://steven-shixq.github.io/2020/02/16/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB10/</id>
    <published>2020-02-16T02:25:36.000Z</published>
    <updated>2020-02-16T03:37:13.783Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Origin-Story" target="_blank" rel="noopener">Lifelong learners will appreciate this book about the history of everything</a></p></blockquote><p>We all have an origin story. In some societies, they <strong>manifest as</strong> (表现为) creation myths. In others, they look more like history textbooks. It’s human nature to be curious about where we come from, and origin stories unite people through a common history and shared sense of purpose.</p><p>As the creator of <a href="https://www.bighistoryproject.com/home" target="_blank" rel="noopener">Big History</a>, David is well-suited to write about how we came to be. Big History tells us the story of the universe from the big bang to the first signs of life to today’s complex societies.</p><p><em>Origin Story</em> is essentially the Big History course condensed into a short book. It divides 13.8 billion years of existence into what David calls “thresholds”—moments in history that mark key transition points, like the formation of our solar system and the first appearance of early humans. The chapters about the early thresholds are heavy on physics and chemistry, but it skews more towards biology and anthropology as single cell life evolves into more complex beings.</p><p>David is a very good writer, and he has a way of <strong>making complicated subjects fun</strong>. <em>Origin Story</em>  does a fantastic job <strong>distilling</strong> (提炼，蒸馏) the latest thinking about the origins of the universe. </p><p>The book ends with a chapter on where humanity—and the universe—is headed.  Instead i wish he talked more about the role innovation will play in preventing the worst effects of climate change, he gets a little stuck on the current economic and political <strong>malaise</strong> (不适，心神不安) happening in the West. But he <strong>nails</strong> (强调，钉子) the importance of this moment in history: “Things are happening so fast that, like the slow-motion time of a near accident, the details of what we do in the next few decades will have huge consequences for us and for the <strong>biosphere</strong> (生物圈) on scales of thousands of years. <strong>Like it or not</strong> (不管喜欢与否), we are now managing an entire biosphere, and we can do it well or badly.”</p><p>Understanding where humanity comes from is crucial to shaping where we go next. <em>Origin Story</em> is an <strong>up-to-date</strong> (最新的) history of everything that will leave you with a greater appreciation (了解，鉴别，欣赏) of our place in the universe.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-What is humanity’s origin story?
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
  </entry>
  
  <entry>
    <title>R语言学习笔记1</title>
    <link href="https://steven-shixq.github.io/2020/02/15/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/"/>
    <id>https://steven-shixq.github.io/2020/02/15/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01/</id>
    <published>2020-02-15T15:53:24.000Z</published>
    <updated>2020-02-22T15:18:35.944Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>R语言教程-初识R语言</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本教程中所用到的软件包列表</span></span><br><span class="line">pkgs &lt;- c(</span><br><span class="line">  <span class="string">"assertthat"</span>,</span><br><span class="line">  <span class="string">"backports"</span>, <span class="string">"base64enc"</span>, <span class="string">"BH"</span>, <span class="string">"bindr"</span>, <span class="string">"bindrcpp"</span>, <span class="string">"bookdown"</span>, <span class="string">"broom"</span>,</span><br><span class="line">  <span class="string">"callr"</span>, <span class="string">"cellranger"</span>, <span class="string">"cli"</span>, <span class="string">"clipr"</span>, <span class="string">"clorspace"</span>, <span class="string">"crayon"</span>, <span class="string">"curl"</span>,</span><br><span class="line">  <span class="string">"DBI"</span>, <span class="string">"dbplyr"</span>, <span class="string">"dichromat"</span>, <span class="string">"digest"</span>, <span class="string">"dplyr"</span>,</span><br><span class="line">  <span class="string">"evaluate"</span>,</span><br><span class="line">  <span class="string">"forcats"</span>,</span><br><span class="line">  <span class="string">"ggplot2"</span>, <span class="string">"glue"</span>, <span class="string">"gtable"</span>,</span><br><span class="line">  <span class="string">"haven"</span>, <span class="string">"highr"</span>, <span class="string">"hms"</span>, <span class="string">"htmltools"</span>, <span class="string">"httr"</span>,</span><br><span class="line">  <span class="string">"jsonlite"</span>,</span><br><span class="line">  <span class="string">"knitr"</span>,</span><br><span class="line">  <span class="string">"labeling"</span>, <span class="string">"lazyeval"</span>, <span class="string">"lubridate"</span>,</span><br><span class="line">  <span class="string">"magrittr"</span>, <span class="string">"markdown"</span>, <span class="string">"microbenchmark"</span>, <span class="string">"mime"</span>, <span class="string">"mnormt"</span>, <span class="string">"modelr"</span>, <span class="string">"munsell"</span>,</span><br><span class="line">  <span class="string">"openssl"</span>,</span><br><span class="line">  <span class="string">"pillar"</span>, <span class="string">"pkgconfig"</span>, <span class="string">"plogr"</span>, <span class="string">"plyr"</span>, <span class="string">"psych"</span>, <span class="string">"purr"</span>,</span><br><span class="line">  <span class="string">"R6"</span>, <span class="string">"RColorBrewer"</span>, <span class="string">"Rcpp"</span>, <span class="string">"readr"</span>, <span class="string">"readxl"</span>,</span><br><span class="line">  <span class="string">"rematch"</span>, <span class="string">"reprex"</span>, <span class="string">"reshape2"</span>, <span class="string">"rlang"</span>, <span class="string">"rmarkdown"</span>,</span><br><span class="line">  <span class="string">"rprojroot"</span>, <span class="string">"rstudioapi"</span>, <span class="string">"rvest"</span>,</span><br><span class="line">  <span class="string">"scales"</span>, <span class="string">"selectr"</span>, <span class="string">"stringi"</span>, <span class="string">"stringr"</span>,</span><br><span class="line">  <span class="string">"tibble"</span>, <span class="string">"tidyr"</span>, <span class="string">"tidyselect"</span>, <span class="string">"tidyverse"</span>,</span><br><span class="line">  <span class="string">"utf8"</span>,</span><br><span class="line">  <span class="string">"viridisLite"</span>,</span><br><span class="line">  <span class="string">"whisker"</span>,</span><br><span class="line">  <span class="string">"xml2"</span>, <span class="string">"xtable"</span>,</span><br><span class="line">  <span class="string">"yaml"</span></span><br><span class="line">)</span><br><span class="line">install.packages(unique(pkgs))</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 编译本教程所用的R软件环境：</span></span><br><span class="line"><span class="comment"># devtools::session_info()</span></span><br></pre></td></tr></table></figure></div><h2 id="1-R语言介绍"><a href="#1-R语言介绍" class="headerlink" title="1. R语言介绍"></a>1. R语言介绍</h2><h3 id="1-1-R语言历史"><a href="#1-1-R语言历史" class="headerlink" title="1.1 R语言历史"></a>1.1 R语言历史</h3><p>R语言来自S语言，是S语言的一个变种。S语言由Rick Becker, John Chambers等人在贝尔实验室开发， 著名的C语言、Unix系统也是贝尔实验室开发的。<br>R是一个自由软件，GPL授权， 最初由新西兰Auckland 大学的Ross Ihaka 和 Robert Gentleman于1997年发布， R实现了与S语言基本相同的功能和统计功能。 现在由R核心团队开发，但全世界的用户都可以贡献软件包。 R的网站: <a href="http://www.r-project.org/" target="_blank" rel="noopener">http://www.r-project.org/</a></p><h3 id="1-2-R的特点"><a href="#1-2-R的特点" class="headerlink" title="1.2 R的特点"></a>1.2 R的特点</h3><ul><li>免费；</li><li>完整的程序设计语言，基于函数和对象，可以自定义函数，调入C、C++、Fortran编译的代码；</li><li>实现了经典的、现代的统计方法，如参数和非参数假设检验、线性回归、广义线性回归、非线性回归、可加模型、树回归、混合模型、方差分析、判别、聚类、时间序列分析等。</li><li>支持对象类和类方法。基于对象的程序设计。</li><li>是动态类型语言，解释执行，运行速度较慢。</li><li>支持对象类和类方法。基于对象的程序设计。<br>是动态类型语言，解释执行，运行速度较慢。<h4 id="1-2-1-辅助软件"><a href="#1-2-1-辅助软件" class="headerlink" title="1.2.1 辅助软件"></a>1.2.1 辅助软件</h4></li></ul><p>R可以把一段程序写在一个以.r或.R为扩展名的文本文件中， 如“date.r”, 称为一个_源程序_文件， 然后在R命令行用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">source</span>(<span class="string">"date.r"</span>)</span><br></pre></td></tr></table></figure></div><p>运行源程序。 这样的文件可以用记事本生成和编辑。编辑器推荐使用notepad++或者sublime text3</p><h4 id="1-2-2-R扩展软件包的安装与管理"><a href="#1-2-2-R扩展软件包的安装与管理" class="headerlink" title="1.2.2 R扩展软件包的安装与管理"></a>1.2.2 R扩展软件包的安装与管理</h4><p>还可以选择扩展包的安装路径， 如果权限允许， 可以选择安装在R软件的主目录内或者用户自己的私有目录位置。 由于用户的对子目录的读写权限问题， 有时不允许一般用户安装扩展包到R的主目录中。 用.libPaths()查看允许的扩展包安装位置， 在install.packages()中用lib=指定安装位置：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装sos包</span></span><br><span class="line">install.packages(<span class="string">"sos"</span>)</span><br><span class="line">print(.libPaths())</span><br><span class="line"><span class="comment">## [1] "C:/Users/25835/Documents/R/win-library/3.5"         </span></span><br><span class="line"><span class="comment">## [2] "C:/Program Files (x86)/ArrayTools/R/R-3.5.1/library"</span></span><br><span class="line">install.packages(<span class="string">"sos"</span>, lib=.libPaths()[<span class="number">1</span>])</span><br></pre></td></tr></table></figure></div><p>如果版本改变比较大，可以用如下方法批量地重新安装原有的软件包。 首先，在更新R软件前，在原来的R中运行：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">packages &lt;- .packages(<span class="literal">TRUE</span>)</span><br><span class="line">dump(<span class="string">"packages"</span>, file=<span class="string">"packages-20200215.R"</span>)</span><br></pre></td></tr></table></figure></div><p>这样可以获得要安装的软件包的列表。 在更新R软件后， 运行如下程序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">options(repos&#x3D;c(CRAN&#x3D;&quot;http:&#x2F;&#x2F;mirror.tuna.tsinghua.edu.cn&#x2F;CRAN&#x2F;&quot;))</span><br><span class="line">source(&quot;packages-20180704.R&quot;)</span><br><span class="line">install.packages(packages)</span><br></pre></td></tr></table></figure></div><p>安装时如果提问是否安装需要编译的源代码包， 最好选择否， 因为安装源代码包速度很慢还有可能失败。</p><h3 id="1-3-基本R软件的用法"><a href="#1-3-基本R软件的用法" class="headerlink" title="1.3 基本R软件的用法"></a>1.3 基本R软件的用法</h3><p>如果某个文件如myprog.R在当前工作目录中， 保存的都是R程序， 称这样的文件为源程序文件。 可以在命令行用如下命令运行其中的程序：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source(&quot;myprog.R&quot;)</span><br></pre></td></tr></table></figure></div><p>但是， 在MS Windows操作系统中， 默认的中文编码是GB18030编码。 R源程序文件的中文编码可能是GB18030也可能是UTF-8。 UTF-8是在世界范围更通用的编码。 如果发现用如下命令运行时出现中文乱码， 可能是因为源程序用了UTF-8编码， 这时source()命令要加上编码选项如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source(&quot;myprog.R&quot;, encoding&#x3D;&quot;UTF-8&quot;)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 获取工作目录</span><br><span class="line">getwd()</span><br></pre></td></tr></table></figure></div><p>显示结果中目录之间的分隔符用了/符号， 在Windows操作系统中一般应该使用\符号， 但是， 在R的字符串中一个\需要写成两个， 所以等价的写法是”C:\work”。</p><p><strong>项目</strong><br>用R和RStudio进行研究和数据分析， 每个研究问题应该单独建立一个文件夹（目录）。 该问题的所有数据、程序都放在对应的文件夹中。 在RStudio中， 用“File – New Project – Existing Directory”选中该问题的目录， 建立一个新的“项目”（project）。</p><p>在基本R软件而不是RStudio的命令行中运行命令help.start()或者用RGUI的帮助菜单中“html帮助”可以打开系统默认的互联网浏览器， 在其中查看帮助文档。</p><p><strong>帮助</strong></p><p>在命令行，用问号后面跟随函数名查询某函数的帮助。 用example(函数名)的格式可以运行此函数的样例，如:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">example(mean)</span><br></pre></td></tr></table></figure></div><p>有时仅知道一些方法的名字而不知道具体的扩展包和函数名称， 可以安装sos扩展包（package）， 用<code>findFn(&quot;函数名&quot;)</code>查询某个函数， 结果显示在互联网浏览器软件中。</p><h3 id="1-4-使用技巧"><a href="#1-4-使用技巧" class="headerlink" title="1.4 使用技巧"></a>1.4 使用技巧</h3><p><strong>使用历史</strong></p><p>在控制台（命令行窗格）中， 除了可以用左右光标键移动光标位置， 用上下光标键调回以前运行过的命令， 还有一个重要的增强（以MS Windows操作系统为例）： 键入要运行的命令的前几个字母，如<code>book</code>， 按“Ctrl+向上光标键”， 就可以显示历史命令中以<code>book</code>开头的所有命令， 单击哪一个， 哪一个就自动复制到命令行。 这一技巧十分重要， 我们需要反复允许同一命令时， 这一方法让我们很容易从许多命令历史中找到所需的命令。</p><p><strong>放大显示某一窗格</strong></p><p>当屏幕分辨率较低时， 将整个RStudio界面分为四个窗格会使得每个窗格都没有足够的显示精度。 为此， 可以将某个窗格放大到整个窗口区域， 需要使用其它窗格时再恢复到四个窗格的状态或者直接放大其它窗格到整个窗口区域。</p><p>使用菜单“View – Panes – Zoom Source”可以将编辑窗格放到最大， 在MS Windows下也可以使用快捷键“Ctrl+Alt+1”。 其它操作系统也有类似的快捷键可用。 使用菜单“View – Panes – Show All Panes”可以显示所有四个窗格。</p><p>放大其它窗格也可以用“Ctrl + Alt + 数字”，数字与窗格的对应关系为：</p><p>1: 编辑窗格；<br>2: 控制台（Console）；<br>3: 帮助；<br>4: 历史；<br>5: 文件；<br>6: 图形；<br>7: 扩展包；<br>8: 已定义变量和函数；<br>9: 研究报告或网站结果显示。</p><p><strong>运行程序</strong></p><p>输入命令的前几个字母后用“Ctrl+向上光标键”可以匹配地查找历史命令。<br>运行.R结尾的R sceipt时点击窗口的“Run”快捷图标或者用快捷键“Ctrl+Enter键”可以运行这些行。</p><p><strong>中文编码问题</strong></p><p>在中国国内主要使用GB18030(基本兼容于GB, GBK)和UTF-8， UTF-8是国际上更普遍使用的统一文字编码， 涉及到计算机编程时应尽可能使用此编码系统。</p><p>RStdio提供了“File – Reopen with Encoding”命令， 我们主要试验其中GB18030和UTF-8两种选择一般就可以解决问题。 如果选择GB18030显示就没有乱码了， 最好再用菜单“File – Save with Encoding”并选择UTF-8将其保存为UTF-8编码。</p><h2 id="2-R语言入门运行样例"><a href="#2-R语言入门运行样例" class="headerlink" title="2. R语言入门运行样例"></a>2. R语言入门运行样例</h2><p><strong>练习</strong></p><ol><li>某人存入10000元1年期定期存款，年利率3%, 约定到期自动转存（包括利息）。问：</li></ol><p>1.1 10年后本息共多少元？</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sum &lt;- <span class="number">10000</span>*(<span class="number">1</span>+<span class="number">0.03</span>)^<span class="number">10</span></span><br><span class="line">sum</span><br></pre></td></tr></table></figure></div><p>1.2 需要存多少年这10000元才能增值到20000元？</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 10000*(1+0.03)^x=20000</span></span><br><span class="line"><span class="comment"># (1+0.03)^x=2</span></span><br><span class="line">year2 &lt;- log(<span class="number">2</span>,<span class="number">1.03</span>)</span><br><span class="line">year2</span><br></pre></td></tr></table></figure></div><ol start="2"><li>成语说：“智者千虑，必有一失；愚者千虑，必有一得”。 设智者作判断的准确率为p1=0.99, 愚者作判断的准确率为p2=0.01， 计算智者做1000次独立的判断至少犯一次错误的概率， 与愚者做1000次独立判断至少对一次的概率。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">zhi &lt;- <span class="number">1</span>-<span class="number">0.99</span>^<span class="number">1000</span></span><br><span class="line">yu &lt;- <span class="number">1</span>-<span class="number">0.99</span>^<span class="number">1000</span></span><br><span class="line">zhi</span><br><span class="line">yu</span><br></pre></td></tr></table></figure></div></li></ol><h3 id="2-1-数学函数"><a href="#2-1-数学函数" class="headerlink" title="2.1 数学函数"></a>2.1 数学函数</h3><p><a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/sqrt_exp_log.png" data-fancybox="group" data-caption="数学函数" class="fancybox"><img alt="数学函数" title="数学函数" data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/sqrt_exp_log.png" class="lazyload"></a></p><ul><li>平方根：sqrt() square root的缩写</li><li>自然对数底数：exp(1)</li><li>自然对数：log</li></ul><h3 id="2-2-输出"><a href="#2-2-输出" class="headerlink" title="2.2 输出"></a>2.2 输出</h3><p>命令行的计算结果直接显示在命令的后面。 在用source()运行程序文件时， 需要用print()函数显示一个表达式的结果，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">print(sin(pi/<span class="number">2</span>))</span><br><span class="line"><span class="comment">## [1] 1</span></span><br></pre></td></tr></table></figure></div><p>用cat()函数显示多项内容， 包括数值和文本， 文本包在两个单撇号或两个双撇号中，如:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cat(&quot;sin(pi&#x2F;2)&#x3D;&quot;, sin(pi&#x2F;2), &quot;\n&quot;)</span><br><span class="line">## sin(pi&#x2F;2)&#x3D; 1</span><br></pre></td></tr></table></figure></div><p>cat()函数最后一项一般是”\n”, 表示换行。 忽略此项将不换行。</p><p><strong>用sink()函数作运行记录</strong></p><p>R使用经常是在命令行逐行输入命令（程序）， 结果紧接着显示在命令后面。 如何保存这些命令和显示结果？ 在R命令行中运行过的命令会被保存在运行的工作文件夹中的一个名为.Rhistory的文件中。 用sink()函数打开一个文本文件开始记录文本型输出结果。 结束记录时用空的sink()即可关闭文件不再记录。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sink(&quot;tmpres01.txt&quot;, split&#x3D;TRUE)</span><br><span class="line">print(sin(pi&#x2F;6))</span><br><span class="line">print(cos(pi&#x2F;6))</span><br><span class="line">cat(&quot;t(10)的双侧0.05分位数（临界值）&#x3D;&quot;, qt(1 - 0.05&#x2F;2, 10), &quot;\n&quot;)</span><br><span class="line">sink()</span><br></pre></td></tr></table></figure></div><p>sink()用作输出记录主要是在测试运行中使用， 正常的输出应该使用cat()函数、write.table()、write.csv()等函数。</p><p><strong>练习</strong></p><p>用cat()函数显示</p><p>log10(2)=<strong>* log10(5)=*</strong><br>其中***应该代以实际函数值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">cat(<span class="string">"log10(2)="</span>,log10(<span class="number">2</span>),<span class="string">"log10(5)="</span>,log10(<span class="number">5</span>))</span><br></pre></td></tr></table></figure></div><p>用sink()函数开始把运行过程记录到文件“log001.txt”中，在命令行试验几个命令，然后关闭运行记录，查看生成的“log001.txt”的内容。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sink(<span class="string">"log001.txt"</span>,split = <span class="literal">TRUE</span>)</span><br><span class="line">sin(pi/<span class="number">6</span>)</span><br><span class="line"><span class="number">9</span>/<span class="number">0.67</span></span><br><span class="line">cat(<span class="string">"log10(2)="</span>,log10(<span class="number">2</span>),<span class="string">"log10(5)="</span>,log10(<span class="number">5</span>))</span><br><span class="line">sink()</span><br></pre></td></tr></table></figure></div><h3 id="2-3-向量计算与变量赋值"><a href="#2-3-向量计算与变量赋值" class="headerlink" title="2.3 向量计算与变量赋值"></a>2.3 向量计算与变量赋值</h3><p>R语言以向量为最小单位。用&lt;-赋值。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x1 &lt;- <span class="number">1</span>:<span class="number">10</span></span><br><span class="line">x1</span><br><span class="line"><span class="comment">##  [1]  1  2  3  4  5  6  7  8  9 10</span></span><br></pre></td></tr></table></figure></div><p>一般的向量可以用c()生成， 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">marks &lt;- c(3, 5, 10, 5, 6)</span><br></pre></td></tr></table></figure></div><p>在程序语言中，变量用来保存输入的值或计算的结果。 变量可以存放各种不同类型的值， 如单个数值、多个数值（称为向量）、单个字符串、多个字符串（称为字符型向量），等等。 单个数值称为标量。</p><p>用程序设计语言的术语描述， R语言是动态类型的， 其变量的类型不需要预先声明， 运行过程中允许变量类型改变， 实际上变量赋值是一种“绑定”（binding）， 将一个变量的名称（变量名）与实际的一个存储位置联系在一起。 在命令行定义的变量称为全局变量。</p><p>用print()函数显示向量或在命令行中显示向量时， 每行显示的行首会有方括号和数字序号， 代表该行显示的第一个向量元素的下标。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>:<span class="number">80</span></span><br></pre></td></tr></table></figure></div><p>向量可以和一个标量作四则运算， 结果是每个元素都和这个标量作四则运算，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x1 &lt;- <span class="number">1</span>:<span class="number">10</span></span><br><span class="line">x1 + <span class="number">100</span></span><br></pre></td></tr></table></figure></div><p>两个等长的向量可以进行四则运算， 相当于对应元素进行四则运算，如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x2 &lt;- x1 * <span class="number">3</span></span><br><span class="line">cat(<span class="string">"x2:"</span>,x2,<span class="string">"\n"</span>)</span><br><span class="line">cat(<span class="string">"x2-x1:"</span>,x2 - x1,<span class="string">"\n"</span>)</span><br><span class="line">cat(<span class="string">"x2*x1:"</span>,x2 * x1)</span><br></pre></td></tr></table></figure></div><p>R的许多函数都可以用向量作为自变量， 结果是自变量的每个元素各自的函数值。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sqrt(x1)</span><br></pre></td></tr></table></figure></div><p>结果是1到10的整数各自的平方根。</p><h3 id="2-4-工作空间介绍"><a href="#2-4-工作空间介绍" class="headerlink" title="2.4 工作空间介绍"></a>2.4 工作空间介绍</h3><p>在命令行中定义的变量， 在退出R时，会提问是否保存工作空间， 初学时可选择保存， 真正用R进行数据分析时往往不保存工作空间。 再次启动R后， 能够看到以前定义的各个变量的值。</p><p>如果使用RStudio软件， 也需要把不同项目放在不同文件夹， 并且每个项目在RStudio中单独建立一个“项目”（project）。 要分析那个项目的数据， 就打开那个项目。 不同项目使用不同的工作空间。</p><p>RStudio中的“Environment”窗格会显示当前已定义的R变量与函数。</p><p><strong>练习</strong></p><ol><li>某人存入10000元1年期定期存款，年利率3%, 约定到期自动转存（包括利息）。列出1、2、……、10年后的本息金额。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">python</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">  y=<span class="number">1000</span>*(<span class="number">1.003</span>)**x</span><br><span class="line">  print(y)</span><br></pre></td></tr></table></figure></div></li><li>显示2的1,2,……, 20次方。</li><li>定义x1为1到10的向量，定义x2为x1的3倍，然后退出R，再次启动R，查看x1和x2的值。</li></ol><h3 id="2-5-绘图示例"><a href="#2-5-绘图示例" class="headerlink" title="2.5 绘图示例"></a>2.5 绘图示例</h3><h4 id="2-5-1-函数曲线示例"><a href="#2-5-1-函数曲线示例" class="headerlink" title="2.5.1 函数曲线示例"></a>2.5.1 函数曲线示例</h4><p>如下程序用curve()函数制作函数的曲线图， curve()函数第二、第三自变量是绘图区间：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">curve(x^<span class="number">2</span>,-<span class="number">2</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><p>类似地，函数曲线图用如下程序可制作, 用abline()函数添加参考线:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">curve(sin(x), <span class="number">0</span>, <span class="number">2</span>*pi)</span><br><span class="line">abline(h=<span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><h4 id="2-5-2-条形图示例"><a href="#2-5-2-条形图示例" class="headerlink" title="2.5.2 条形图示例"></a>2.5.2 条形图示例</h4><p>假设有10个男生，7个女生，如下程序绘制男生、女生人数的条形图：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">barplot(c(<span class="string">"男生"</span>=<span class="number">10</span>, <span class="string">"女生"</span>=<span class="number">7</span>), </span><br><span class="line">             main=<span class="string">"男女生人数"</span>)</span><br></pre></td></tr></table></figure></div><h4 id="2-5-3-散点图示例"><a href="#2-5-3-散点图示例" class="headerlink" title="2.5.3 散点图示例"></a>2.5.3 散点图示例</h4><p>下面的例子用plot()函数做了散点图, plot()函数第一个自变量是各个点的横坐标值， 第二个自变量是对应的纵坐标值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">plot(<span class="number">1</span>:<span class="number">10</span>,sqrt(<span class="number">1</span>:<span class="number">10</span>))</span><br></pre></td></tr></table></figure></div><h4 id="2-5-4-R软件自带的图形示例"><a href="#2-5-4-R软件自带的图形示例" class="headerlink" title="2.5.4 R软件自带的图形示例"></a>2.5.4 R软件自带的图形示例</h4><p>R软件中自带了一些演示图形。通过如下程序可以调用：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">demo(<span class="string">"graphics"</span>)</span><br><span class="line">demo(<span class="string">"image"</span>)</span><br></pre></td></tr></table></figure></div><p>画exp(x)在(-2,2)区间的函数图形。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">plot(-<span class="number">2</span>:<span class="number">2</span>,exp(-<span class="number">2</span>:<span class="number">2</span>),main=<span class="string">"自然对数底数"</span>)</span><br></pre></td></tr></table></figure></div><p>画ln(x)在(0.01,10)区间的函数图形。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">plot(<span class="number">0.01</span>:<span class="number">10</span>,log(<span class="number">0.01</span>:<span class="number">10</span>), main=<span class="string">"ln"</span>,xlab = <span class="string">"横轴"</span>,ylab = <span class="string">"ln(0.01,10)"</span>)</span><br></pre></td></tr></table></figure></div><h3 id="2-6-汇总统计示例"><a href="#2-6-汇总统计示例" class="headerlink" title="2.6 汇总统计示例"></a>2.6 汇总统计示例</h3><h4 id="2-6-1-表格数据"><a href="#2-6-1-表格数据" class="headerlink" title="2.6.1 表格数据"></a>2.6.1 表格数据</h4><p>统计用的输入数据典型样式是Excel表那样的表格数据。 表格数据特点：每一列应该是相同的类型（或者都是数值， 或者都是文字，或者都是日期）， 每一列应该有一个名字。</p><p>这样的表格数据，一般可以保存为.csv格式： 数据项之间用逗号分开，文件本身是文本型的， 可以用普通记事本程序查看和编辑。 Excel表可以用“另存为”命令保存为.csv格式。 常用的数据库管理系统一般也可以把表保存为.csv格式。</p><h4 id="2-6-2-读入表格数据"><a href="#2-6-2-读入表格数据" class="headerlink" title="2.6.2 读入表格数据"></a>2.6.2 读入表格数据</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">tax.tab &lt;- read.csv(<span class="string">"taxsamp.csv"</span>, header = <span class="literal">TRUE</span>, as.is = <span class="literal">TRUE</span>)</span><br><span class="line">print(head(tax.tab))</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">tax.tab &lt;- read.csv(<span class="string">"taxsamp.csv"</span>, header=<span class="literal">TRUE</span>, as.is=<span class="literal">TRUE</span>)</span><br><span class="line">print(head(tax.tab))</span><br></pre></td></tr></table></figure></div><p>出现错误：<code>Error in make.names(col.names, unique = TRUE) : 多字节字符串1有错</code>，只要加上编码方式就可以了。如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">tax.tab &lt;- read.csv(<span class="string">"taxsamp.csv"</span>, header=<span class="literal">TRUE</span>, as.is=<span class="literal">TRUE</span>,sep = <span class="string">","</span>, encoding = <span class="string">"UTF-8"</span>)</span><br><span class="line">print(head(tax.tab))</span><br></pre></td></tr></table></figure></div><p>程序中的选项<code>header=TRUE</code>指明第一行作为变量名行， 选项<code>as.is=TRUE</code>说明字符型列要原样读入而不是转换为因子(factor)。 读入的变量tax.tab称为一个数据框(data.frame)。 <code>head()</code>函数返回数据框或向量的前几项。 比较大的表最好不要显示整个表， 会使得前面的运行过程难以查看。</p><p>变量可归结为名义型、有序型或连续型变量。</p><ul><li><code>名义型变量</code>是没有顺序之分的类别变量。糖尿病类型Diabetes（Type1、Type2）是名义型变量的一例。即使在数据中Type1编码为1而Type2编码为2，这也并不意味着二者是有序的。</li><li><code>有序型变量</code>表示一种顺序关系，而非数量关系。病情Status（poor、improved、excellent）是顺序型变量的一个上佳示例。我们明 白，病情为poor（较差）病人的状态不如improved（病情好转）的病人，但并不知道相差多少。</li><li><code>连续型变量</code>可以呈现为某个范围内的任意值，并同时表示了顺序和数量。年龄Age就是一个连续型变量，它能够表示像14.5或22.8这样的值以及其间的其他任意值。</li></ul><p>类别（名义型）变量和有序类别（有序型）变量在R中称为<code>因子（factor）</code>。</p><h4 id="2-6-3-分类变量频数统计"><a href="#2-6-3-分类变量频数统计" class="headerlink" title="2.6.3 分类变量频数统计"></a>2.6.3 分类变量频数统计</h4><p>在tax.tab中， “征收方式”是一个分类变量。 用<code>table()</code>函数计算每个不同值的个数，称为频数(frequency):</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">table(tax.tab[[<span class="string">"征收方式"</span>]])</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">table(tax.tab[[<span class="string">"申报渠道"</span>]])</span><br></pre></td></tr></table></figure></div><p>也可以用<code>table()</code>函数统计“征收方式”和“申报渠道”交叉分类频数，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">table(tax.tab[[<span class="string">"征收方式"</span>]], tax.tab[[<span class="string">"申报渠道"</span>]])</span><br></pre></td></tr></table></figure></div><p>绘制Markdown格式表格：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">knitr::kable(table(tax.tab[[<span class="string">"征收方式"</span>]], tax.tab[[<span class="string">"申报渠道"</span>]]))</span><br></pre></td></tr></table></figure></div><table><thead><tr><th align="left"></th><th align="right">大厅申报</th><th align="right">网上申报</th></tr></thead><tbody><tr><td align="left">查帐征收</td><td align="right">9</td><td align="right">20</td></tr><tr><td align="left">定期定额征收</td><td align="right">9</td><td align="right">7</td></tr><tr><td align="left">定期定率征收</td><td align="right">0</td><td align="right">2</td></tr></tbody></table><h4 id="2-6-4-数值型变量的统计"><a href="#2-6-4-数值型变量的统计" class="headerlink" title="2.6.4 数值型变量的统计"></a>2.6.4 数值型变量的统计</h4><p>数值型变量可以计算各种不同的统计量, 如平均值、标准差和各个分位数。 summary()可以给出最小值、最大值、中位数、四分之一分位数、四分之三分位数和平均值。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">summary(tax.tab[[<span class="string">"营业额"</span>]])</span><br></pre></td></tr></table></figure></div><p>统计函数以一个数值型向量为自变量， 包括sum(求和), mean(平均值), var(样本方差), sd(样本标准差), min(最小值), max(最大值), range(最小值和最大值)等。</p><p>如果数据中有缺失值， 可以删去缺失值后计算统计量， 这时在mean, sd等函数中加入na.rm=TRUE选项。</p><p><strong>练习</strong><br>用如下程序定义一个变量x, 然后求x的平均值和最小值、最大值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line"><span class="comment"># 平均值</span></span><br><span class="line">mean(x)</span><br><span class="line"><span class="comment"># 最大值</span></span><br><span class="line">max(x)</span><br></pre></td></tr></table></figure></div><h3 id="2-7-运行源程序文件"><a href="#2-7-运行源程序文件" class="headerlink" title="2.7 运行源程序文件"></a>2.7 运行源程序文件</h3><p>用source()函数可以运行保存在一个文本文件中的源程序。 比如，如下内容保存在文件ssq.r中：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sum.of.squares &lt;- function(x)&#123;</span><br><span class="line">  sum(x^2)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>用如下source()命令运行：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">source(&quot;ssq.r&quot;)</span><br></pre></td></tr></table></figure></div><p>运行后就可以调用自定义函数sum.of.squares()了。</p><h4 id="2-7-1-源文件编码"><a href="#2-7-1-源文件编码" class="headerlink" title="2.7.1 源文件编码"></a>2.7.1 源文件编码</h4><p>对于源程序编码与系统默认编码不同的情况，  保存为UTF-8编码的源程序在简体中文MS Windows系统的R中运行， 可以在source()函数中可以添加encoding=”UTF-8”选项。 保存为GBK编码的源程序文件在MAC系统的R中运行， 可以在source()函数中可以添加encoding=”GBK”选项。</p><p><code>getwd()</code>: 获取当前工作目录<br><code>setwd()</code>: 设置当前的工作目录</p><ul><li><p>使用RStudio软件时， 将某个研究项目所有数据和程序放在某个文件夹中， 然后建立一个新项目（project）指向该文件夹。</p></li><li><p>文件路径写法：<code>setwd(&quot;d:/work&quot;)</code>或<code>setwd(&quot;d:\\work&quot;)</code>。</p></li></ul><p><strong>练习</strong></p><p>编辑生成ssq.r源程序文件并用source()函数运行， 然后计算：<br>sum.of.squares(1:5)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 即为sum(x^2)的值</span></span><br><span class="line"><span class="keyword">source</span>(<span class="string">"ssq.r"</span>)</span><br><span class="line">sum.of.squares(<span class="number">1</span>:<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div><p>reference:</p><p><a href="http://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/index.html" target="_blank" rel="noopener">R语言教程</a></p>]]></content>
    
    <summary type="html">
    
      认识R语言
    
    </summary>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="编程" scheme="https://steven-shixq.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻9</title>
    <link href="https://steven-shixq.github.io/2020/02/15/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB9/"/>
    <id>https://steven-shixq.github.io/2020/02/15/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB9/</id>
    <published>2020-02-15T02:36:07.000Z</published>
    <updated>2020-02-22T02:29:37.972Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Enlightenment-Now" target="_blank" rel="noopener">My new favorite book of all time</a></p></blockquote><p><em>Steven Pinker’s new book makes a powerful case for why the world is getting better.</em></p><p>Pinker is at his best when he analyzes historic trends and uses data to put the past into context. I love how he’s willing to dive deep into primary data sources and pull out unexpected signs of progress.</p><p>Here are five of facts from the book that show how the world is improving:</p><ol><li><p><strong>You’re 37 times less likely to be killed by a bolt of lightning than you were at the turn of the century</strong>.</p><p>we have better weather prediction capabilities, improved safety education, and more people living in cities.</p></li><li><p><strong>Time spent doing laundry from 11.5 hours a week in 1920 to an hour and a half in 2014</strong>.</p><p>The rise of the washing machine has improve quality of life by freeing up (释放) time for people-mostly women-to enjoy other pursuits. This might sound trivial in the grand scheme of progress. But that time represent nearly half a day every week that could be used for everything from reading a book to starting a new business.</p></li><li><p><strong>You’re way less likely to die on the job.</strong></p><p>Every year, 5,000 people die from occupational accidents in the U.S. But in 1929—when our population was less than two-fifths the size it is today—20,000 people died on the job. People back then viewed deadly workplace accidents as part of the cost of doing business. Today, we know better, and we’ve engineered ways to build things without putting nearly as many lives at risk.</p></li><li><p><strong>The global average IQ score is rising by about 3 IQ points every decade.</strong></p><p>Kids’ brains are developing more fully thanks to improved nutrition and a cleaner environment. Our world today encourages abstract thought from a young age, and it’s making us smarter.</p></li><li><p><strong>War is illegal.</strong></p><p>This idea seems obvious. But before the creation of the United Nations in 1945, no institution had the power to stop countries from going to war with each other. Although there have been some exceptions, the threat of international <strong>sanctions</strong> (制裁) and intervention has proven to be an effective <strong>deterrent</strong> (威慑) to wars between nations.</p></li></ol><p>People all over the world are living longer, healthier, and happier lives, but in our daily life news tend to report something grab everyone’s eyes which rare happen in our ordinary life. </p><p>He’s quick to dismiss (不予理会) the idea of robots <strong>overthrowing</strong> (推翻) their human creators. While I don’t think we’re in danger of a <em>Terminator-</em>style <strong>scenario</strong> (场景，情节), the question underlying that fear—who exactly controls the robots?—is a valid one. We’re not there yet, but at some point, who has AI and who controls it will be an important issue for global institutions to address.</p><p>At the end of <em>Enlightenment Now</em>, Pinker argues that “we will never have a perfect world, and it would be dangerous to seek one. But there is no limit to the <strong>betterments</strong> (改善) we can attain(获得，达到) if we continue to apply knowledge to enhance human <strong>flourishing</strong> (繁荣的).”</p><p>The world <em>is</em> getting better, even if it doesn’t always feel that way. I’m glad we have brilliant thinkers like Steven Pinker to help us see the big picture. It’s my new favorite book of all time.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-A book for why the world is getting better
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="Book" scheme="https://steven-shixq.github.io/tags/Book/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻8</title>
    <link href="https://steven-shixq.github.io/2020/02/14/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB8/"/>
    <id>https://steven-shixq.github.io/2020/02/14/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB8/</id>
    <published>2020-02-14T02:11:06.000Z</published>
    <updated>2020-02-22T02:29:03.085Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="An-amazing-guidebook-for-raising-and-educating-our-kids"><a href="#An-amazing-guidebook-for-raising-and-educating-our-kids" class="headerlink" title="An amazing guidebook for raising and educating our kids"></a>An amazing guidebook for raising and educating our kids</h1><blockquote><p><a href="https://www.gatesnotes.com/Books/Prepared" target="_blank" rel="noopener">An amazing guidebook for raising and educating our kids</a></p></blockquote><p><em>Diane Tavenner’s book offers amazing tips on preparing kids for college, a career, and life.</em></p><p>What if you were given the chance to design a new school <u><strong>from scratch</strong></u> (从头开始，白手起家)? And there was no need to follow the typical education model: a teacher at the front of a classroom lecturing to 25 to 30 seated students. No need to follow an existing curriculum, either. You could completely re-imagine what a good education is all about.</p><p>One person who took that question on—and came up with an intriguing answer—is Diane Tavenner, founder of Summit Public Schools, which operates some of the top-performing schools in the nation.</p><p>In her new book, <em>Prepared: What Kids Need for a Fulfilled Life</em>, Diane shares the story of how she designed a new kind of charter school with <u>a simple but very ambitious goal</u>: “We wanted to teach kids not just what they needed to get into college, but what they needed to live a good life.”</p><p>I had a chance to visit one of the Summit schools, I was <strong><u>blown away</u></strong> (偏好的惊讶，或者很感动). Some students worked on their own, moving at their own pace through their courses. Others worked together on projects. Instead of lecturing at the front of a class, teachers acted like coaches, providing one-on-one guidance to students. Everyone was engaged.</p><p>Summit schools are rooted in the unshakeable belief that <em>all</em> students have the potential for success. Summit’s unique model is built on three key elements:</p><p><strong>Self-directed learning:</strong> With the support of their teachers, all students are responsible for setting their own learning goals, developing learning plans, testing their knowledge, and assessing their performance. The personalized learning approach allows students to learn at their own pace. This is an incredibly important skill that will benefit them throughout their lives.</p><p><strong>Project-based learning:</strong>  Summit schools emphasize hands-on project-based learning, allowing students to dive deep into a topic and collaborate with other students, building skills that employers are looking for in today’s workplace.</p><p><strong>Mentoring:</strong> All students have a <strong>dedicated</strong> (专门的) mentor. More than a guidance counselor, these mentors meet regularly one-on-one with their students, building a deep relationship that can help students achieve their personal and academic goals.</p><p>Much of author’s advice is based on her belief that parents should support their child’s independent growth. Parents need to mentor, not direct. They should seek out their child’s opinions, encourage them to be self-directed learners, and expose them to as many new ideas, people, places and things as possible.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-An amazing guidebook for raising and educating our kids
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="Book" scheme="https://steven-shixq.github.io/tags/Book/"/>
    
      <category term="education" scheme="https://steven-shixq.github.io/tags/education/"/>
    
  </entry>
  
  <entry>
    <title>你想拥有一台赚钱机器还是自己当一台赚钱机器？</title>
    <link href="https://steven-shixq.github.io/2020/02/14/%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/"/>
    <id>https://steven-shixq.github.io/2020/02/14/%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF/</id>
    <published>2020-02-13T16:07:01.000Z</published>
    <updated>2020-02-22T09:32:16.718Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><em>最近读了畅销书作家博多.舍费尔的畅销书《财务自由之路-7年内赚到你的第一个100万》</em></p><h2 id="作者介绍"><a href="#作者介绍" class="headerlink" title="作者介绍"></a>作者介绍</h2><p>博多.舍费尔是畅销书《小狗钱钱》的作者，很多人因为这本书了解到他，他是德国的理财大师，致力于传播自己获得金钱的法则和成功致富的理论给大众。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>《财务自由之路》也是他的另一本畅销书，本书只是作为一本理财“概念”入门的书籍，书中作者主要是阐述理财的重要性，帮人们建立理财的信心，介绍一些理财的基本原则和策略，“上层建筑”较多，不是主要讲实际的理财技能，是一本不错的理财入门书籍。</p><p>我没有什么理财或者金融方面的知识储备，在大二的时候读过一本曼昆的《经济学原理》，这本书写的很有趣，解释了很多我们身边的现象。正如作者在书中所说的一样，经济学是一门研究人类一般生活事务的学问，学习经济学有助于更好的了解我们所处的世界，理解经济政策的潜力与局限性，以此更好的参与经济，做出正确的经济决策。《财务自由之路》写的是作者的理财观念，作者的目标也是帮助读者做出更好的理财决策。</p><p>正如作者在其封面所表达的一样：“我们追求财务自由不是因为崇拜金钱，而是因为不愿做金钱的奴隶，不是为了享受奢华，而是为了让自己和家人获得舒适而有尊严的生活！” 金钱的重要性是我们赋予的，如果有财务问题，金钱就会变得尤为重要。可能很多人在今天会觉得谈钱“很俗”，我们应该做自己感兴趣的事，而不应该首先考虑金钱，这句话很有道理。我们生活中有很多人都不去做自己真正感兴趣的事，究其原因就是因为缺钱。</p><p>最好的方法是将我们的事业建立在自己最大的爱好上。如何找到自己的兴趣，作者给了一个简单的答案：：“认识你自己，弄清你真正感兴趣的是什么。之后再想一想你应该如何用你的爱好来赚钱。最好每天都问自己一遍这几个问题，一步步地找出最满意的答案。”</p><p>但是金钱不能给人带来幸福，而且这也不是金钱的任务。金钱应该给予我们安全感、自由感。金钱应该为我们提供这样一种可能性，一种我们可以过上自己想要的生活的可能性。但还有一点无可否认：金钱可以使人更接近于幸福的生活。</p><h2 id="信念的树立"><a href="#信念的树立" class="headerlink" title="信念的树立"></a>信念的树立</h2><p>有些人会觉得金钱败坏人生，作者首先帮助人们树立了金钱使用的好坏取决于使用的人的概念，使用金钱能做很多好事。想要变得富有，不去认识或者改变自己的信仰是徒劳的。生活就是我们信仰的体现。</p><p>不要在身边寻找建议，而应该在最合适的地方寻找建议。为了巩固自己的想法，我们会从别人身上“借取”经验。我们总去寻找那些能够使我们的想法得到证实的事实。大多数建议者都想对自己的处境进行辩解，建议者常常对自身处境的辩解伪装成对你的建议，所以永远不要接受一个不会设身处地的人给出的建议。</p><p>深刻的变化发生于5个层次之上：采取行动、运用技巧、个人发展、世界观和自我认知。</p><p>大多数人都高估了自己1年内能做到的事情，也低估了自己10年内能做到的事情。</p><p>如果你渴望成功，你必须将自己置于一个“必需的”情境，不实现目标， 就永远不会快乐。 成功人士故意将自己引入一种绝对必要的情境 之中。他们将自己的义务展现在众人面前。他们将自己引向一种情境， 让周围所有人都知道：“我要登上这座山，你只会看到我在山峰上招 手，或是看到我的尸体躺在谷底。”</p><p>一个付出110％努力，主动摒弃所有借口的人，势必取得成功。 </p><p>做所有人都能做的事情，这件事情的价值就犹如沙漠里的一粒沙。 你不必做得更好，但要更独特。找出你的优势。 </p><p>你的收入由以下板块组成：能力、精力、影响力、自我评价/自我推销和创意。花更多的时间来营销和提高个人（或产品的）影响力。 </p><h2 id="如何理财"><a href="#如何理财" class="headerlink" title="如何理财"></a>如何理财</h2><p>只有当你的钱多到可以使你仅靠利息便可生活时，你才算真正富有和独立。 </p><ol><li><p>减少自己的消费，我们真正需要的东西少之又少，我们应该每次拿出一定比例的收入（10%~20%）进行储蓄</p></li><li><p>提高自己的收入，持续地去学习和成长，成为某个领域的专家并宣传它。</p></li><li><p>6到12个月不工作所需的储备金，进行无风险投资，获得财务保障。</p></li><li><p>使用储蓄资金进行投资，40∶40∶20原则保证财务安全。40％投入风险适 度的投资项目中，剩下的20％你可以投入风险较高的项目中。</p></li><li><p>实现财务安全之后，抽取一部分资金以实验财务自由。50％中风险，50％高风险，实现财务自由。</p><p><a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/3%E4%B8%AA%E6%B0%B4%E5%A3%B6.png" data-fancybox="group" data-caption="3个水壶" class="fancybox"><img alt="3个水壶" title="3个水壶" data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/3%E4%B8%AA%E6%B0%B4%E5%A3%B6.png" class="lazyload"></a></p></li></ol><p>短的来说就是：<br>1．储蓄一定比例的金钱。<br>2．使用储蓄资金进行投资。<br>3．提高自己的收入。<br>4．从每次加薪中提取一定比例进行储蓄。<br>每使用一个策略，你便会更接近于你的目标。</p><p>德国百万富翁的数据统计：</p><p>•74％是企业家；<br>•10％是高级管理人员（尤其是董事会层级）；<br>•10％是从业者（主要是医生、建筑师和律师）；<br>•5％是销售人员；<br>•1％是其他人员。<br>从中你能看出两种情况：首先，如果你不是企业家、不是董事会层 级员，你几乎没有可能成为百万富翁。</p><p>要想取得财务自由要么就赚得比大多数人多、自己创办公司或者投资并取得好的成绩。这都需要投入大量的时间进行学习。</p><p>-—-</p><p>我摘录的自认为比较有启发的句子：</p><ul><li><p>每天写成功日记</p></li><li><p>制作自己的梦想相册</p></li><li><p>如果你做得是所有人都能做的事情，你也只会得到其他所有人都有的东西</p></li><li><p>支付自己-给自己发工资，用于储蓄和投资</p></li><li><p>是储蓄而非财富让你变得更富有</p></li><li><p>以获取股息为目的而持有股票才属于投资</p></li><li><p>真正的投资者会在买入的时候获得利润，而非在卖出的时候</p></li><li><p>损失也是盈利的一部分，投资家把犯错看成是成功的必要部分</p></li><li><p>如果想向别人学习，获得别人的帮助，应该首先考虑如何让他人从中获益</p></li><li><p>作者每年读150本书，50本是假期中阅读的。每年至少参加4次讲座。</p></li></ul><p>-—-</p><p>由于复利的存在，长时间的固定投资能获得巨大的收益（利率还可以的情况下），很小的利率差异积年累月也会产生很大的收益差；</p><p>就像复利的原理一样，人们通常忽略的微小进步，起初看不出来多大的变化，积年累月之后会产生巨大的差异。所以不要忽视每天的微小进步，它在以后能给你带来巨大的改变。</p><p><strong>仅仅闭门读书不会让你变得富有。当你可以不必为了工作而工作，只为了乐趣而工作的时候，你知道会有什么结果吗？那才是人生真正的开始。</strong></p>]]></content>
    
    <summary type="html">
    
      理财入门书籍-[德]博多·舍费尔《财务自由之路》
    
    </summary>
    
    
      <category term="读书" scheme="https://steven-shixq.github.io/categories/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="理财" scheme="https://steven-shixq.github.io/categories/%E7%90%86%E8%B4%A2/"/>
    
    
      <category term="读书" scheme="https://steven-shixq.github.io/tags/%E8%AF%BB%E4%B9%A6/"/>
    
      <category term="理财" scheme="https://steven-shixq.github.io/tags/%E7%90%86%E8%B4%A2/"/>
    
      <category term="理财入门" scheme="https://steven-shixq.github.io/tags/%E7%90%86%E8%B4%A2%E5%85%A5%E9%97%A8/"/>
    
      <category term="博多·舍费尔" scheme="https://steven-shixq.github.io/tags/%E5%8D%9A%E5%A4%9A%C2%B7%E8%88%8D%E8%B4%B9%E5%B0%94/"/>
    
      <category term="《财务自由之路》" scheme="https://steven-shixq.github.io/tags/%E3%80%8A%E8%B4%A2%E5%8A%A1%E8%87%AA%E7%94%B1%E4%B9%8B%E8%B7%AF%E3%80%8B/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻7</title>
    <link href="https://steven-shixq.github.io/2020/02/13/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB7/"/>
    <id>https://steven-shixq.github.io/2020/02/13/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB7/</id>
    <published>2020-02-13T02:00:17.000Z</published>
    <updated>2020-02-14T02:34:09.554Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/GatesNotes.png" data-fancybox="group" data-caption="Gatesnotes" class="fancybox"><img alt="Gatesnotes" title="Gatesnotes" data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/GatesNotes.png" class="lazyload"></a></p><blockquote><p><a href="https://www.gatesnotes.com/Books/An-American-Marriage#access_token=N29vTHvbMsa46SqFgHP5_Wu8H56kk5_ttAxI_waeB5eHyhOO_eWKekQDEMpyv9Bf3-i9MdCfqMVLiv3I2dfWnjeDzX6W0rrJTV6WU_umSuod7_GdDtMN0k1vMTsA00RC1cEKXwLW3mZPrW5zhs4iQ1sm09dyhM7of3BbTSjv9-3-98w3-GH3RKDvjbDBvD_7zoD7koZrXi2t7v-4Xg2k7DJWAVbEJvxCT09DhsvtbiIxYq6GBUuWVmhDBNKZTkCupEL_sUpqcrgYanIpZOudRaF_-srwDp6pJWNGI8dB9yr9EEXVNoJcyEPFlj2SUkMgw20XxfRnqfjde9wN9T0B7PSYg-kpyh3c4MV2pFwkk_7_DeQMTvDKY-k-SiVl1fDV-NJ4KTExacIA_XTl_5ENTD1f6jT2xLEehWQjo6zNmoN6bsrShLBhxPOPNDLlqOT1vt0nPpOuDeRxo8fwyo8UUs9sKT931667EkLVgYW3j0-OzhxYCNceSzPa72j8L7FqH3Y6-2c8pg3zsOVTz1Wy1Hw0u4JLTQWP1PjhJa2DLFeQm8xm5rxu6uGCgydojooFCXeydUvH2rp-cS9jAf1VbxlbBYNkqONJxnOSNVa0mciWY0h_ebIndObt4eUyoxnWjKI-uXx05wysVIc0M3wBLSkvWUZcfJoCvByG8EhO-ar2jrTdYdLfsPcLJf5mIYvd2mXSz6A1gCWsk__xIT54sXvO3XHKoCQ3Zd9RX8k7bPqg5RFsGkPEL1VLyJfhmAIHPa-1HKlzgiDJ59s32oR6Ov7pX3x7UgX-NbLZLXcmW7p0SzfeKbhH7mo3P5Kp9wzzbFvfZ9wvCGV6WHmoKHNyZaq1dPit3RAZrEBQz4bJ2ESzqoV112C8aNVVPR55rbu8JzWeutQfKnf8TL7wOdaeCQyqgz2RQQnnjQ1TX0UIJh5L39CRM_HqnVngCHJjIG7fmoXmzVFZL0ujQsv2WJJ5kgCymkS2o1_h4LYsqN67DczIlmH2cIhW1DhUS3O_lNQlBbrMOhK9mdPct6fPdJNYF0cQBlGTsErX7ztehshRMU1xhSMAr34eZC8ep6ZcNH9z0EHkEtcztbncPESKGI1M7h-4Gfd3Xu_ebi8da0N6vAfQCTfw83gDN5FwHOC4_0P-fZbIi3JMo1Q-GFSJmpmz_h7IgaIs1UR4mBv9EwhRvPCv0UprTREn9fNvuXiPH2u0&token_type=bearer&expires_in=86400000&state=WpjfI_6eoPXRiNvUO77LXvQAC16kfuHCSSRYtp03sA81" target="_blank" rel="noopener">How long would you wait for love?</a></p></blockquote><p>A couple years ago, I visited a state prison, I’d never been to a prison before, and <u>it was an eye-opening experience</u> (令人大开眼界的经历).</p><p>The most memorable part was the discussion we had with some of the inmates (囚犯) about transitioning back into society. Although most were looking forward to <u>leaving prison behind</u> (离开监狱), some were clearly anxious about it. They told us they were scared to re-enter society after so many years behind bars (坐牢).</p><p><u>I couldn’t help but think about</u> (我忍不住去想) that conversation when I was reading <em>An American Marriage</em> by Tayari Jones，although it’s fictional, the story is about the question at the heart of the anxiety I saw that day: how do you rebuild your life after prison?</p><p>Roy and Celestial are newlyweds living in Atlanta. <u>They seemed to have it all</u> (他们似乎拥有了一切): good careers, a decent house, and a lot of love for one another (although their marriage wasn’t perfect).</p><p>That all changes when Roy gets falsely accused of rape and sentenced to 12 years in prison. This event radically changes their lives. Author’s message is clear:  Roy is innocent, Celestial knows it, <u>and neither fact matters</u> (事实都不重要了). He’s caught up in the system regardless.</p><p>What Jones is more interested in is how incarceration (监狱) changes relationships. About half of the book is letters exchanged (互相写信) between Roy and Celestial while he’s locked up. Although they start out sweetly, the letters become more tense as time goes on. Eventually, Celestial stops writing to Roy altogether (完全地). By the time he gets released from prison seven years early, she’s moved on. </p><p><strong>“There’s this mythical notion that you’ll wait forever for the person you love.”</strong></p><p>There’s this mythical notion that you’ll wait forever for the person you love. Penelope from the Odyssey (奥德赛-古希腊史诗) is the classic example—she <u>fights off</u> potential suitors (求婚者) for 20 years waiting for her husband, Odysseus, to return from war.</p><p>It’s a romantic idea, but is it realistic? Jones doesn’t seem to think so. We all like to imagine we’d be Penelope in that situation, but I suspect many would end up like Celestial instead. She writes to Roy, “You may feel like you’re carrying a burden, but I shoulder a load as well.” Later, she says, “A marriage is more than your heart, it’s your life. And we are not sharing ours.”(一场婚姻不止是两人的灵魂契合，更重要的是它是我们的生活，我们已不再分享我们彼此的生活了)</p><p>The fact that their marriage didn’t have a <strong>fairytale</strong> (童话般的) ending felt realistic. Roy’s unjust incarceration—and the separation it caused—pushed on the seams (裂痕，缝合处) that already existed in their relationship, and eventually those seams broke. Despite her decision to leave him, Celestial is a sympathetic character. You understand why she made her choice.</p><p><em>An American Marriage</em> is fundamentally a story about how incarceration hurts more than just the person locked up. It’s also a reminder of how <strong>draconian</strong> (严厉的) our criminal justice system can be—especially for black men like Roy. Once you get <strong>sucked into</strong> (陷入) that system, you’re marked for life. Everything you were or had can disappear while you’re in prison.</p><p>In a letter to his lawyer, Roy writes about how things have been difficult for Celestial but even more difficult for him. “I try to see her side of things, but it’s hard to weep for anyone who is out in the world living their dream,” he says. (我想在她身边陪着她，一起陪着她度过那些困难的日子，但是这种可能只存在于梦境中)</p><p>Jones is such a good writer that you can’t help but empathize with Roy and Celestial. Both have been put into a super-difficult position. I obviously haven’t experienced what they go through, but the characters—and their reactions to the situation—<strong>ring true to me</strong> (对我来说就像是真的一样-听起来就像是真的).</p><p>I wouldn’t say <em>An American Marriage</em> is a light, easy read, but it’s so well-written that you’ll find yourself <strong>sucked into</strong> it despite the heavy subject matter. If you’re looking for something thought-provoking to read this winter, you should add this one to your list.</p><hr><p><em>See you tommorow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-How long would you wait for love?
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="Book" scheme="https://steven-shixq.github.io/tags/Book/"/>
    
  </entry>
  
</feed>
