<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>衷深学习</title>
  <icon>https://www.gravatar.com/avatar/1a78ec769217974f51d40169d81d53e1</icon>
  <subtitle>石晓强的小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://steven-shixq.github.io/"/>
  <updated>2020-03-09T15:56:11.770Z</updated>
  <id>https://steven-shixq.github.io/</id>
  
  <author>
    <name>石晓强</name>
    <email>2583551979@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>每日外闻32</title>
    <link href="https://steven-shixq.github.io/2020/03/09/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB32/"/>
    <id>https://steven-shixq.github.io/2020/03/09/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB32/</id>
    <published>2020-03-09T00:27:13.000Z</published>
    <updated>2020-03-09T15:56:11.770Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script> <div>     <a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" class="lazyload"></a> </div><p><em>翻译哈佛商业评论经典文章</em></p><h1 id="万花筒里看成功5"><a href="#万花筒里看成功5" class="headerlink" title="万花筒里看成功5"></a>万花筒里看成功5</h1><p>在我们的研究里，那些取得多方面令人满意的、持久成功的人，会有意识的在这四个要素上进行努力，而不会忽视自身的价值和天赋。他们似乎本能的明白构成持久成功中的悖论：即要在那些你对美好生活的各种重要衡量标准上取得更多的胜利。为了四个要素整体的利益，我们必须明白自己在每件事情上的限度，不能因为要把某一件事要做到极致，而忽略了其他方面的需求。正如我们平常所说的那样，“理性的追求刚刚好也是一种艺术”。</p><p>这一原则与流行的观点相悖，流行的观点认为成功就是要突破局限，拥有更多，成为更多，做到更多。我们的研究表明，真正感到满意的成功人士是通过有意识地施加一些限制来获得这种满足感的。他们都有着多方面的才能，我们将之称为“转换和连接的能力”：他们都能够非常的专注于一项工作，直到这项工作能做到一定的满意程度，然后放下它，接着充满活力和成就感的投入到另一类要素的事情上。他们能不断转换自己的注意力，不论是在同一件事情上（例如，当你的产品策略建立在实现利润目标，还有关心客户的基础上时），还是涉及到不同领域的事情上（比如能在工作中停下来，转而和朋友开个玩笑）。</p><p>在我们的研究中，那些特别擅长筛选不断变化的目标，并只追求那些能够产生持久回报目标的人具有两个共同点。首先，他们将成功看作是广泛而流动的成就体验，其中包括所有四个类别的成就。他们不会把成功归于一个单一的事件或者生活中某个单一的领域。其次，他们那些在现实中被定义为成功的事例，都包括规模大不相同的成就。他们不会在每一个类别上设立一个极限的目标；相反，他们会设置一些小目标，还会设立一些需要持续付出努力才能实现的目标。他们的底线不是设定在某个类别的活动数量或者是得到奖励的量，而是设法保证在四个类别中都有所得。每个人都能学着这样做，你只需要一个更大的框架来理解这四个类别的动态平衡。</p><hr><h1 id="Success-That-Lasts-5"><a href="#Success-That-Lasts-5" class="headerlink" title="Success That Lasts 5"></a><a href="https://hbr.org/2004/02/success-that-lasts" target="_blank" rel="noopener">Success That Lasts 5</a></h1><p>Those in our research who achieved satisfying, enduring, multidimensional success consciously went after victories in all four categories without losing touch with their values and special talents. They seemed to understand intuitively the paradox we uncovered at the heart of enduring success: To get to more wins on the various important measures that make up your notion of the good life, success has to rest on a paradigm of limitation in any one activity for the sake of the whole. Or, as we call it, “on the reasoned pursuit of just enough.”</p><p>This principle flies in the face of the popular opinion that success is all about breaking through limitations, that it’s about having more, being more, doing more. Our research shows that the high-powered people who experienced real satisfaction achieved it through the deliberate imposition of limits. They all shared a versatile talent that we call “switching and linking”: They were able to focus intensely on one task until it gave them a particular sense of satisfaction, then put it down and jump to the next category with a feeling of accomplishment and renewed energy. This versatile refocusing could occur within the same activity (say, when you base your product strategy on accomplishing your profit goal <em>and</em> on caring for the customer), or it can involve switching attention between two realms (taking a break from work to joke with a friend).</p><p>The people in our research who were particularly skilled at sifting through the moving targets and going after only those that would produce lasting rewards shared two characteristics. First, they viewed success as a broad and dynamic experience of accomplishment, one that factored in all four categories. They didn’t attribute their success to one single event or even one single realm of life. Second, their concrete examples of what counted as “real” success included accomplishments of wildly varying magnitude. They weren’t setting maximum goals for themselves in each category; rather, they set some at a small scale and some at a scale that demanded sustained effort. The baseline for these individuals wasn’t the amount of activity or number of rewards in any one category, but the securing of a proportionate mix of all four. Anyone can learn to do this; you just need to have a larger framework in which to understand the dynamics of the four categories.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="Harvard Business Review" scheme="https://steven-shixq.github.io/tags/Harvard-Business-Review/"/>
    
      <category term="管理" scheme="https://steven-shixq.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="Management" scheme="https://steven-shixq.github.io/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻31</title>
    <link href="https://steven-shixq.github.io/2020/03/08/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB31/"/>
    <id>https://steven-shixq.github.io/2020/03/08/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB31/</id>
    <published>2020-03-08T04:42:08.000Z</published>
    <updated>2020-03-09T02:10:11.414Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script> <div>     <a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" class="lazyload"></a> </div>*翻译哈佛商业评论经典文章*<h1 id="万花筒里看成功4"><a href="#万花筒里看成功4" class="headerlink" title="万花筒里看成功4"></a>万花筒里看成功4</h1><p><strong>成功的复杂性2</strong></p><p>任何认真考虑过这成功四要素的人，都会很快的意识到要素本身是非常复杂的，很难有规律的去把握。随着你的目标变大变多，同时实现这四个要素变得更加的困难。每个要素都有不同的特性。这些要素对应不同的需求，取决于不同的情感驱动和优先顺序。所以，<strong>如果有人告诉你，你只要简单的做着你喜欢的工作，幸福感，成就感和生活的意义就会随之而来，这完全是误导人的说法</strong>。不管你有多在乎你的工作，你仍然会有很多有自相矛盾的欲望-你要权衡工作和生活，权衡要死盯住一个问题不放，还是先绕过它，权衡拥有更多公司短期的市场份额和投资公司未来的需求。你在竞争中使用的技巧和你在休闲娱乐时的技巧是完全不同的。你关心朋友或者客户可能对应四个条款中的“意义”一项，为自己公司构建有利的财务条款可能对应的是“成就感”的要素，这两者不能相互替代，它们都属于不同的考量范围。</p><p>理解这四个成功的基本要素的不同特性，能帮助你明晰你在某个事件中具体要与哪一个要素对应，然后制定计划，实现最合适的目标。否则，你可能会好高骛远指定太多脱离实际资源的目标，或者成为错误目标的牺牲者。</p><p>把自己的期望正确分类是获得可持续性成功的关键技能。比如，“与人竞争”应归属于“成就感”。如果你把“快乐”建立在“与人竞争”上，那么你可能会变成一个你和你周围的人都无法忍受的人，然后你开始“抱怨”为什么成功让你变得如此的孤独。那些不能为自己或者公司制定正确目标的人，往往就是陷入了这种错误的归类匹配中。例如，一家自称为家庭友好型的公司就不应该在晚饭时间或者周末假期时加班开会。</p><p>把期望正确的分类，可以帮助你在处理手头上的工作时，理智的看待事物，做出正确的判断，采取更果断的行动。在衡量一份工作时，你就不会只看这份工作这份工作给你带来多少快乐，或者仅根据你掌握某件事情的能力来计算生意上的成功。你会将一项任务放到更大的蓝图下，以长远的眼光来考虑其意义。同样地，你会在任务中调整情绪，找到最适合的心态。如果你打算以追求“快乐”的方式追求“成就”，那这种心态很可能在一开始就会阻碍你的表现；而相反的，如果把追求“成就”当成追求“快乐”，你会变成一个永无休止的工作狂。</p><hr><h1 id="Success-That-Lasts-4"><a href="#Success-That-Lasts-4" class="headerlink" title="Success That Lasts 4"></a><a href="https://hbr.org/2004/02/success-that-lasts" target="_blank" rel="noopener">Success That Lasts 4</a></h1><p><strong>The Complexity of Success 2</strong></p><p>Anyone who takes the four elements of success seriously soon realizes how complicated it can be to touch on all four with regularity. As you scale up your goals, the four-part mix becomes more difficult to achieve. Each factor has a different set of characteristics. Satisfying different needs, they draw on distinctive emotional drives and prioritize self and others in different ways. That’s why people who tell you that happiness, achievement, and significance will come automatically if you simply do the work you love are misguided. Regardless of how much you care about your job, you will still feel conflicting desires—between work and home, between working forever on a problem and taking a break from it, between going for more market share today and investing in the company’s needs for tomorrow. The skills you use to compete are totally different from those you employ in moments of enjoyment. You can be there for a friend, and you can care about a customer, but these acts (in the significance category) can’t be substituted for the kind of thinking and prioritization that is necessary to structure favorable financial terms for your own firm (in the achievement category).</p><p>People who tell you that happiness, achievement, and significance will come automatically if you simply do the work you love are misguided.</p><p>Understanding the distinctive features of the four areas of success can help you articulate what you are seeking in a certain activity. You can then create a diagnostic for determining how to achieve the most appropriate goal. You may be expecting too many categories to be fulfilled without incorporating the right resources and perspectives, or you may be falling prey to a mismatch.</p><p>Matching your expectations to the right category is a critical skill for achieving sustainable success. If you expect happiness to come primarily from competition (an achievement skill), you’ll probably turn into someone neither you nor those around you can tolerate—and wonder why success has made you so lonely. People who report having trouble defining the right goals for themselves or for their companies are often caught in such mismatches. For instance, a self-described family-friendly company might hold critical staff meetings over late dinners or during extended weekend retreats.</p><p>The act of categorizing in and of itself can help you take more decisive action and channel the right emotions and perspectives to the task at hand. You can stop measuring a job only by how happy it makes you or calculating a business success only in terms of your ability to achieve mastery over something. Instead, you’ll see how one task fits into a larger context. By the same token, you’ll be able to anticipate what kind of emotional capital you’ll need to bring to a task. If you try to bring feelings of happiness or contentment to your achievement goals, you’ll stunt your performance from the start. If you don’t put achievement in its place, however, you’ll trap yourself in a workaholic restlessness.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      HBR-Success That Lasts 4
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="Harvard Business Review" scheme="https://steven-shixq.github.io/tags/Harvard-Business-Review/"/>
    
      <category term="管理" scheme="https://steven-shixq.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="Management" scheme="https://steven-shixq.github.io/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>R语言学习笔记4</title>
    <link href="https://steven-shixq.github.io/2020/03/07/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/"/>
    <id>https://steven-shixq.github.io/2020/03/07/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B04/</id>
    <published>2020-03-07T14:16:54.000Z</published>
    <updated>2020-03-07T16:19:32.059Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>R语言教程-R编程1</strong></p><h2 id="13-列表类型"><a href="#13-列表类型" class="headerlink" title="13. 列表类型"></a>13. 列表类型</h2><p>R中列表(list)类型来保存不同类型的数据。<br>数据框也是列表的一种， 但是数据框要求各列等长， 而列表不要求。<br>用typeof()函数判断一个列表， 返回结果为list。 可以用is.list()函数判断某个对象是否列表类型。</p><h3 id="列表生成，列表元素修改与取值"><a href="#列表生成，列表元素修改与取值" class="headerlink" title="列表生成，列表元素修改与取值"></a>列表生成，列表元素修改与取值</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rec &lt;- list(name=<span class="string">"李明"</span>, age=<span class="number">28</span>, scores=c(<span class="number">85</span>,<span class="number">89</span>,<span class="number">97</span>))</span><br><span class="line">rec</span><br><span class="line"><span class="comment"># 用typeof()函数判断一个列表</span></span><br><span class="line">typeof(rec)</span><br><span class="line"><span class="comment"># is.list()函数判断某个对象是否列表类型</span></span><br><span class="line">is.list(rec[<span class="number">3</span>])</span><br><span class="line">is.list(rec)</span><br></pre></td></tr></table></figure></div><p>列表的一个元素也可以称为列表的一个“变量”， 单个列表元素必须用两重方括号格式访问</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rec[[<span class="number">3</span>]]</span><br><span class="line">rec[[<span class="number">1</span>]]</span><br><span class="line">rec[[<span class="string">"name"</span>]]</span><br><span class="line">rec[[<span class="number">3</span>]][<span class="number">3</span>]</span><br></pre></td></tr></table></figure></div><p>如果使用单重方括号对列表取子集， 结果还是列表而不是列表元素</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rec[<span class="number">1</span>]</span><br><span class="line">rec[<span class="number">3</span>]</span><br><span class="line">rec[<span class="string">"age"</span>]</span><br><span class="line"><span class="comment"># 列表的单个元素也可以用$格式访问</span></span><br><span class="line">rec$age</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用names()函数查看和修改元素名</span></span><br><span class="line">names(rec)</span><br><span class="line">names(rec)[<span class="number">3</span>] &lt;- <span class="string">"三科分数"</span></span><br><span class="line"><span class="comment"># 另一种写法</span></span><br><span class="line">names(rec)[names(rec)==<span class="string">'name'</span>] &lt;- <span class="string">"姓名"</span></span><br><span class="line">names(rec)</span><br><span class="line">rec[[<span class="string">"三科分数"</span>]]</span><br><span class="line"><span class="comment"># 修改元素内容</span></span><br><span class="line">rec[[<span class="string">"三科分数"</span>]][<span class="number">1</span>] &lt;- <span class="number">94</span></span><br><span class="line">rec</span><br></pre></td></tr></table></figure></div><p>把某个列表元素赋值为NULL就删掉这个元素。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rec[[<span class="string">"age"</span>]] &lt;- <span class="literal">NULL</span></span><br><span class="line">rec</span><br></pre></td></tr></table></figure></div><p>在list()函数中允许定义元素为NULL，这样的元素是存在的</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">li &lt;- list(a = <span class="number">20</span>, b=<span class="string">"fba"</span>, c=<span class="literal">NULL</span>)</span><br><span class="line">li</span><br></pre></td></tr></table></figure></div><p>但是，要把已经存在的元素修改为NULL值而不是删除此元素， 或者给列表增加一个取值为NULL的元素， 这时需要用单重的方括号取子集， 这样的子集会保持其列表类型， 给这样的子列表赋值为list(NULL)</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">li[<span class="string">'b'</span>] &lt;- list(<span class="literal">NULL</span>)</span><br><span class="line">li[<span class="number">1</span>] &lt;- <span class="number">21</span></span><br><span class="line">li[<span class="string">"d"</span>] &lt;- list(<span class="literal">NULL</span>)</span><br><span class="line">li</span><br></pre></td></tr></table></figure></div><h3 id="列表类型转换"><a href="#列表类型转换" class="headerlink" title="列表类型转换"></a>列表类型转换</h3><p>用as.list()把一个其它类型的对象转换成列表； 用unlist()函数把列表转换成基本向量。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">lis1 &lt;- as.list(<span class="number">1</span>:<span class="number">4</span>)</span><br><span class="line">lis1</span><br><span class="line">lis2 &lt;- list(<span class="string">"姓名"</span>=<span class="number">1</span>, test=<span class="number">2</span>, y=c(<span class="number">3</span>:<span class="number">5</span>))</span><br><span class="line">lis2</span><br><span class="line">lis3 &lt;- unlist(lis2)</span><br><span class="line">lis3</span><br></pre></td></tr></table></figure></div><h3 id="返回列表的函数–strsplit"><a href="#返回列表的函数–strsplit" class="headerlink" title="返回列表的函数–strsplit()"></a>返回列表的函数–strsplit()</h3><p>strsplit()输入一个字符型向量并指定一个分隔符， 返回一个项数与字符型向量元素个数相同的列表。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="string">'1, 2, 3'</span>, <span class="string">'11, 12, 13'</span>, <span class="string">'21, 22, 23'</span>, <span class="string">'31, 32, 33'</span>)</span><br><span class="line"><span class="comment"># 以逗号拆分</span></span><br><span class="line">res &lt;- strsplit(x, <span class="string">','</span>); res</span><br><span class="line"><span class="comment"># names()函数修改元素名</span></span><br><span class="line">names(res)[<span class="number">1</span>:<span class="number">4</span>] &lt;- c(<span class="string">'第一'</span>, <span class="string">'第二'</span>, <span class="string">'第三'</span>, <span class="string">'第四'</span>)</span><br><span class="line">res</span><br><span class="line"><span class="comment"># 使用sapply()函数进一步转换成数值型矩阵</span></span><br><span class="line">res2 &lt;- sapply(res,as.numeric)</span><br><span class="line">res2</span><br><span class="line"><span class="comment"># 直接转换为数值会出错</span></span><br><span class="line">res1 &lt;- as.numeric(res)</span><br><span class="line">res1</span><br></pre></td></tr></table></figure></div><h2 id="14-工作空间"><a href="#14-工作空间" class="headerlink" title="14 工作空间"></a>14 工作空间</h2><p>R把在命令行定义的变量都保存到工作空间中， 在退出R时可以选择是否保存工作空间。 这也是R与其他如C、Java这样的语言的区别之一。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用ls()命令可以查看工作空间中的内容。</span></span><br><span class="line">ls()</span><br></pre></td></tr></table></figure></div><p>在命令行定义的变量称为“全局变量”， 在编程实际中， 全局变量是需要慎用的。</p><p>可以用rm()函数删除工作空间中的变量，</p><p>要避免工作空间杂乱， 最好的办法还是所有的运算都写到自定义函数中。 自定义函数中定义的变量都是临时的， 不会保存到工作空间中。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 定义一个sandbox()函数</span></span><br><span class="line">sandbox &lt;- <span class="keyword">function</span>()&#123;</span><br><span class="line">  cat(<span class="string">'沙盘：回车退出。\n'</span>)</span><br><span class="line">  brower()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><p>运行sandbox()函数,提示符变成了“Browser[n]”，其中n代表层次序号。 在这样的browser命令行中随意定义变量， 定义的变量不会保存到工作空间中。 用“Q”命令可以退出这个沙盘环境， 接连回车也可以退出。</p><h2 id="15-R输入输出"><a href="#15-R输入输出" class="headerlink" title="15 R输入输出"></a>15 R输入输出</h2><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出</span></span><br><span class="line">x &lt;- c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">x <span class="comment">#或者print()</span></span><br><span class="line">cat(<span class="string">"x="</span>, x, <span class="string">"\n"</span>)</span><br></pre></td></tr></table></figure></div><p>cat()默认显示在命令行窗口， 为了写入指定文件中， 在cat()调用中用file=选项， 这时如果已有文件会把原有内容覆盖， 为了在已有文件时不覆盖原有内容而是在末尾添加， 在cat()中使用append=TRUE选项。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">cat(<span class="string">"=== 结果文件 ===\n"</span>, file = <span class="string">"cat_result.txt"</span>)</span><br><span class="line"><span class="comment"># \n 会在结果会面有一个空行</span></span><br><span class="line">cat(<span class="string">"x ="</span>, x, <span class="string">"\n"</span>,file=<span class="string">"cat_result.txt"</span>, append=<span class="literal">T</span>)</span><br></pre></td></tr></table></figure></div><p>函数sink()可以用来把命令行窗口显示的运行结果转向保存到指定的文本文件中， 如果希望保存到文件的同时也在命令行窗口显示， 使用split=TRUE选项。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sink(<span class="string">"file.txt"</span>, split=<span class="literal">TRUE</span>)</span><br><span class="line"><span class="comment"># 在此输入要保存命令结果的命令</span></span><br><span class="line">sink() <span class="comment"># 终止这样的命令结果输出记录</span></span><br></pre></td></tr></table></figure></div><p>在R命令行环境中定义的变量、函数会保存在工作空间中， 并在退出R会话时可以保存到硬盘文件中。 用save()命令要求把指定的若干个变量（直接用名字，不需要表示成字符串） 保存到用file=指定的文件中， 随后可以用load()命令恢复到工作空间中。 虽然允许保存多个变量到同一文件中， 但尽可能仅保存一个变量， 而且使用变量名作为文件名。 用save()保存的R特殊格式的文件是通用的， 不依赖于硬件和操作系统。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">scores &lt;- c(<span class="number">89</span>,<span class="number">94</span>,<span class="number">97</span>)</span><br><span class="line">save(scores, file=<span class="string">"scores.RData"</span>)</span><br><span class="line">load(<span class="string">"scores.RData"</span>)</span><br></pre></td></tr></table></figure></div><p>对于一个数据框， 可以用write.csv()或readr::write_csv()将其保存为逗号分隔的文本文件， 这样的文件可以很容易地被其它软件识别访问， 如Microsoft Excel软件可以很容易地把这样的文件读成电子表格。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(tibble)</span><br><span class="line"><span class="keyword">library</span>(readr)</span><br><span class="line">da &lt;- tibble(<span class="string">'name'</span>=c(<span class="string">'liming'</span>,<span class="string">'晓强'</span>,<span class="string">'steven'</span>),</span><br><span class="line">             <span class="string">'age'</span>=c(<span class="number">18</span>,<span class="number">24</span>,<span class="number">25</span>))</span><br><span class="line">write_csv(da, path=<span class="string">'write_csv file.csv'</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用scan()函数可以输入文本文件中的数值向量</span></span><br><span class="line"><span class="comment"># 文件中数值之间以空格分开</span></span><br><span class="line">cat(<span class="number">1</span>:<span class="number">12</span>, file=<span class="string">'e:/shixq/R/scan.txt'</span>)</span><br><span class="line"><span class="comment"># 路径还可以写为'e:\\shixq\\R\\scan.txt'</span></span><br><span class="line">x &lt;- scan(<span class="string">'e:/shixq/R/scan.txt'</span>,quiet = <span class="literal">T</span>)</span><br><span class="line">x</span><br><span class="line">M &lt;- matrix(x,ncol = <span class="number">3</span>,byrow = <span class="literal">T</span>)</span><br><span class="line">M</span><br></pre></td></tr></table></figure></div><p>scan()中的quite=TRUE选项使得读入时不自动显示读入的数值项数。这种方法可读取较大的数据。<br>read.table()或readr::read_table()函数也可以读入这样的数据， 但是会保存成数据框而不是矩阵， 而且read.table()函数在读入大规模的矩阵时效率很低。</p><h3 id="读取CSV文件"><a href="#读取CSV文件" class="headerlink" title="读取CSV文件"></a>读取CSV文件</h3><p>对于保存在文本文件中的电子表格数据， R可以用read.csv(), read.table(), read.delim(), read.fwf()等函数读入, 但是建议在readr包的支持下用read_csv(), read_table2(), read_delim(), read_fwf()等函数读入， 这些将读入的数据框保存为tibble类型， tibble是数据框的一个变种， 改善了数据框的一些不适当的设计。 readr的读入速度比基本R软件的read.csv()等函数的速度快得多， 速度可以相差10倍， 也不自动将字符型列转换成因子， 不自动修改变量名为合法变量名， 不设置行名。</p><p>对于中小规模的数据， CSV格式作为文件交换格式比较合适， 兼容性强， 各种数据管理软件与统计软件都可以很容易地读入和生成这样格式的文件， 但是特别大型的数据读入效率很低</p><p>CSV格式的文件用逗号分隔开同一行的数据项， 一般第一行是各列的列名（变量名）。</p><ul><li>数值型数据：直接表示</li><li>字符型数据：可以用双引号或者但引号包裹，或者不包裹</li><li>数据本身含有逗号或者引号的情况：需要加引号</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(tibble)</span><br><span class="line"><span class="keyword">library</span>(readr)</span><br><span class="line">d &lt;- read_csv(<span class="string">"testcsv.csv"</span>)</span><br></pre></td></tr></table></figure></div><p>read_csv()还可以从字符串读入一个数据框</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d.small &lt;- read_csv(<span class="string">"name,x,y</span></span><br><span class="line"><span class="string">                    john, 22, 45</span></span><br><span class="line"><span class="string">                    kim, 54, 87</span></span><br><span class="line"><span class="string">                    sandy, 34, 99"</span>)</span><br><span class="line">d.small</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 指定列名的写法</span></span><br><span class="line">d.small &lt;- read_csv(<span class="string">"john, 22, 45</span></span><br><span class="line"><span class="string">                    kim, 54, 87</span></span><br><span class="line"><span class="string">                    sandy, 34, 99</span></span><br><span class="line"><span class="string">"</span>, col_names=c(<span class="string">"name"</span>, <span class="string">"x"</span>, <span class="string">"y"</span>) )</span><br><span class="line">d.small</span><br></pre></td></tr></table></figure></div><p>read_csv()将空缺的值读入为缺失值， 将“NA”也读入为缺失值。</p><p>CSV文件是文本文件，是有编码问题的， 尤其是中文内容的文件。 readr包的默认编码是UTF-8编码。如果以GBK等其他形式编码，则要加上Locale参数和locale()函数<br>如：一个.csv文件以GBK保存，文件内容如下</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">gbk_csv &lt;- c(<span class="string">"序号,收缩压</span></span><br><span class="line"><span class="string">1,145</span></span><br><span class="line"><span class="string">5,110</span></span><br><span class="line"><span class="string">6, 未测</span></span><br><span class="line"><span class="string">9,150</span></span><br><span class="line"><span class="string">10, 拒绝</span></span><br><span class="line"><span class="string">15,115"</span>)</span><br><span class="line">d1 &lt;- read_csv(gbk_csv,locale=locale(encoding=<span class="string">"GBK"</span>))</span><br><span class="line">d1</span><br></pre></td></tr></table></figure></div><p>对每列的类型， readr用前1000行猜测合理的类型， 并在读取后显示猜测的每列类型。</p><p>但是有可能类型改变发生在1000行之后。 col_types选项可以指定每一列的类型， 如”col_double()”, “col_integer()”, “col_character()”, “col_factor()”, “col_date()”, “col_datetime”等。 cols()函数可以用来规定各列类型， 并且有一个.default参数指定缺省类型。 对因子，需要在col_factor()中用lelvels=指定因子水平。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d2 &lt;- read_csv(gbk_csv, locale=locale(encoding=<span class="string">"GBK"</span>),</span><br><span class="line">col_types=cols(`序号` = col_integer(),`收缩压` = col_character())</span><br><span class="line">)</span><br><span class="line">d2</span><br></pre></td></tr></table></figure></div><p>当猜测的文件类型有问题的时候， 可以先将所有列都读成字符型， 然后用type_convert()函数转换，</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">d &lt;- read_csv(&quot;filename.csv&quot;,</span><br><span class="line">              col_types&#x3D;cols(.default &#x3D; col_character()))</span><br><span class="line">d &lt;- type_convert(d)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 生成表格的md格式</span></span><br><span class="line">knitr::kable(d2)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 例如读入一个包含名字，性别，年龄，身高和体重的class.csv数据</span></span><br><span class="line"><span class="comment">#其中年龄，身高和体重可默认是定为col_double()类型</span></span><br><span class="line">ct &lt;- cols(</span><br><span class="line">  .default = col_double(),</span><br><span class="line">  name=col_character(),</span><br><span class="line">  sex=col_factor(levels=c(<span class="string">"M"</span>, <span class="string">"F"</span>))</span><br><span class="line">)</span><br><span class="line">d.class &lt;- read_csv(<span class="string">'class.csv'</span>, col_types=ct)</span><br><span class="line"><span class="comment"># 查看每列数据的指定类型（col_double()等）</span></span><br><span class="line">str(d.class)</span><br></pre></td></tr></table></figure></div><p>其中str()函数可以显示数据框的行数(obs.)和变量数(variables)， 以及每个变量（列）的类属等信息<br>除了read_csv()函数以外， R扩展包readr还提供了其它的从文本数据读入数据框的函数：</p><ul><li>read_table2()读入用空格作为间隔的文本文件， 同一行的两个数据项之间可以用一个或多个空格分隔， 不需要空格个数相同， 也不需要上下对齐。</li><li>read_tsv()读入用制表符分隔的文件。</li><li>read_fwf()读入上下对齐的文本文件。</li><li>read_lines()函数将文本文件各行读入为一个字符型向量。</li><li>read_file()将文件内容读入成一整个字符串</li><li>read_file_raw()可以不管文件编码将文件读入为一个二进制字符串。<br>对特别大的文本格式数据， data.table扩展包的fread()读入速度更快。<br>readr包的write_excel_csv()函数将tibble保存为csv文件， 总是使用UTF-8编码，结果可以被MS Office读取。</li></ul><h3 id="Excel表访问"><a href="#Excel表访问" class="headerlink" title="Excel表访问"></a>Excel表访问</h3><p>为了把Microsoft Excel格式的数据读入到R中， 最容易的办法是在Excel软件中把数据表转存为CSV格式， 然后用read.csv()读取。</p><p>把R的数据框保存为Excel格式， 只要用write.csv()把数据框保存成CSV格式</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(tibble)</span><br><span class="line">d1 &lt;- tibble(<span class="string">"学号"</span>=c(<span class="string">"101"</span>, <span class="string">"103"</span>, <span class="string">"104"</span>),</span><br><span class="line">             <span class="string">"数学"</span>=c(<span class="number">85</span>, <span class="number">60</span>, <span class="number">73</span>), </span><br><span class="line">             <span class="string">"语文"</span>=c(<span class="number">90</span>, <span class="number">78</span>, <span class="number">80</span>))</span><br><span class="line"></span><br><span class="line">write.csv(d1, file=<span class="string">"writecsv_test.csv"</span>, row.names=<span class="literal">FALSE</span>)</span><br><span class="line"><span class="comment"># 读取查看</span></span><br><span class="line"><span class="keyword">library</span>(readr)</span><br><span class="line">d4 &lt;- read_csv(<span class="string">"writecsv_test.csv"</span>,locale=locale(encoding = <span class="string">"GBK"</span>), col_types = cols(`学号`= col_character()))</span><br><span class="line">d4</span><br><span class="line"><span class="comment"># 查看d4结构和变量属性</span></span><br><span class="line">str(d4)</span><br></pre></td></tr></table></figure></div><h4 id="使用剪贴板"><a href="#使用剪贴板" class="headerlink" title="使用剪贴板"></a>使用剪贴板</h4><p>为了把Excel软件中数据表的选中区域读入到R中， 可以借助于剪贴板。 在Excel中复制选中的区域，然后在R中用</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从excel粘贴数据</span></span><br><span class="line">mypast_EXcel &lt;- read.delim(<span class="string">"clipboard"</span>)</span><br><span class="line">mypast_EXcel</span><br></pre></td></tr></table></figure></div><p>网页上类似于excel表格形式的数据也可以用read.delim(“clipboard”)读取</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 从网页生成的表格（markdown生成）粘贴数据</span></span><br><span class="line">mypast_web &lt;- read.delim(<span class="string">"clipboard"</span>)</span><br><span class="line">mypast_web</span><br></pre></td></tr></table></figure></div><p>经过read.delim()函数把选中部分转换成一个R的数据框。 如果复制的区域不含列名， 应加上header=FALSE选项。</p><p>这种方法也可以从R中复制数据到剪贴板中，然后可以把数据再粘贴到EXCEL中即可，例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">write.table(iris, file=<span class="string">"clipboard"</span>, sep = <span class="string">"\t"</span>, col.names = <span class="literal">NA</span>)</span><br></pre></td></tr></table></figure></div><p>这里把指定的数据框（这里是iris）写入到了剪贴板。<br>函数把指定的数据框写入到指定的文件中, 其中的col.names=NA选项是一个特殊的约定， 这时保存的文件中第一行是列名，如果有行名的话，行名所在的列对应的列名是空白的</p><h3 id="利用readxl扩展包"><a href="#利用readxl扩展包" class="headerlink" title="利用readxl扩展包"></a>利用readxl扩展包</h3><p>readxl扩展包的readxl()函数利用独立的C和C++库函数读入.xls和.xlsx格式的Excel文件。一般格式为</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">read_excel(path, sheet = <span class="number">1</span>, col_names = <span class="literal">TRUE</span>, </span><br><span class="line">           col_types = <span class="literal">NULL</span>, na = <span class="string">""</span>,  skip = <span class="number">0</span>)</span><br></pre></td></tr></table></figure></div><p>结果返回读入的表格为一个数据框。</p><ul><li><code>path</code>: 要读入的Excel文件名，可以是全路径，路径格式要符合所用操作系统要求。</li><li><code>sheet</code>: 要读入哪一个工作簿(sheet)，可以是整数序号，也可以是工作簿名称的字符串。</li><li><code>col_names</code>: 是否用第一行内容作为列名，缺省为是。</li><li><code>col_types</code>:<br>和read_csv()中的col_types=clos(列名= blank/date/text/numeric),其中如果列名为中文，要使用``包裹。<br>可以在读入时人为指定各列的数据类型，缺省时从各列内容自动判断，有可能会不够准确。人为指定时，指定一个对应于各列的字符型向量，元素可取值为:<ul><li><code>blank</code>: 自动判断该列；</li><li><code>numeric</code>: 数值型；</li><li><code>date</code>: 日期；</li><li><code>text</code>: 字符型。</li></ul></li></ul><p><code>可以利用RODBC访问Excel文件</code>，这里不演示，用其他方法代替此方法。<br>参考：<a href="http://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/prog-io.html" target="_blank" rel="noopener">利用RODBC访问Excel文件</a></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d1 &lt;- data.frame(<span class="string">"学号"</span>=c(<span class="string">"101"</span>, <span class="string">"103"</span>, <span class="string">"104"</span>),</span><br><span class="line">                <span class="string">"数学"</span>=c(<span class="number">85</span>, <span class="number">60</span>, <span class="number">73</span>), </span><br><span class="line">                <span class="string">"语文"</span>=c(<span class="number">90</span>, <span class="number">78</span>, <span class="number">80</span>))</span><br><span class="line">d2 &lt;- data.frame(<span class="string">"学号"</span>=c(<span class="string">"101"</span>, <span class="string">"103"</span>, <span class="string">"104"</span>),</span><br><span class="line">                <span class="string">"性别"</span>=c(<span class="string">"女"</span>, <span class="string">"男"</span>, <span class="string">"男"</span>))</span><br><span class="line"></span><br><span class="line">fname &lt;- <span class="string">"testwrite.xls"</span></span><br><span class="line"><span class="keyword">if</span>(file.exists(fname)) file.remove(fname)</span><br><span class="line"></span><br><span class="line"><span class="comment"># install.packages("RODBC")</span></span><br><span class="line"><span class="keyword">library</span>(RODBC)</span><br><span class="line"><span class="comment"># odbcConnectExcel is only usable with 32-bit Windows</span></span><br><span class="line">con &lt;- odbcConnectExcel(fname, readOnly=<span class="literal">FALSE</span>)</span><br><span class="line">res &lt;- sqlSave(con, d1, tablename=<span class="string">"成绩"</span>,</span><br><span class="line">          rownames=<span class="literal">F</span>, colnames=<span class="literal">F</span>, safer=<span class="literal">T</span>)</span><br><span class="line">res &lt;- sqlSave(con, d2, tablename=<span class="string">"性别"</span>,</span><br><span class="line">          rownames=<span class="literal">F</span>, colnames=<span class="literal">F</span>, safer=<span class="literal">T</span>)</span><br><span class="line">close(con)</span><br><span class="line"></span><br><span class="line"><span class="keyword">require</span>(RODBC)</span><br><span class="line">con &lt;- odbcConnectExcel(<span class="string">'testwrite.xls'</span>)</span><br><span class="line">rd1 &lt;- sqlFetch(con, sqtable=<span class="string">'成绩'</span>)</span><br><span class="line">close(con)</span><br></pre></td></tr></table></figure></div><h4 id="MySQL数据库访问"><a href="#MySQL数据库访问" class="headerlink" title="MySQL数据库访问"></a>MySQL数据库访问</h4><p>平常基本上不用MySQL数据库，等用到时再实践</p><h3 id="文件访问"><a href="#文件访问" class="headerlink" title="文件访问"></a>文件访问</h3><p>输入输出可以针对命令行，针对文件，R支持扩展的文件类型， 称为“连接(connection)”。</p><p>函数file()生成到一个普通文件的连接， 函数url()生成一个到指定的URL的连接，函数gzfile, bzfile, xzfile, unz支持对 压缩过的文件的访问不是压缩包，只对一个文件压缩）。<br>这些函数的大概用法：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">file(<span class="string">"path"</span>, open=<span class="string">""</span>, blocking=<span class="literal">T</span>,</span><br><span class="line">     encoding = getOption(<span class="string">"encoding"</span>), </span><br><span class="line">     raw = <span class="literal">FALSE</span>)</span><br><span class="line"></span><br><span class="line">url(description, open = <span class="string">""</span>, blocking = <span class="literal">TRUE</span>,</span><br><span class="line">    encoding = getOption(<span class="string">"encoding"</span>))</span><br><span class="line"></span><br><span class="line">textConnection(description, open=<span class="string">"r"</span>, </span><br><span class="line">    local = <span class="literal">FALSE</span>,</span><br><span class="line">    encoding = c(<span class="string">""</span>, <span class="string">"bytes"</span>, <span class="string">"UTF-8"</span>))</span><br><span class="line"></span><br><span class="line">gzfile(description, open = <span class="string">""</span>, </span><br><span class="line">       encoding = getOption(<span class="string">"encoding"</span>),</span><br><span class="line">       compression = <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">bzfile(description, open = <span class="string">""</span>, </span><br><span class="line">       encoding = getOption(<span class="string">"encoding"</span>),</span><br><span class="line">       compression = <span class="number">9</span>)</span><br><span class="line"></span><br><span class="line">xzfile(description, open = <span class="string">""</span>, </span><br><span class="line">       encoding = getOption(<span class="string">"encoding"</span>),</span><br><span class="line">       compression = <span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">unz(description, filename, open = <span class="string">""</span>,</span><br><span class="line">    encoding = getOption(<span class="string">"encoding"</span>))</span><br></pre></td></tr></table></figure></div><p>文件打开或者写入类型：</p><ul><li><code>r</code>：文本型只读;</li><li><code>w</code>：文本型只写;</li><li><code>a</code>：文本型末尾添加;</li><li><code>rb</code>：二进制只读;</li><li><code>wb</code>：二进制只写;</li><li><code>ab</code>：二进制末尾添加;</li><li><code>r+</code>或<code>r+b</code>：允许读和写;</li><li><code>w+</code>或<code>w+b</code>：允许读和写，但刚打开时清空文件;</li><li><code>a+</code>或<code>a+b</code>：末尾添加并允许读。</li></ul><h4 id="文本文件访问"><a href="#文本文件访问" class="headerlink" title="文本文件访问"></a>文本文件访问</h4><p>函数readLines(), scan()可以从一个文本型连接读取。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以行读取数据</span></span><br><span class="line">D &lt;- readLines(file(<span class="string">'class.csv'</span>))</span><br><span class="line">print(D)</span><br></pre></td></tr></table></figure></div><p>用writeLines函数可以把一个字符型向量各元素作为不同行写入一个文本型连接。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取D的第一行</span></span><br><span class="line">vnames &lt;- strsplit(D, <span class="string">','</span>)[[<span class="number">1</span>]]</span><br><span class="line"><span class="comment"># con参数是指定一个写入文件名。</span></span><br><span class="line">writeLines(vnames, con=<span class="string">'class-names.txt'</span>)</span><br></pre></td></tr></table></figure></div><p>结果为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name</span><br><span class="line">sex</span><br><span class="line">age</span><br><span class="line">height</span><br><span class="line">weight</span><br></pre></td></tr></table></figure></div><h4 id="字符型连接"><a href="#字符型连接" class="headerlink" title="字符型连接"></a>字符型连接</h4><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">fstr &lt;-</span><br><span class="line"><span class="string">"name,score</span></span><br><span class="line"><span class="string">王芳,78</span></span><br><span class="line"><span class="string">孙莉,85</span></span><br><span class="line"><span class="string">张聪,80</span></span><br><span class="line"><span class="string">"</span></span><br><span class="line"><span class="comment"># 函数textConnection打开一个字符串用于读取或写入</span></span><br><span class="line">d &lt;- read.csv(textConnection(fstr), header=<span class="literal">T</span>)</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">tc &lt;- textConnection(<span class="string">"sres"</span>, open=<span class="string">"w"</span>)</span><br><span class="line">cat(<span class="string">'Trial of text connection.\n'</span>, file=tc)</span><br><span class="line">cat(<span class="number">1</span>:<span class="number">10</span>, <span class="string">'\n'</span>, file=tc, append=<span class="literal">T</span>)</span><br><span class="line">close(tc)</span><br><span class="line">print(sres)</span><br></pre></td></tr></table></figure></div><p>写入用的textConnection 的第一个参数是保存了将要写入的字符型变量名的字符串， 而不是变量名本身， 第二个参数表明是写入操作， 使用完毕需要用close关闭。</p><h4 id="中文编码问题"><a href="#中文编码问题" class="headerlink" title="中文编码问题"></a>中文编码问题</h4><p>可以用iconvlist()查看R支持的编码名称<br>如果文件为GBK编码，则可以使用一些编辑器如notepad++,sublime text3等转换为UTF-8格式，或者在读入时用参数指明文件类型为GBK。<br>如上面提到的例子，假设gbk_csv的文件内容在excel中保存时是GBK格式，则用locale=locale(encoding=”GBK”)指定。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">gbk_csv &lt;- c(<span class="string">"序号,收缩压</span></span><br><span class="line"><span class="string">1,145</span></span><br><span class="line"><span class="string">5,110</span></span><br><span class="line"><span class="string">6, 未测</span></span><br><span class="line"><span class="string">9,150</span></span><br><span class="line"><span class="string">10, 拒绝</span></span><br><span class="line"><span class="string">15,115"</span>)</span><br><span class="line">d1 &lt;- read_csv(gbk_csv,locale=locale(encoding=<span class="string">"GBK"</span>))</span><br><span class="line">d1</span><br></pre></td></tr></table></figure></div><h4 id="用基本R的读取函数读取"><a href="#用基本R的读取函数读取" class="headerlink" title="用基本R的读取函数读取"></a>用基本R的读取函数读取</h4><p>读取UTF-8编码无BOM的文件时， 在read.csv()和read.table()等函数中加fileEncoding=”UTF-8”选项可以纠正编码问题；<br>UTF-8有BOM标志的文本文件不能被read.csv()识别</p><p>读取UTF-8编码无BOM或者有BOM的文件时， 在readLines()函数中加encoding=”UTF-8”选项可以纠正编码问题。</p><h4 id="用readr包读取"><a href="#用readr包读取" class="headerlink" title="用readr包读取"></a>用readr包读取</h4><p>readr包的read_csv()、read_table2()、read_lines()函数默认从UTF-8编码的文件中读取， 无BOM或者有BOM都可以。</p><p>但是，对GBK编码的文件，不能直接读取，为了读取GBK(或GB18030)编码的文件， 需要在read_csv()和read_lines()函数中加入 locale=locale(encoding=”GBK”)选项</p><h4 id="输出文件的编码"><a href="#输出文件的编码" class="headerlink" title="输出文件的编码"></a>输出文件的编码</h4><p>write.csv()、writeLines()生成的含有中文的文件的编码默认为操作系统的默认中文编码， 这里是GB18030。</p><p>readr的write_csv()、write_lines()函数生成的含有中文的文件的编码默认UTF-8无BOM。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(tibble)</span><br><span class="line"><span class="keyword">library</span>(readr)</span><br><span class="line">write_csv(tibble(<span class="string">"姓名"</span>=c(<span class="string">"张三"</span>, <span class="string">"李四"</span>)), <span class="string">"tmp.csv"</span>)</span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">read_csv(<span class="string">"tmp.csv"</span>)</span><br></pre></td></tr></table></figure></div><p>结果生成的文件编码为UTF-8无BOM， 这样的文件可以被R的readr::read_csv()正确读取， 但是不能被MS Excel软件正确读取。<br>write_excel_csv()可以生成带有<code>UTF-8有BOM</code>的CSV文件， 这样的文件可以被MS Office正确识别：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">write_excel_csv(tibble(<span class="string">"姓名"</span>=c(<span class="string">"张三"</span>, <span class="string">"李四"</span>)), <span class="string">"tmp1.csv"</span>)</span><br><span class="line"><span class="comment"># 查看数据</span></span><br><span class="line">read_csv(<span class="string">"tmp1.csv"</span>)</span><br></pre></td></tr></table></figure></div><h4 id="目录和文件管理"><a href="#目录和文件管理" class="headerlink" title="目录和文件管理"></a>目录和文件管理</h4><p>目录和文件管理函数:</p><ul><li><code>getwd()</code>：返回当前工作目录。</li><li><code>setwd(path)</code>：设置当前工作目录。</li><li><code>list.files()</code>或<code>dir()</code>：查看目录中内容。 <code>list.files(pattern=’.*[.]r$’)</code>可以列出所有以“.r”结尾的文件。<code>dir()</code>缺省为查看当前工作目录下的所有文件。</li><li><code>file.info(filenames)</code>：显示文件的详细信息。</li><li><code>file.exists()</code>：查看文件是否存在。</li><li><code>file.access()</code>：考察文件的访问权限。</li><li><code>create.dir()</code>：新建目录。</li><li><code>file.create()</code>：生成文件。</li><li><code>file.remove()</code>或<code>unlink()</code>：删除文件。<code>unlink()</code>可以删除目录。</li><li><code>file.rename()</code>：为文件改名。</li><li><code>file.append()</code>：把两个文件相连。</li><li><code>file.copy()</code>：复制文件。</li></ul>]]></content>
    
    <summary type="html">
    
      R基本编程1
    
    </summary>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="编程" scheme="https://steven-shixq.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻30</title>
    <link href="https://steven-shixq.github.io/2020/03/07/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB30/"/>
    <id>https://steven-shixq.github.io/2020/03/07/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB30/</id>
    <published>2020-03-07T02:45:36.000Z</published>
    <updated>2020-03-08T05:16:50.022Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script> <div align="left">     <a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" class="lazyload"></a> </div>*翻译哈佛商业评论经典文章*<h1 id="万花筒里看成功3"><a href="#万花筒里看成功3" class="headerlink" title="万花筒里看成功3"></a>万花筒里看成功3</h1><p><strong>成功的复杂性1</strong></p><p>成功不仅仅是一场心跳加速的终点冲刺。我们的研究发现了要获得持续性成功的四个基本要素：</p><ol><li><p>幸福感（对你的生活感到快乐或者满足）；</p></li><li><p>成就感（有其他人为之奋斗的相似的成就）；</p></li><li><p>意义（你能自己感觉到你对你所关心的人产生了积极的影响）</p></li><li><p>传承（用你自己建立价值观和获得成就的方法帮助他人在未来获得成功）</p></li></ol><p>这是人们在追求和享受成功过程中，基本的四个要素。缺少其中任何一点，就不再感觉像是“真正的”成功了。举个例子，如果你因为精通于解决某一商业问题而暴富，但是你却不能从中感受到快乐，你会觉得自己成功吗？如果你在打造自己成功的基础的时候疏忽了你的家人和朋友，你会觉得成功的有意义吗？如果你放弃自己的事业转而做一个全职的父母，那你是否充分挖掘了自己才能？就像长期吃四种一样的食物你会没法得到满足，同样的，如果你只为这四个要素的每个要素设立一个目标，你也无法长期的获得满足。这就是为什么你不能将你的生活进行简单的分类-从自身寻找快乐，从工作寻找成就感，从家庭里寻找意义，从社区寻找传承。</p><p>除非你能稳定的在四个方面都有所得，否则任何单方面的成功都无法产生满足感。你知道你在做的事是正确，但你仍然有一种落失感和畏缩感，你会一直想着那些你能做到或者得到的东西。你的成就感和幸福感几乎在你想到这些的一瞬间就消失了。相比之下，涵盖所有四种要素的成功是充实的，也是持久的。你可以在一件事情中满足这四种要素，也能通过多个活动来满足这四个要素。在压力太大的时候抽出时间休息，或是在追求自己的目标时，偶然停下做做回馈社区的活动，这些都是很好的例子。</p><p>如果你回想一下是什么构成了你生命中持久满足的时刻-也许你会惊奇的发现，是在你日常练习音乐的时候（与你在工作或家里的主要任务相比，这可能是微不足道的）。日积月累，该活动对这四种方面的要素都有加强作用。乐器使我们感到放松和愉悦（幸福感），如果要熟练掌握它并不容易（成就），当你加入一个乐队并与其他乐队同台竞技，或者为社区医院举办一场音乐会，演奏乐器这件事就会变得更加的有意义（意义）。那些将这种“次要”的职业技能传承给下一代（比如说通过招募或者培训年轻的音乐家），为他们提供类似成功机会的人，会从所谓的爱好中找到更深层次的成就感。</p><hr><h1 id="Success-That-Lasts-3"><a href="#Success-That-Lasts-3" class="headerlink" title="Success That Lasts 3"></a><a href="https://hbr.org/2004/02/success-that-lasts" target="_blank" rel="noopener">Success That Lasts 3</a></h1><p><strong>The Complexity of Success 1</strong></p><p>Success involves more than a heart-pounding race to the finish line. Our research uncovered four irreducible components of enduring success: happiness (feelings of pleasure or contentment about your life); achievement (accomplishments that compare favorably against similar goals others have strived for); significance (the sense that you’ve made a positive impact on people you care about); and legacy (a way to establish your values or accomplishments so as to help others find future success).</p><p>These four categories form the basic structure of what people try to gain through the pursuit and enjoyment of success. Take away any one component, and it no longer feels like “real” success. If you were wildly wealthy because you had mastered a certain business problem but couldn’t experience pleasure, for instance, would you consider yourself successful? If building your power base kept you from being there for others, would your success feel morally right? If you left your career to be a full-time parent, would you have enough of an outlet for your talents? Just as a steady diet of the same four foods would hardly be satisfying over the long term, the four components of success cannot be satisfied by the presence of a single flavor in each category. That is why you cannot neatly categorize the realms of your life, assigning happiness to self, achievement to work, significance to family, legacy to community.</p><p>Unless you hit on all four categories with regularity, any one win will fail to satisfy. You’ll experience what we call the “wince factor”: You know you’re doing what is right, but it still feels like a loss. You’re preoccupied with thoughts of the other things you could be doing or getting. Your achievements and pleasures fade almost as soon as they occur. By contrast, success that encompasses all four kinds of accomplishment is enriching; it endures. You can create this synergy within a single event, but you can also create it through a juxtaposition of activities. Taking time out in the middle of a high-stress period or stopping to give back to the community while in the midst of pursuing your most self-advancing goals are good examples of this.</p><p>If you think about what constitutes a moment of lasting satisfaction in your own life—maybe it’s your daily practice of a musical instrument—it may be surprisingly trivial in comparison with your major commitments at work or at home. The activity draws force from accomplishing something distinctive in each of the four categories over time. The musical instrument provides release and pleasure (happiness), it is a challenge to master and build on (achievement), and it becomes even more fulfilling when you join a band that competes with other bands or play concerts at hospitals (significance). Those who also turn these “lesser” vocations into legacies that build the same opportunity for the next generation—say, through getting involved in recruiting and training younger musicians—will find an even deeper sense of success from so-called hobbies.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      HBR-Success That Lasts 3
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="Harvard Business Review" scheme="https://steven-shixq.github.io/tags/Harvard-Business-Review/"/>
    
      <category term="管理" scheme="https://steven-shixq.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="Management" scheme="https://steven-shixq.github.io/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻29</title>
    <link href="https://steven-shixq.github.io/2020/03/06/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB29/"/>
    <id>https://steven-shixq.github.io/2020/03/06/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB29/</id>
    <published>2020-03-06T06:00:25.000Z</published>
    <updated>2020-03-07T02:47:11.521Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script> <div align="left">     <a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" class="lazyload"></a> </div>*翻译哈佛商业评论经典文章*<h1 id="万花筒里看成功2"><a href="#万花筒里看成功2" class="headerlink" title="万花筒里看成功2"></a>万花筒里看成功2</h1><p><strong>什么是可持续的成功</strong></p><p>我们的研究重新审视了成功背后的假设。我们对那些真正的、可持续的成功感兴趣-得偿所愿带来的回报对你和你所关心的人来说都是可持续的。这种了类型的成就能传递给人一种合法性和重要性。它给你带来的满足感远胜于奖金或者是新职位带来的瞬时的快乐。持久的成功能不断更新一个人正面的情绪，而不会使人患得患失。</p><p>与制定一个成功的市场战略不同，没有人或者公司能为他人制定成功的方案。每个人（或者每个公司）都有自己独一无二的成功视角，而且这种观念会随着时间为改变。一个以家庭为导向的人，很难认为一个缺席家庭生活的高管是成功的，但他们也可能在孩子长大后发现，旅行和冒险才是他们的最佳选择。一个天生的投资银行家几乎不会把搅拌水泥视为一个成功的职业，而一个刚刚建完一座非凡桥梁的建筑工人可能会在他或她的余生里都对建成这座桥梁而感到自豪。但是，没有人能无限制的取得成功，即使是最明显的赢家也是如此。随着时间的推移，不断的理解和发展自己对成功的独特理解是非常重要的，鉴于此，我们也不会只选择一两个成功的范例来作为我们的成功的完美模型。</p><p>尽管如此，出于研究目的，我们提出了五个在大多数标准中都是持久成功型的特征：</p><ol><li>高成就</li><li>多个目标</li><li>体验愉悦的能力</li><li>建立积极的人际关系的能力</li><li>对获得持久成功的渴望</li></ol><p>我们和60多位成功的专业人士进行了访谈，调查了90位参加哈佛商学院管理项目的高管，非正式的观察了我们生活和工作中的高成就人士。我们进行了十多个模型的测试，每个测试都会有50-110个高管参与。这些团体中的大多数来自哈佛商学院的毕业生或青年总裁组织的当前成员。我们还研究了普通大众所报道的关于成功的问题-有来自媒体报道的，还有与朋友、学生、同事的对话。我们还采访了处于经济的各个阶层，各行各业（all different walks of life）的人士。他们中有一些人是曾经全职工作，现在待在家里的父母；其他人则处于事业的顶峰。</p><hr><h1 id="Success-That-Lasts-2"><a href="#Success-That-Lasts-2" class="headerlink" title="Success That Lasts 2"></a><a href="https://hbr.org/2004/02/success-that-lasts" target="_blank" rel="noopener">Success That Lasts 2</a></h1><p><strong>What Is Enduring Success?</strong></p><p>Our research took a fresh look at the assumptions behind success. We were interested in real, enduring success—where getting what you want has rewards that are sustainable for you and those you care about. This type of attainment delivers a sense of legitimacy and importance; its satisfactions endure far beyond the momentary rewards of a bonus or a new position. Lasting success is emotionally renewing, not anxiety provoking.</p><p>Unlike an equation for a successful market strategy, no one person or company can fully embody lasting success for others. Everyone (and every business) has a unique vision of real success, and that notion changes over time. A family-oriented person would hardly call the absentee life of a top executive a success but might find travel and adventure just the ticket after the kids grow up. A born investment banker would hardly regard mixing cement as a successful career, whereas a construction worker who just completed an extraordinary bridge might point to the structure with pride for the rest of his or her life. No one, however, has unreserved success, not even the most obvious winner. Recognizing how important it is for each person to understand and develop his or her unique definition of success over time, we chose not to report on one or two well-known examples of success as the perfect model to follow.</p><p>Nonetheless, for the purposes of research, we posited five common characteristics of individuals who by most standards had achieved enduring success: high achievement, multiple goals, the ability to experience pleasure, the ability to create positive relationships, and a value on accomplishments that endure.</p><p>We held more than 60 interviews with successful professionals, surveyed 90 top executives attending Harvard Business School management programs, and informally observed high achievers with whom we live and work. We conducted more than a dozen model-testing sessions with between 50 and 110 executives in each. Most of these groups were drawn from HBS graduates or current members of the Young Presidents’ Organization. We also reviewed the problems that the general population has reported about success, using sources that ranged from media reports to conversations with friends, students, and colleagues. We talked to people from all different walks of life, at every level of the economy, both in and out of business careers. Some of them were stay-at-home parents who had once worked full time; others were at the pinnacle of their careers.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      HBR-Success That Lasts 2
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="Harvard Business Review" scheme="https://steven-shixq.github.io/tags/Harvard-Business-Review/"/>
    
      <category term="管理" scheme="https://steven-shixq.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="Management" scheme="https://steven-shixq.github.io/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻28</title>
    <link href="https://steven-shixq.github.io/2020/03/05/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB28/"/>
    <id>https://steven-shixq.github.io/2020/03/05/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB28/</id>
    <published>2020-03-05T02:24:44.000Z</published>
    <updated>2020-03-06T06:08:34.140Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script> <div align="left">     <a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" data-fancybox="group" data-caption="undefined" class="fancybox"><img data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/HBR_logo_black.svg" class="lazyload"></a> </div><p><em>哈佛商业评论经典文章</em></p><h1 id="万花筒里看成功1"><a href="#万花筒里看成功1" class="headerlink" title="万花筒里看成功1"></a>万花筒里看成功1</h1><p>案例1：一个55岁，很成功的风险投资家在考虑他的下轮投资。他不确定他是否还有足够的精力去开始下一轮持续七年的高强度的融资和咨询活动。“我简直无法想象再次享受那种节奏，坦率的说，我觉得是时候把我的注意力放到家庭里了。但是如果我没有向其他所有人那样努力工作的话，我就会觉得自己是一个失败者。我猜我该退休了”</p><p>案例2：有一个管理着10亿美元部门的消费品公司总裁，他发现制造和分销的错误将延迟新产品线的推出。零售商渴望购买该产品，股价压力巨大，而他的奖金与产品推广是否成功息息相关。如果他推出了这个产品，那么产品肯定是名列前茅的-但只可能是暂时的。因为可以预期消费者失望导致的顾客流式和花费在纠正错误上的时间显然会严重损害利润。咋这种情况下怎么做才算是成功？</p><p>案例3：一个32岁的软件工程师，拥有一个“神圣音乐学士”的第二学位，虽然她赶上了计算机快速发展的快车道，但她还是觉得自己的职业战略中缺少了某种东西。她一方面希望拥有高薪经理的生活方式，但另一方面做软件并不像为众人演奏风琴那么拉风。而且她想有朝一日拥有自己的房子和家庭。她在想：</p><p>“为什么我找不到一条能让我得到所有我想要的东西的职业道路，这些愿望真的是那么不合理吗？”</p><p>这些示例可能会有所不同，但这些人有一个类似的问题：他们都需要一个全面的框架来思考成功。而且，有类似问题的人还很多。</p><p>很多的研究调查发现，普通工作人群，甚至是有很多选择的人，对工作的不满和倦怠程度都很高。2001年的911事件引发的集体反思，让许多成功的人士重新审视他们的成功理念。紧随其后的公司丑闻浪潮使问题更加的尖锐。即使最敬业的员工也会问自己，他们是否会把自己的职业和公司推荐给子女。</p><p>追求成功就像是打移动靶，每次打下去一个，就会从另一个方向弹出五个。在我们实现一个目标后，我们会感到压力，需要更加地努力工作以赚取更多的钱，努力获得更多的消遣和娱乐资本。在技术和社会快速发展和变革的当今世界，新问题不断涌现，使得成功的标准和案例也不断的发生改变。</p><p>在过去的十年里，传统的职业道路突然变得毫无意义。专业人士在社会繁荣时期过度劳累，过得不快乐。然后在经济萧条时期不仅过度劳累，而且在竞争中处于弱势。而很多的企业发现他们使用错误的方法来衡量成功，1990年赚了一笔钱，但在2000年却为其股东和员工损失了很多钱，到最后什么也没捞着。通往成功之路如同Escher画中的无尽楼梯，不断前行，但却发现一直在原地打转。</p><p>面对这种不稳定，许多人认为成功需要一种“赢家通吃”的方法。他们认为，成功取决于全力以赴实现一个目标，无论是专心于工作还是致力于成为社区中最好的足球妈妈。但是无论这一个目标多么的崇高，都无法满足一个人所有复杂的需求和愿望，正如文中开头的那些案例一样。企业也是如此，单一目标是不行的。</p><p>幸运的是，成功和幸福不是非此即彼的拉锯战。如果发展的方式得当，你对自己和社会的美好理想可以成为成功的推力。我们研究了数百名取得持久成功，能做出积极改变并享受这一个过程的成就非凡的人。我们了解到，一些最成功的人之所以能到达自己的位置，恰恰是因为他们对成功的深刻洞见，和实现理想的灵活性有更深入的了解。</p><p>在这篇文章中，我们将介绍一个实用的框架，该框架将帮助你以同样的方式l理解什么是成功。但是首先，我们要仔细研究一下如何得出这个模型。</p><p><em>未完待续</em></p><hr><h1 id="Success-That-Lasts-1"><a href="#Success-That-Lasts-1" class="headerlink" title="Success That Lasts 1"></a><a href="https://hbr.org/2004/02/success-that-lasts" target="_blank" rel="noopener">Success That Lasts 1</a></h1><p><strong>A 55-year-old, highly successful venture capitalist</strong> is thinking about his next investment. He’s not certain he has the energy to start another seven-year round of intense financing and consulting activity. “I just can’t imagine enjoying that pace again, and frankly, it’s time I paid attention to my family. But I’d really feel a loser if I didn’t play the game as hard as everyone else. I guess I should retire.”*</p><p><strong>The president of a $1 billion division*</strong>of a consumer products company discovers that manufacturing and distribution bugs will delay the scheduled rollout of a new product line. Retailers are eager for the product, pressures on share price are intense, and the president’s bonus is tied to the rollout’s success. If he goes ahead, the product is sure to be on top – but only temporarily. The costs down the road from disappointed consumers and time invested in having to fix mistakes will clearly hurt the bottom line. What is success under these circumstances?*</p><p><strong>A fast-track 32-year-old software engineer*</strong>with a second degree in sacred music feels that something is missing in her career strategy. She wants the lifestyle of a well-paid manager, but software doesn’t feel as socially significant as playing the organ for a congregation. And she someday wants a house and a family. “Why can’t I find the career path that will get me all of these things?” she wonders. “Are they really so unreasonable?”*</p><p>Different as these examples may be, these individuals have a similar problem: They all need a comprehensive framework for thinking about success. And they’re far from alone.</p><p>Survey after survey shows a high degree of job dissatisfaction and burnout among the general working population, even among those with plenty of options. In the collective soul-searching prompted by September 11, 2001, many high achievers revisited their notion of success. The wave of corporate scandals that followed soon after only made the questions more acute. Even the most dedicated employees wondered aloud whether they would ever recommend their own careers and companies to their children.</p><p>Pursuing success is like shooting at a series of moving targets. Every time you hit one, five more pop up from another direction. Just when we’ve achieved one goal, we feel pressure to work harder to earn more money, exert more effort, possess more toys. Standards and examples of “making it” constantly shift, while a fast-paced world of technological and social change constantly poses new obstacles to overcome.</p><p>During the past decade, traditional career paths suddenly became pointless. Professionals found themselves overworked and undersatisfied in the boom, then overworked and competitively vulnerable in the bust. And far too many businesses discovered they were using the wrong measures to gauge success, winning big in the 1990s only to lose big for their shareholders and employees at the turn of the millennium. The climb to success can feel like an Escher drawing of a staircase that goes nowhere.</p><p>In the face of such instability, many people assume success requires a winner-takes-all approach. They believe that success depends on putting all your energy into achieving one goal, be it a single-minded focus on your job or a commitment to being the best soccer mom in your community. But no matter how noble, one goal can’t satisfy all of a person’s complex needs and desires, as the examples at the beginning of the article demonstrate. The same holds true for the goals of a business.</p><p>Fortunately, success doesn’t have to be seen as a one-dimensional tug-of-war between achievement and happiness. If developed in the right way, your ideals of the good life for yourself and society can become powerful—and manageable—factors of success. We studied hundreds of high achievers who realize lasting success, make a positive difference, and enjoy the process. And we learned that some of the most successful people have gotten where they are precisely because they have a greater understanding of what success is really about and the versatility to make good on their ideals. In this article, we’ll introduce a practical framework that will help you see success in these same terms. But first, a closer examination of how we arrived at this model.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      HBR-Success That Lasts 1
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="Harvard Business Review" scheme="https://steven-shixq.github.io/tags/Harvard-Business-Review/"/>
    
      <category term="管理" scheme="https://steven-shixq.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
      <category term="Management" scheme="https://steven-shixq.github.io/tags/Management/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻27</title>
    <link href="https://steven-shixq.github.io/2020/03/04/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB27/"/>
    <id>https://steven-shixq.github.io/2020/03/04/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB27/</id>
    <published>2020-03-04T10:47:43.000Z</published>
    <updated>2020-03-04T14:24:42.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/The-Vital-Question" target="_blank" rel="noopener">This biology book blew me away</a></p></blockquote><p><em>The Vital Question</em> by Nick Lane</p><p>Nick reminds me of writers like Jared Diamond, people who develop a grand (宏伟的) theory that explains a lot about the world. He is one of those original thinkers who makes you say: More people should know about this guy’s work.</p><p>Simple cells like bacteria generate all their energy in their outer membrane, which puts a physical limit on how big they can get and still make enough energy to support themselves. (In mathematical terms, their volume expands faster than their surface area, so their demand for energy eventually exceeds their ability to generate it.) Once cells had internalized (内化) the means of making energy—that is, once they had mitochondria—this constraint disappeared. Mitochondria also have specialized genomes focused on energy generation, but bacteria don’t. So cells with mitochondria could get much bigger, allowing for complex new arrangements.</p><p>In <em>The Vital Question</em>, Nick goes on to show how energy can help explain why life is the way it is. He makes a persuasive case that complex life must have the traits we see today. And he argues that it would almost certainly develop the same way everywhere. Which means that, <strong>if we find complex life on other planets, it will quite likely share the same traits. In other words, E.T. can’t clone himself. If he wants to have kids, he’ll need Mrs. E.T.</strong></p><p>Nick has a very scientific demeanor (风度). In reading his books and talking to him, I never got the impression that he was claiming more than he should or trying to <strong><u>pull a fast one</u></strong> (欺骗) on the reader. It’s always clear where he’s citing someone else’s work and where he’s building out his own ideas. And he would be the first to tell you that some of his ideas might be wrong.  </p><p>As much as I loved <em>The Vital Question,</em> it’s not for everyone. Some of the explanations are pretty technical. But this is a technical subject, and I doubt anyone else will make it much easier to understand without sacrificing crucial details. He uses lots of vivid <strong>metaphors</strong> (隐喻) to explain key ideas. Every few pages he sums up what he has just said and <strong>recaps</strong> (回顾) the important points. If you have a scientific <strong>bent</strong> (爱好，天赋) and you remember a bit of chemistry and biology, you should find <em>The Vital Question</em> quite <strong>approachable</strong> (易理解的，可接近的).</p><p>His focus on energy will be seen as an important contribution to our understanding of where we come from, and where are we going.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-This biology book blew me away
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="Book" scheme="https://steven-shixq.github.io/tags/Book/"/>
    
      <category term="Biology" scheme="https://steven-shixq.github.io/tags/Biology/"/>
    
      <category term="生物" scheme="https://steven-shixq.github.io/tags/%E7%94%9F%E7%89%A9/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻26</title>
    <link href="https://steven-shixq.github.io/2020/03/03/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB26/"/>
    <id>https://steven-shixq.github.io/2020/03/03/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB26/</id>
    <published>2020-03-03T02:34:21.000Z</published>
    <updated>2020-03-03T06:43:47.101Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://media.gatesnotes.com/-/media/Images/Books/Life-is-What-You-Make-It/life-is-what-you-make-it_2010_780px.ashx" target="_blank" rel="noopener">Peter Buffett on What He Learned Growing Up</a></p></blockquote><p><em>Life Is What You Make It: Find Your Own Path to Fulfillment</em></p><p>中文书名：《做你自己》</p><p>Peter was passionate about music. He’s an Emmy-Award-winning musician and songwriter, has composed (作曲) for film and television, and released more than 15 albums. But the focus of his book is a reflection of his broader life experiences—in particular the values, work ethic (职业道德)and commitment to social action that he learned growing up in the modest Buffett family home in Omaha, Nebraska.</p><p>Contrary to what many people might assume, Peter won’t inherit great wealth from his father. Instead, he was encouraged by his parents to find his own path. The book is a chronicle of that journey—and the wisdom and <strong>perceptions</strong> (认知，观念) he has developed along the way.</p><p>In particular, Peter’s insights about the four core values he “absorbed” growing up in the Buffett home really <u>resonated with me</u> (与我产生共鸣). They are:</p><ul><li>Trust in the belief that the world is fundamentally a good place and that all people, however, flawed, are—at the core—well-intentioned (好意的，善意的)</li><li>Tolerance for other people’s viewpoints and perspectives</li><li>A passion for education—not in the traditional sense but as a way to approach life with curiosity and an openness to what others have to teach us</li><li>A personal work ethic grounded in self-discovery and a commitment to finding something that you wake up every morning looking forward to</li></ul><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-Life is What You Make It Find Your Own Path to Fulfillment
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="Book" scheme="https://steven-shixq.github.io/tags/Book/"/>
    
      <category term="Autobiography" scheme="https://steven-shixq.github.io/tags/Autobiography/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻25</title>
    <link href="https://steven-shixq.github.io/2020/03/02/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB25/"/>
    <id>https://steven-shixq.github.io/2020/03/02/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB25/</id>
    <published>2020-03-02T01:17:48.000Z</published>
    <updated>2020-03-02T14:38:21.630Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> <a href="https://www.gatesnotes.com/Books/These-Truths" target="_blank" rel="noopener">American history in full color</a></p></blockquote><p><em>These Truths: A History of the United States</em> by  Jill Lepore</p><p>Over the years, I’ve read a lot of books about history, especially American history. I never get tired of looking closely at seminal events, such as the <a href="https://www.gatesnotes.com/Books/The-Best-We-Could-Do" target="_blank" rel="noopener">Vietnam War</a>, and figures I admire, such as the global heath hero <a href="https://www.gatesnotes.com/Books/Jim-Grants-Child-Survival-Revolution" target="_blank" rel="noopener">Jim Grant</a>.</p><p><em>These Truths: A History of the United States</em>, by the Harvard historian and <em>New Yorker</em> contributor Jill Lepore, is not a deep or comprehensive account of individual events or people. The book covers centuries of history in its 800 pages, so Lepore can offer only quick glimpses at major events such as America’s first presidential <strong>impeachment</strong> (弹劾) (only three sentences) and doesn’t even get a chance to mention pivotal figures such as Lewis and Clark.</p><p>While many good history books provide perspectives beyond those of the traditional “great men” of history, Lepore’s book makes diverse points of view central to the narrative. She shows you all the ironies (讽刺) and contradictions (矛盾) in American history.</p><p>For example, Lepore tells you about Margaret Chase Smith, the first woman to serve in both houses of Congress. Smith had the courage to stand up to abuses in Congress; she was particularly passionate in speaking out against Joseph McCarthy’s hateful hunt for communists in government. And yet she also willingly participated in crusades against “homosexuals and other sex perverts in government,” in the language of the Congressional hearings.</p><p>Another contradiction I was not aware of relates to the GI Bill (退伍军人权力法案), which gave a huge boost (推动，促进) to my dad’s education and career after he served during World War II. After acknowledging that the GI Bill was one of the wisest investments our country has ever made, she points out that it actually had a negative impact on African Americans, women, and gay people who fought for their country in World War II—most of whom were denied GI benefits (在第二次世界大战中为自己的国家而战的非裔美国人，妇女和同性恋者中的大多数人被剥夺了退伍军人福利).</p><p>By far the biggest contradiction in our country’s history is one that Lepore weaves into every part of her book: the fact that America was founded on <u>assertions of liberty and sovereignty</u> (自由与主权主张) while practicing African slavery and Native American conquest (征服).</p><p>This contradiction was obvious to America’s slaves, many of whom sided with the British during the American Revolution because they knew they had a much better chance of being freed if the British won. One of George Washington’s own slaves, Harry Washington, escaped from Mount Vernon during the war and fought alongside Lord Dunmore, the royal governor of Virginia. Harry Washington later fled to Sierra Leone and became the leader of a group of revolutionaries who declared independence there.</p><p>The <u>Emancipation Proclamation</u> (解放黑奴宣言) represented an important step in reconciling this contradiction. “<u>American slavery …. had stolen the lives of millions and crushed the souls of millions more</u>,” writes Lepore. “It had poisoned a people and a nation…. <u><strong>It was not over yet</strong></u>（事情还没有结束). But at last, <u><strong>an end lay within sight</strong></u> (终点在望).” Thirty years after Lincoln’s proclamation, Frederick Douglass wrote, “The problem is whether the American people have loyalty enough, honor enough, <strong>patriotism</strong> (爱国主义) enough, <u>to live up to their own Constitution</u> (遵守自己的宪法).”</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-American history in full color
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="Book" scheme="https://steven-shixq.github.io/tags/Book/"/>
    
      <category term="History" scheme="https://steven-shixq.github.io/tags/History/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻24</title>
    <link href="https://steven-shixq.github.io/2020/03/01/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB24/"/>
    <id>https://steven-shixq.github.io/2020/03/01/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB24/</id>
    <published>2020-02-29T16:11:49.000Z</published>
    <updated>2020-03-01T02:44:25.760Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/The-Headspace-Guide-to-Meditation-and-Mindfulness" target="_blank" rel="noopener">Why I’m into meditation</a></p></blockquote><p><em>The Headspace Guide to Meditation and Mindfulness</em> by Andy Puddicombe</p><p>中文书名：《简单冥想术：激活你的潜在创造力》</p><p>I stopped listening to music and watching TV in my 20s. It sounds extreme, but I did it because I thought they would just distract me from thinking about software. That blackout period lasted only about five years, and these days I’m a huge fan of TV shows like <em>Narcos</em> and listen to a lot of U2, Willie Nelson, and the Beatles.</p><p>Back when I was avoiding music and TV in the hope of maintaining my focus, I knew that lots of other people were using meditation to achieve similar ends. But I wasn’t interested. I thought of meditation as a woo-woo thing tied somehow to reincarnation (轮回，再生), and I didn’t buy into it.</p><p>I’m certainly not an expert on meditation, but I now meditate two or three times a week, for about 10 minutes each time. </p><p>I now see that meditation is simply exercise for the mind, similar to the way we exercise our muscles when we play sports. For me, it has nothing to do with faith or mysticism. It’s about taking a few minutes out of my day, learning how to pay attention to the thoughts in my head, and gaining a little bit of distance from them.</p><p>Andy Puddicombe, the 46-year-old cofounder and voice of the popular <a href="https://www.headspace.com/headspace-meditation-app" target="_blank" rel="noopener">Headspace app</a>, was the person who turned me from skeptic to believer. Prior to finding Headspace, I had read several books about meditation, all of which intimidated me. They made me think that the investment in terms of time and energy was just too high. Headspace made the barrier to entry low enough for me.  It’s just 10 minutes a time. Andy has taken some heat from hard-core meditators for his low-barrier approach, but he got me to take up meditation and stick with it. I’m glad he did.</p><p>If you want to try meditation for yourself, one good way to ease into it—especially if you’re as skeptical as I was—is to pick up a copy of Andy’s book, <em>The Headspace Guide to Meditation and Mindfulness</em>. Andy presents the evidence base behind these practices in sections called “What the research shows” so you know the benefits are legitimate. And the book also helps you see that Andy himself is legitimate. He’s an <u>ordained Buddhist monk</u> (修行过的和尚) who trained for many years in monasteries (修道院) in India, Nepal, Myanmar, Thailand, Australia, Russia, and Scotland.</p><p>At another monastery, the monks served trainees curry and rice every day, and they made the trainees eat it very slowly over the course of exactly an hour. One super hot day, the monks placed in front of each trainee a wonderful surprise: ice cream. “It was like being a child at a birthday party when the cake comes out.” Unfortunately, the trainees soon discovered they were not allowed to touch the ice cream until they had eaten their curry and rice in the painfully slow way they’d been taught. As the ice cream melted in front of him, he felt angry, then sad and guilty for feeling angry—just as the monks knew would happen.</p><p>It turns out that monastic life wasn’t right for Andy. As we learn in the book, after ten years he left and—I kid you not—became a circus clown in London. He wanted to be fully engaged in the world rather than cloistering himself away in artificially quiet retreats.</p><p>While he was a clown, he started teaching meditation to those with severe anxiety and other conditions. A few years later, he started Headspace to bring meditation to the masses. He felt that meditation was a skill everyone could learn without sitting behind high stone walls or being subjected to mind games.</p><p>I’m not sure how much meditation would have helped me concentrate in my early Microsoft days, because I was monomaniacally focused without it. But now that I’m married, have three children, and have a broader set of professional and personal interests, it’s a great tool for improving my focus. It’s also helped me step back and get some ease with whatever thoughts or emotions are present. I like what I’m getting from my 10 minutes every few days. I’m grateful to Andy for helping me on this journey.</p><p><a href="https://www.headspace.com/meditation-101/what-is-meditation" target="_blank" rel="noopener">headspace</a> : the science blog for work how to meditate help</p><p>另外<a href="http://open.163.com/newview/movie/free?pid=M6HV755O6&mid=M6I43F92I" target="_blank" rel="noopener">哈佛大学公开课：幸福课</a> 中也有对冥想的介绍</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates- The Headspace Guide to Meditation and Mindfulness
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="Book" scheme="https://steven-shixq.github.io/tags/Book/"/>
    
      <category term="meditation" scheme="https://steven-shixq.github.io/tags/meditation/"/>
    
  </entry>
  
  <entry>
    <title>R语言学习笔记3</title>
    <link href="https://steven-shixq.github.io/2020/02/29/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/"/>
    <id>https://steven-shixq.github.io/2020/02/29/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B03/</id>
    <published>2020-02-29T13:17:58.000Z</published>
    <updated>2020-03-07T16:06:08.085Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>R语言教程-R数据类型与运算2</strong></p><h2 id="11-R矩阵和数组"><a href="#11-R矩阵和数组" class="headerlink" title="11. R矩阵和数组"></a>11. R矩阵和数组</h2><p>矩阵用matrix函数定义，实际存储成一个向量，根据保存的行数和列数对应到矩阵的元素， 存储次序为按列存储。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A &lt;- matrix(<span class="number">11</span>:<span class="number">16</span>,nrow=<span class="number">3</span>, ncol=<span class="number">2</span>)</span><br><span class="line">A</span><br><span class="line"><span class="comment"># 取第1、3行</span></span><br><span class="line">A[c(<span class="number">1</span>,<span class="number">3</span>), <span class="number">1</span>:<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 取第2列</span></span><br><span class="line">A[<span class="number">1</span>:<span class="number">3</span>,<span class="number">2</span>]</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 其他相等的写法，取第1、3行</span></span><br><span class="line">A[c(<span class="number">1</span>,<span class="number">3</span>),c(<span class="number">1</span>,<span class="number">2</span>)]</span><br><span class="line"><span class="comment"># 取第2列</span></span><br><span class="line">A[c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>),c(<span class="number">2</span>)]</span><br></pre></td></tr></table></figure></div><p>用colnames()函数可以给矩阵每列命名， 也可以访问矩阵列名， 用rownames()函数可以给矩阵每行命名， 也可以访问矩阵行名。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">colnames(A) &lt;- c(<span class="string">'第一列'</span>,<span class="string">'第二列'</span>)</span><br><span class="line">rownames(A) &lt;- c(<span class="string">"第一行"</span>,<span class="string">"第二行"</span>,<span class="string">"第三行"</span>)</span><br><span class="line">A</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 矩阵A的属性</span></span><br><span class="line">attributes(A)</span><br><span class="line"></span><br><span class="line">dim(A)</span><br><span class="line">dimnames(A)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 可以用列名和行名代替矩阵下标</span></span><br><span class="line">A[,<span class="string">"第二列"</span>]</span><br><span class="line">A[,<span class="number">2</span>]</span><br></pre></td></tr></table></figure></div><p>注意在对矩阵取子集时， 如果取出的子集仅有一行或仅有一列， 结果就不再是矩阵而是变成了R向量， R向量既不是行向量也不是列向量。 如果想避免这样的规则起作用， 需要在方括号下标中加选项drop=FALSE</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A[,<span class="number">1</span>,drop=<span class="literal">FALSE</span>]</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 用逻辑下标取子集</span></span><br><span class="line">A[,<span class="number">1</span>]&gt;=<span class="number">12</span></span><br><span class="line">A[A[,<span class="number">1</span>]&gt;=<span class="number">12</span>,<span class="number">1</span>:<span class="number">2</span>]</span><br></pre></td></tr></table></figure></div><p>矩阵本质上是一个向量添加了dim属性， 实际保存还是保存成一个向量， 其中元素的保存次序是按列填入， 所以， 也可以向对一个向量取子集那样， 仅用一个正整数对向量的矩阵取子集。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">A[c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>)]</span><br><span class="line">A[c(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>)]</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">matrix(c(<span class="number">1</span>,<span class="number">1</span>, <span class="number">2</span>,<span class="number">2</span>, <span class="number">3</span>,<span class="number">2</span>), ncol=<span class="number">2</span>,byrow = <span class="literal">T</span>)</span><br></pre></td></tr></table></figure></div><p>为了挑选矩阵的任意元素组成的子集而不是子矩阵， 可以用一个两列的矩阵作为下标， 矩阵的每行的两个元素分别指定一个元素的行号和列号。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rod &lt;- matrix(c(<span class="number">1</span>,<span class="number">1</span>, <span class="number">2</span>,<span class="number">2</span>, <span class="number">3</span>,<span class="number">2</span>), ncol=<span class="number">2</span>,byrow = <span class="literal">T</span>)</span><br><span class="line">A</span><br><span class="line"><span class="comment"># 取矩阵中坐标为1,1, 2,2, 3,2的值</span></span><br><span class="line">A[rod]</span><br></pre></td></tr></table></figure></div><ul><li>用c(A)或A[]返回矩阵A的所有元素。</li><li>如果要修改矩阵A的所有元素， 可以对A[]赋值。</li><li>diag(A)访问A的主对角线元素组成的向量。</li><li>若x为长度大于1的向量， diag(x)返回以x的元素为主对角线元素的对角矩阵。</li><li>若x为正整数值标量，diag(x)返回x阶单位阵<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">c(A)</span><br><span class="line">A[]</span><br><span class="line">diag(A)</span><br><span class="line">diag(<span class="number">6</span>)</span><br><span class="line">diag(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure></div></li></ul><h3 id="cbind-和rbind-函数"><a href="#cbind-和rbind-函数" class="headerlink" title="cbind()和rbind()函数"></a>cbind()和rbind()函数</h3><p>若<code>x</code>是向量，<code>cbind(x)</code>把<code>x</code>变成列向量， 即列数为1的矩阵， <code>rbind(x)</code>把<code>x</code>变成行向量。</p><p>若x1, x2, x3是等长的向量， cbind(x1, x2, x3)把它们看成列向量并在一起组成一个矩阵。 cbind()的自变量可以同时包含向量与矩阵，向量的长度必须与矩阵行数相等。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">cbind(c(<span class="number">1</span>,<span class="number">2</span>), c(<span class="number">3</span>,<span class="number">4</span>), c(<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">A</span><br><span class="line">A1 &lt;- cbind(A,c(-<span class="number">3</span>,<span class="number">6</span>,-<span class="number">9</span>))</span><br><span class="line">colnames(A1) &lt;- c(<span class="string">"第一列"</span>,<span class="string">"第二列"</span>,<span class="string">"新增列"</span>)</span><br><span class="line">A1</span><br></pre></td></tr></table></figure></div><p>rbind()同理，向量的长度必须与矩阵列数相同（因为次函数下数字是按row来排列矩阵的）</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rbind(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), c(<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>))</span><br></pre></td></tr></table></figure></div><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><ol><li>矩阵可以与标量作四则运算，结果为每个元素进行相应运算</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 加法</span></span><br><span class="line">A</span><br><span class="line">C1 &lt;- A + <span class="number">2</span>; C1</span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">c2 &lt;- A - <span class="number">3</span>; c2</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">c3 &lt;- A * <span class="number">2</span>; c3</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">c4 &lt;- A / <span class="number">2</span>; c4</span><br></pre></td></tr></table></figure></div><ul><li><p>两个同形状的矩阵进行加、减运算， 即对应元素相加、相减， 用A + B，A - B表示</p></li><li><p>对两个同形状的矩阵， 用*表示两个矩阵对应元素相乘(注意这不是线性代数中的矩阵乘法)， 用/表示两个矩阵对应元素相除。</p></li></ul><h3 id="矩阵乘法"><a href="#矩阵乘法" class="headerlink" title="矩阵乘法"></a>矩阵乘法</h3><p>用<code>%*%</code>表示矩阵乘法而不是用<code>*</code>表示， 注意矩阵乘法要求左边的矩阵的列数等于右边的矩阵的行数。</p><h2 id="12-数据框"><a href="#12-数据框" class="headerlink" title="12. 数据框"></a>12. 数据框</h2><p>数据框类似于一个矩阵，有行、列， 但各列允许有不同类型：数值型向量、因子、字符型向量、日期时间向量。 同一列的数据类型相同。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d &lt;- data.frame(</span><br><span class="line">    姓名=c(<span class="string">"李明"</span>, <span class="string">"张聪"</span>, <span class="string">"王建"</span>), </span><br><span class="line">    年龄=c(<span class="number">30</span>, <span class="number">35</span>, <span class="number">28</span>), </span><br><span class="line">    身高=c(<span class="number">180</span>, <span class="number">162</span>, <span class="number">175</span>),</span><br><span class="line">    stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">d</span><br></pre></td></tr></table></figure></div><p><code>data.frame()</code>函数会将字符型列转换成因子， 加选项stringsAsFactors=FALSE可以避免这样的转换。</p><p>数据框每列叫做一个变量， 每列都有名字，称为列名或变量名， 可以用names()函数和colnames()函数访问。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">names(d)</span><br><span class="line">colnames(d)</span><br><span class="line"><span class="comment"># 修改列名</span></span><br><span class="line">names(d)[<span class="number">1</span>] &lt;- <span class="string">"names"</span></span><br><span class="line">names(d)</span><br></pre></td></tr></table></figure></div><p>用<code>as.data.frame(x)</code>可以把<code>x</code>转换成数据框。 如果<code>x</code>是一个向量， 转换结果是以<code>x</code>为唯一一列的数据框。 如果<code>x</code>是一个列表并且列表元素都是长度相同的向量， 转换结果中每个列表变成数据框的一列。 如果<code>x</code>是一个矩阵，转换结果把矩阵的每列变成数据框的一列。</p><p>数据框是一个随着R语言前身S语言继承下来的概念， 现在已经有一些不足之处， tibble包提供了tibble类， 这是数据框的一个改进版本。</p><h3 id="数据框内容访问"><a href="#数据框内容访问" class="headerlink" title="数据框内容访问"></a>数据框内容访问</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 数据框可以用矩阵格式访问</span></span><br><span class="line">print(d)</span><br><span class="line"><span class="comment"># 访问单个元素</span></span><br><span class="line">d[<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="comment"># 访问第二列</span></span><br><span class="line">d[<span class="number">2</span>]</span><br><span class="line"><span class="comment"># 范文第二列，使其结果为向量</span></span><br><span class="line">d[[<span class="number">2</span>]] </span><br><span class="line"><span class="comment"># 或者d[,2],也访问第二列，但是这种作法与tibble不兼容， 所以应避免使用。</span></span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 三种结果相同的访问列方法，其中第二种做法与tibble不兼容，应避免使用。</span></span><br><span class="line">d[[<span class="string">"names"</span>]]</span><br><span class="line">d[,<span class="string">"names"</span>]</span><br><span class="line">d$names</span><br></pre></td></tr></table></figure></div><p>因为数据框的一行不一定是相同数据类型， 所以数据框的一行作为子集， 结果还是数据框，而不是向量。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取数据框的第一行</span></span><br><span class="line">d[<span class="number">1</span>,]</span><br><span class="line">is.data.frame(d[<span class="number">1</span>,])</span><br><span class="line"><span class="comment"># 可以同时取行子集和列子集</span></span><br><span class="line">d[<span class="number">1</span>:<span class="number">2</span>,<span class="string">"names"</span>]</span><br><span class="line">d[<span class="number">1</span>:<span class="number">2</span>, c(<span class="string">'names'</span>, <span class="string">'年龄'</span>)]</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取年龄大于30的所有行和列,即前两行</span></span><br><span class="line">d[d[[<span class="string">'年龄'</span>]]&gt;=<span class="number">30</span>,]</span><br></pre></td></tr></table></figure></div><p>与矩阵类似地是，用如d[,’age’], d[,2]这样的方法取出的数据框的单个列是向量而不再是数据框。但是，如果取出两列或者两列以上， 结果则是数据框。<br>对一般的数据框， 可以在取子集的方括号内加上drop=FALSE选项， 确保取列子集的结果总是数据框。 数据框的改进类型tibble在取出列子集时保持为tibble格式。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">t1 &lt;- d[,<span class="string">"names"</span>]</span><br><span class="line">is.data.frame(t1)</span><br><span class="line">t2 &lt;- d[,<span class="string">"names"</span>,drop=<span class="literal">F</span>]</span><br><span class="line">is.data.frame(t2)</span><br></pre></td></tr></table></figure></div><p>数据框每一行可以有行名， 这在原始的S语言和传统的R语言中是重要的技术， 但是在改进类型tibble中则取消了行名， 需要用列名实现功能一般改用left_join()函数实现。<br>可以用数据中的某一列的每一行作为行名，如d数据康中可以用<code>names</code>(没有重复值)作为行名。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rownames(d) &lt;- d$names</span><br><span class="line"><span class="comment"># d$name &lt;- NULL</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure></div><p>输出结果</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     names 年龄 身高</span><br><span class="line">李明  李明   30  180</span><br><span class="line">张聪  张聪   35  162</span><br><span class="line">王建  王建   28  175</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rownames(d) &lt;- d$names</span><br><span class="line">d$names &lt;- <span class="literal">NULL</span></span><br><span class="line">d</span><br></pre></td></tr></table></figure></div><p>输出结果</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">     年龄 身高</span><br><span class="line">李明   30  180</span><br><span class="line">张聪   35  162</span><br><span class="line">王建   28  175</span><br></pre></td></tr></table></figure></div><p>用数据框的行名可以建立一个值到多个值的对应表。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">dm &lt;- data.frame(</span><br><span class="line">  <span class="string">"年级"</span>=<span class="number">1</span>:<span class="number">6</span>,</span><br><span class="line">  <span class="string">'出游'</span>=c(<span class="number">0</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>),</span><br><span class="line">  <span class="string">'疫苗'</span>=c(<span class="literal">T</span>, <span class="literal">F</span>, <span class="literal">F</span>, <span class="literal">F</span>, <span class="literal">T</span>, <span class="literal">F</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure></div><p>把年级变成行名，可以建立年级到出游次数与疫苗注射的对应表：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">rownames(dm) &lt;- dm[[<span class="string">'年级'</span>]]</span><br><span class="line">dm[[<span class="string">"年级"</span>]] &lt;- <span class="literal">NULL</span></span><br></pre></td></tr></table></figure></div><p>假设某个社区的小学中抽取的4个班的年级为 c(2,1,1,3)， 其对应的出游和疫苗注射信息可查询如下：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 相当于将年级的那一项当做行来取对应的列值</span></span><br><span class="line">dm[as.character(c(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>)),]</span><br></pre></td></tr></table></figure></div><p>输出结果包含了两个1</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    出游  疫苗</span><br><span class="line">2      2 FALSE</span><br><span class="line">1      0  TRUE</span><br><span class="line">1.1    0  TRUE</span><br><span class="line">3      2 FALSE</span><br></pre></td></tr></table></figure></div><p>可以去掉，以上程序改成：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- dm[as.character(c(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">3</span>)),]</span><br><span class="line">rownames(x) &lt;- <span class="literal">NULL</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure></div><p>输出结果：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">  出游  疫苗</span><br><span class="line">1    2 FALSE</span><br><span class="line">2    0  TRUE</span><br><span class="line">3    0  TRUE</span><br><span class="line">4    2 FALSE</span><br></pre></td></tr></table></figure></div><p>对于代替数据框的tibble类型， 如果要实现行名的功能， 可以将行名作为单独的一列</p><h3 id="数据框与矩阵的区别"><a href="#数据框与矩阵的区别" class="headerlink" title="数据框与矩阵的区别"></a>数据框与矩阵的区别</h3><p>数据框不能作为矩阵参加矩阵运算。 需要时，可以用as.matrix()函数转换数据框或数据框的子集为矩阵。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d2 &lt;- as.matrix(d[,c(<span class="string">"年龄"</span>, <span class="string">"身高"</span>)])</span><br><span class="line"><span class="comment"># 矩阵运算</span></span><br><span class="line">d3 &lt;- crossprod(d2); d3</span><br><span class="line">d4 &lt;- c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>) %*% d2;d4</span><br></pre></td></tr></table></figure></div><h3 id="gl-函数"><a href="#gl-函数" class="headerlink" title="gl()函数"></a>gl()函数</h3><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d4 &lt;- data.frame(</span><br><span class="line">  group=gl(<span class="number">3</span>, <span class="number">10</span>, length=<span class="number">30</span>),</span><br><span class="line">  subgroup=gl(<span class="number">5</span>,<span class="number">2</span>,length=<span class="number">30</span>),</span><br><span class="line">  obs=gl(<span class="number">2</span>,<span class="number">1</span>,length=<span class="number">30</span>))</span><br><span class="line">print(d4)</span><br></pre></td></tr></table></figure></div><p>结果的数据框d有三个变量: group是大组，共分3个大组，每组10个观测； subgroup是子组，在每个大组内分为5个子组，每个子组2个观测。 共有3x5x2=30个观测（行）。</p><p>gl()函数第一个参数是因子水平个数， 第二个参数是同一因子水平连续重复次数， 第三个参数是总共需要的元素个数， 所有水平都出现后则重复整个模式直到长度满足要求。</p><h3 id="tibble类型"><a href="#tibble类型" class="headerlink" title="tibble类型"></a><code>tibble</code>类型</h3><p>tibble类型是一种改进的数据框。 readr包的read_csv()函数是read.csv()函数的一个改进版本， 它将CSV文件读入为tibble类型，如文件class.csv的读入:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(tibble)</span><br><span class="line"><span class="keyword">library</span>(readr)</span><br><span class="line">t.class &lt;- read_csv(<span class="string">'class.csv'</span>)</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">t.class</span><br><span class="line">class(t.class)</span><br></pre></td></tr></table></figure></div><p>用as_tibble()可以将一个数据框转换为tibble.<br>可以用tibble()函数生成小的tibble，和生成data.frame的格式一样。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">t.b &lt;- tibble(</span><br><span class="line">  <span class="string">"序号"</span>=c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">7</span>),</span><br><span class="line">  `收缩压`=c(<span class="number">145</span>, <span class="number">110</span>, <span class="string">"未测"</span>, <span class="number">150</span>, <span class="string">"拒绝"</span>, <span class="number">115</span>)</span><br><span class="line">)</span><br><span class="line">t.b</span><br></pre></td></tr></table></figure></div><p>用tribble可以按类似于CSV格式输入一个tibble, </p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">t.bp &lt;- tribble(</span><br><span class="line">~`序号`,~`收缩压`,</span><br><span class="line"><span class="number">1</span>,<span class="number">145</span>,</span><br><span class="line"><span class="number">5</span>,<span class="number">110</span>,</span><br><span class="line"><span class="number">6</span>,<span class="string">"未测"</span>,</span><br><span class="line"><span class="number">9</span>,<span class="number">150</span>,</span><br><span class="line"><span class="number">10</span>,<span class="string">"拒绝"</span>,</span><br><span class="line"><span class="number">15</span>,<span class="number">115</span></span><br><span class="line">)</span><br><span class="line">t.bp</span><br></pre></td></tr></table></figure></div><p>注意tribble()中数据每行末尾也需要有逗号， 最后一行末尾没有逗号。 这比较适用于在程序中输入小的数据集。</p><p>tibble与数据框的一大区别是在显示时不自动显示所有内容， 这样可以避免显示很大的数据框将命令行的所有显示都充满。 可以在print()用n=和width=选项指定要显示的行数和列数。</p><p>另外，用单重的方括号取列子集时， 即使仅取一列， 从tibble取出的一列结果仍是tibble而不是向量， 这时应使用双方括号格式或$格式。 因为这个原因有些原来的程序输入tibble会出错， 这时可以用as.data.frame()转换成数据框。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tibble</span></span><br><span class="line">t.bp[,<span class="string">"收缩压"</span>]</span><br><span class="line"><span class="comment"># 向量</span></span><br><span class="line">t.bp[[<span class="string">"收缩压"</span>]]</span><br><span class="line">t.bp$<span class="string">"收缩压"</span></span><br><span class="line"><span class="comment"># 数据框</span></span><br><span class="line">as.data.frame(t.bp$<span class="string">'收缩压'</span>)</span><br></pre></td></tr></table></figure></div><p> tibble不使用行名， 需要行名时， 将其保存为tibble的一列。 </p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>假设class.csv已经读入为R数据框d.class, 其中的sex列已经自动转换为因子。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(tibble)</span><br><span class="line"><span class="keyword">library</span>(readr)</span><br><span class="line">d.class &lt;- read_csv(<span class="string">'class.csv'</span>)</span><br></pre></td></tr></table></figure></div><ol><li><p>显示d.class中年龄至少为15的行子集；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x1 &lt;- d.class[d.class[<span class="string">"age"</span>]&gt;=<span class="number">15</span>,]</span><br><span class="line">x1</span><br></pre></td></tr></table></figure></div></li><li><p>显示女生且年龄至少为15的学生姓名和年龄；</p></li></ol><p><strong>注意：此处取sex=F时，表达式为x1$sex==”F”，两个等于号</strong></p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x2 &lt;- x1[x1$sex==<span class="string">"F"</span>,c(<span class="string">"name"</span>,<span class="string">"age"</span>)]</span><br><span class="line">x2</span><br></pre></td></tr></table></figure></div><ol start="3"><li>取出数据框中的age变量赋给变量x。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- d.class$age</span><br><span class="line">x</span><br></pre></td></tr></table></figure></div>]]></content>
    
    <summary type="html">
    
      R语言的基本数据类型与运算2
    
    </summary>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="编程" scheme="https://steven-shixq.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻23</title>
    <link href="https://steven-shixq.github.io/2020/02/29/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB23/"/>
    <id>https://steven-shixq.github.io/2020/02/29/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB23/</id>
    <published>2020-02-29T02:22:18.000Z</published>
    <updated>2020-02-29T06:54:55.284Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Educated" target="_blank" rel="noopener">Educated is even better than you’ve heard</a></p></blockquote><p><em>Educated</em> by Tara Westover</p><p>中文书名：《你当像鸟飞往你的山》</p><p>I’ve always prided myself on my ability to teach myself things. Whenever I don’t know a lot about something, I’ll read a textbook or watch an online course until I do.</p><p>I thought I was pretty good at teaching myself—until I read Tara Westover’s memoir <em>Educated</em>. Her ability to learn on her own blows mine right out of the water. I was thrilled to sit down with her recently to talk about the book.</p><p>Tara was raise in rural Idaho, she have a dad who believed <strong>doomsday</strong> (世界末日) was coming, and that the family should interact with the health and education systems as little as possible. As result, she didn’t step foot in a classroom until she was 17, and major medical crises went untreated (her mother suffered a brain injury in a car accident and never fully recovered).</p><p>Because Tara and her six siblings worked at their father’s junkyard from a young age, none of them received any kind of proper <strong>homeschooling</strong> (家庭教育). She had to teach herself algebra and trigonometry and self-studied for the ACT, which she did well enough on to gain admission to Brigham Young University. Eventually, she earned her doctorate in intellectual history from Cambridge University. and more importantly, she is a Gates Scholar.</p><p><em>Educated</em> is an amazing story. Tara is never cruel, even when she’s writing about some of her father’s most <strong>fringe</strong> (边缘的)beliefs. Whatever their family, including her mom and dad ideas are, they pursue them.</p><p>Three of the seven siblings-including Tara-left home, and all three have eared Ph.D.s. Three doctorates in one family would be remarkable even for a more “conventional” household. Her dad taught the kids that they could teach themselves anything that gave them a degree of toughness and helped them persevere</p><p>He believed in conspiracy theories, and so she did, too. It wasn’t until she went to BYU that she realized there were other perspectives on things her dad had presented as fact. For example, she had never heard of the Holocaust until her art history professor mentioned it. She had to research the subject to form her own opinion that was separate from her dad’s.</p><p>When you meet her, you don’t have any impression of all the turmoil she’s gone through.  She’s so articulate (清晰的，清楚表达的) about the traumas （创伤） of her childhood, including the physical abuse (虐待) she suffered at the hands of one brother. I was impressed by how she talks so candidly about how naïve she once was—most of us find it difficult to talk about our own <strong>ignorance</strong> (无知).</p><p>“I worry that education is becoming a stick that some people use to beat other people into submission or becoming something that people feel arrogant about,” she said. “I think education is really just a process of self-discovery—of developing a sense of self and what you think. I think of [it] as this great mechanism of connecting and equalizing.”</p><p>Tara’s process of self-discovery is beautifully captured in <em>Educated</em>. </p><p><em>Educated</em> is one of the books in my bookbag, I think I will enjoy it.</p><hr><blockquote><p><a href="https://book.douban.com/subject/33440205/" target="_blank" rel="noopener">作者访谈：教育不是狭义的职业培训，而在于自我创造</a></p></blockquote><p><em>以下访谈内容引自豆瓣</em></p><p>以下内容整理自比尔·盖茨、奥普拉脱口秀以及《福布斯杂志》对作者塔拉·韦斯特弗的访谈。</p><p><a href="https://img3.doubanio.com/view/thing_review/l/public/3607123.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://img3.doubanio.com/view/thing_review/l/public/3607123.jpg" class="lazyload"></a></p><p>比尔·盖茨与塔拉•韦斯特弗对谈</p><p><strong>Q 你怎么看待原生家庭？</strong></p><p><strong>你可以爱一个人，但仍然选择和他说再见；你可以每天都想念一个人，但仍然庆幸他已不在你的生命中。</strong></p><p>很长一段时间我都在想，正因为我爱我的家人，所以我是不是做了错误的决定？还有，因为我对家人深深的思念，让我多次陷入自我怀疑，心里有个声音不断重复：“因为我想他们了，所以我一定是做错了。”</p><p>我花了很长时间才醒悟过来，没错，爱很简单。最后一次见到爸爸时，他给了我一个僵硬的拥抱，然后对我说：“你知道吗，我很爱你。”我回答说：“我当然知道，这从来不是问题的所在。”我一直都知道爸爸很爱我，毋庸置疑，我并不觉得爸爸那么做是因为他不爱我。</p><p>但<strong>当我们试图以爱的名义控制和改变他人，这种爱就变味了。</strong>这并非爱的真谛，<strong>你爱别人，就无条件地爱，交还给你所爱的人自我选择的权利。</strong>如果你说，我一定要改变我爱的人，这样我就能永远占有他们了，那这根本就不是爱，也不是爱的价值和力量。所以我想对我的家人说，我现在仍然很爱他们。尽管一半家人已和我断绝往来，虽然我必须接受现实——他们必须改变才能重新回到我的生命中。至于他们是否会改变，就不是我能控制的了。</p><p><strong>Q 你如何决定不再遵从爸爸为你设定的框架而活，去寻找真正的自我？</strong></p><p>我换了一个视角去看待这一切，而不是拘泥于眼下发生的事。对我来说，如果我的未来注定没有家人的参与和支持，我宁愿选择先主动离开。</p><p>我觉得人人都是这样。<strong>我们成长在各自的家庭，被塑造成既定的模样，我们总以为能够摆脱束缚，重新塑造自己。可一旦我们回到旧的环境，又会回到死循环。</strong>或者更糟，在不健康的家庭环境中长大的孩子，会在外面的世界中寻找那些能与我们一起重复死循环的人，很多人一辈子无法挣脱。</p><p>我很喜欢来自《圣经》的一句话：“信就是所望之事的实底，是未见之事的确据。”<strong>信仰的可贵之处正在于，它让人们相信存在更好的世界，不同的世界，</strong>相信我们可以过上与以往不同的另一种生活，体会你从未体会过的爱。但<strong>要舍弃过往，想象未来，则需要信仰和教育相结合。</strong>只有二者相辅相成，才能遇见未知的人生，期待不一样的改变。 </p><p><a href="https://img1.doubanio.com/view/thing_review/l/public/3607139.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://img1.doubanio.com/view/thing_review/l/public/3607139.jpg" class="lazyload"></a></p><p>奥普拉与塔拉•韦斯特弗对谈</p><p><strong>Q为什么将书命名为Educated？</strong></p><p>我的故事想要提及的<strong>教育不是狭义上的职业培训，而是广义上的自我创造</strong>。<strong>我担心，我们对教育的观念已经变得狭隘，过于注重工作技能。</strong>我的教育改变了我。最终，它给了我全新的视角和自信心，让我能够以自己从未有过的方式站起来捍卫自己。如果你教我Excel或如何编程，我想它不会达到那样的效果。</p><p>随着自动化和全球化的发展，就业竞争越来越激烈。<strong>就业危机是我们必须认真对待的事情，但教育是另一回事。</strong>理想情况下，你的<strong>教育确实为你找工作和获得成功做准备。但是教育并不能解决这些全球化或自动化的大问题。它不会解决我们的不平等危机。</strong>当你给教育施加压力，来解决教育无法真正解决的巨大的经济和历史问题时，那些本应帮助个人过上更充实的生活的东西被夺走了，只剩下让他们成为好员工、让雇主受益的东西。</p><p><strong>Q你觉得教师的角色是什么？你是如何做到完全自学的？</strong></p><p>理想的情况是，你真的很想学习，而且你有机会接触到一位诺贝尔奖得主，让他告诉你如何学习。但<strong>如果你是一个不想学习的孩子，比起那些真的想学东西的孩子，让一位诺贝尔奖得主来教你，你也一无所获。</strong>你不能强迫人们思考，也不能强制他们学习。我喜欢把老师视为顾问，作为一种资源。<strong>教育对我来说从来都不是一种训练，也不是我每天不经思考就要做的事。我的教育完全在我自己的掌控之中。</strong>如果我来设计教育系统，我想吸引最好的老师，我会对他们充满信心。我想至少给孩子们一种可以自主掌控生活的信念，让他们觉得他们学到的东西在某种意义上是他们自己的责任和决定。</p><p><a href="https://img1.doubanio.com/view/thing_review/l/public/3607148.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://img1.doubanio.com/view/thing_review/l/public/3607148.jpg" class="lazyload"></a></p><p><strong>Q你的家人中没受过高等教育的还保持着原有的价值观，而你和两个哥哥都选择离家去上大学，并取得了非常好的成就。你认为这种两极分化是个问题吗？</strong></p><p>我的确认为这种分化是一个问题，那就是<strong>社会断层线随着教育水平的分化而日益明显</strong>。所以，<strong>受过教育的人们这样想，没受过教育的人们那样想，然后这两个团体之间就产生了相当大的敌意。</strong>人们原本只是在事情上意见不一致，现在突然转变，认为对方居心叵测，他们甚至不把另一边的人当人看。</p><p>我觉得这真的很让人不安，<strong>因为教育已成为造成这种现象的部分原因。</strong>我们说，教育是一项普遍的权利，每个人都应该享有，但实际上并不是。有些人能接触到很多，而其他人却接触不到多少。</p><p>我认为<strong>教育其实只是一个自我发现、培养自我意识和想法的过程。但我们越是和同类人扎堆，让学校成为人们同质化的反映，那么我想学校就会变成人群分化的工具。</strong>我认为<strong>教育是一种连接和平衡资源的伟大机制，当它成为分化的工具时，后果可能会有点可怕。</strong></p><p><a href="https://img3.doubanio.com/view/thing_review/l/public/3607153.jpg" data-fancybox="group" data-caption="img" class="fancybox"><img alt="img" title="img" data-src="https://img3.doubanio.com/view/thing_review/l/public/3607153.jpg" class="lazyload"></a></p><p>塔拉•韦斯特弗谈教育</p><p><strong>Q你所受的教育使你走上了一条改变世界观的道路，你认为这是不可避免的吗？</strong></p><p>我认为，任何一个拥有多种不同视角的人都不太可能拥有一模一样的世界观。不管你是在非常保守还是非常自由的环境中长大的，这都是事实。我认为<strong>教育意味着获得不同的视角，理解不同的人、经历和历史。如果所有这些都不能改变你的想法，那么问题可能出在你自己身上。</strong></p><p><strong>Q教育该如何帮助人们更深入地倾听彼此？</strong></p><p>我想对人们说：<strong>接受教育，但不要让你的教育僵化成傲慢。教育应该是你思想的拓展，同理心的深化，视野的开阔。它不应该使你的偏见变得更顽固。如果人们受过教育，他们应该变得不那么确定，而不是更确定。他们应该多听，少说。他们应该对差异满怀激情，热爱那些不同于他们的想法。</strong></p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="Book" scheme="https://steven-shixq.github.io/tags/Book/"/>
    
      <category term="Education" scheme="https://steven-shixq.github.io/tags/Education/"/>
    
      <category term="教育" scheme="https://steven-shixq.github.io/tags/%E6%95%99%E8%82%B2/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻22</title>
    <link href="https://steven-shixq.github.io/2020/02/28/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB22/"/>
    <id>https://steven-shixq.github.io/2020/02/28/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB22/</id>
    <published>2020-02-27T23:57:42.000Z</published>
    <updated>2020-02-28T08:17:58.155Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Health/My-message-to-Americas-top-scientists" target="_blank" rel="noopener">My message to America’s top scientists</a></p></blockquote><p>People often ask me which technologies have the most potential to change our lives in the decades ahead.</p><p>AI is always near the top of the list. Gene-based tools are another technology that I always mention. For example, advances in that field are giving researchers powerful new tools to investigate potential cures for AIDS, sickle-cell disease, and other conditions.</p><p>*<em>The Diseases of Poverty and The Potential of AI and Gene Therapy *</em></p><p>The core of our foundation work focus on eliminating the gross inequities in health that we had seen a few years earlier on our first trip to Africa.</p><p>Today, I want to talk about several exciting and important tools of modern science that have the potential to help us solve some of the biggest health problems—not only in low- and middle-income countries, but everywhere.</p><p>Today, we have an opportunity with the evolution of tools like AI and gene-based technologies to develop a new generation of health solutions that can benefit everyone, everywhere. </p><p>Since Alan Turing laid the groundwork for artificial intelligence in 1950, AI has gone through a kind of <u>boom-and-bust</u> (繁荣和萧条) cycle—enthusiasm would grow and then expectations weren’t met.</p><p>But we are finally beginning to realize the potential of AI. The computational power available for AI applications is doubling every three and half months—far surpassing the historical metric of Moore’s Law. This processing capability is being coupled with troves of new data, and we are learning to annotate this data in smarter ways. That’s enabling us to realize some of the promises of AI: the ability to synthesize, analyze, see patterns, gain insights, and make predictions across many, many more dimensions than a human can comprehend.</p><p>This data revolution will apply to virtually all of the disciplines represented here today. What I’m most excited about is how it can help us make sense of complex biological systems and accelerate the discovery of therapeutics to improve health in the poorest countries.</p><p>And, with recent breakthroughs in gene-editing technologies like CRISPR, we are on the verge of a new era of precision diagnostics, therapeutics, and vaccines that has the potential to improve health—not only for rare genetic disorders, but also for diseases that predominately afflict people in poor countries.</p><p>It’s amazing to think how far we’ve come since Crick, Watson, and Franklin laid the foundation for modern genetics. It was only 15 years ago that the Human Genome Project gave us the ability to read our DNA and identify specific sequences that cause or contribute to disease. It was only 8 years ago that CRISPR gave us the ability to edit DNA precisely.</p><p>Now, with the latest CRISPR gene-editing approaches, it’s believed that up to 89% of genetic variants known to be associated with human disease can be corrected.</p><p>Last year, researchers began using the molecular scissors of CRISPR in clinical trials to remove, edit, and inject people’s cells back into their bodies.</p><p>In short, artificial intelligence and CRISPR have emerged as powerful tools with the potential to revolutionize healthcare and many other fields.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-How two technologies can benefit the world’s poorest.
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻21</title>
    <link href="https://steven-shixq.github.io/2020/02/27/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB21/"/>
    <id>https://steven-shixq.github.io/2020/02/27/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB21/</id>
    <published>2020-02-27T02:03:18.000Z</published>
    <updated>2020-02-28T08:17:45.069Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Turtles-All-the-Way-Down" target="_blank" rel="noopener">My family loved reading this book together</a></p></blockquote><p><em>Turtles All the Way Down</em> by John Green</p><p>中文书名：《龟背上的世界》</p><p><em>Turtles All the Way Down</em> tells the story of Aza Holmes, a high school student from Indianapolis. When a local billionaire goes missing and a $100,000 reward is offered for information about his disappearance, she and her best friend decide to <u>track him down</u> (追踪他).</p><p>Aza’s quest is complicated by the fact that she has <u>obsessive compulsive disorder</u> (OCD，强迫症) and severe anxiety. Her struggles are a huge part of the book, as her compulsions (强迫) constantly get in the way of her social life. John’s writing feels almost claustrophobic (患幽闭恐怖症的) when describing Aza’s mental <strong>swirl</strong> (盘绕，旋涡). Some people might find those parts difficult to read, but he really gives you a sense of what it feels like to live with OCD.</p><p>Because this is a John Green novel, romance must factor into the equation. Aza <u>begins to develop feelings for</u> （开始对…产生感情）Davis, the son of missing billionaire Russell Pickett. He is initially skeptical about her intentions, because he’s used to people <strong>sucking up</strong> (拍马屁，恭维)to him to get close to his dad. </p><p>Here’s what Phoebe had to say:</p><p>“For years I have been a loyal John Green fan—devouring his novels in the back of coffee shops, while traveling, and curled up on my couch. Something about the imagery of his books makes me get caught up in the fantasy of his stories, but <em>Turtles All the Way Down</em> hit closer to home for me than the rest. As someone who has struggled with OCD for years, I saw some of myself in the main character. But more than anything, this book struck close to home due to the <strong>intriguing</strong> (有趣的，迷人的) character of Davis.</p><p>“Never has a book been able to capture so well what it is like to live in the shadow of someone else’s legacy. This story shows how Davis struggled to find his own identity outside of his father’s fame and wealth. Although we have very different relationships with our dads, I recognized his struggle, which also plays into my own life as I find my way in this world. This read was captivating like none other I have read before.”</p><p>Phoebe is much closer to John’s intended demographic than I am, but I think readers of all ages will enjoy <em>Turtles All the Way Down</em>. It’s a fun, moving story filled with <strong>quirky</strong> (古怪的) but related characters.</p><p>He made her promise not to share it with anyone, and she stayed true to her word：他让她承诺不告诉任何人,她恪守了诺言。</p><p>suck up to sb.: 拍某人马屁</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻20</title>
    <link href="https://steven-shixq.github.io/2020/02/26/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB20/"/>
    <id>https://steven-shixq.github.io/2020/02/26/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB20/</id>
    <published>2020-02-26T02:43:40.000Z</published>
    <updated>2020-02-26T05:48:01.473Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.newscientist.com/article/2235009-animal-that-doesnt-need-oxygen-to-survive-discovered/" target="_blank" rel="noopener">Animal that doesn’t need oxygen to survive discovered</a></p></blockquote><p>能呼吸氧气一直以来都被当做是多细胞生物的一项基本特征，但科学家最近发现了一种动物不能呼吸氧气，它们没有线粒体这个细胞器，丧失了呼吸氧气的能力。</p><p>这种感染鲑鱼的寄生虫如何在没有氧气的情况下获得所需的能量，仍然是一个谜，科学家猜测寄生虫可能通过宿主来获取所需的氧气。</p><p>所有动植物都是使用氧气来产生ATP，ATP为细胞提供所需的能量。细胞通过利用氧气产生ATP的过程发生在线粒体中。线粒体中存在和细胞核分开的基因组，但科学家使用DNA染料对该寄生虫（<em>Henneguya salminicola</em>）的细胞进行染色时，没有在除了细胞核以外的细胞质区域发现该荧光染料。相比之下，在该寄生虫的近亲中进行DNA染色时，可以看到该寄生虫近亲细胞中的线粒体的存在。</p><p>虽然<em>Henneguya salminicola</em>的细胞有看起来像线粒体的结构，但它们不能制造利用氧气产生ATP所需的酶，这些结构不是真正的线粒体。这以为着其作为一种多细胞动物，可以在没有氧气的情况下存活。</p><p>2010年，意大利马尔凯理工大学的Roberto Danovaro报道说，生活在深海沉积物中的一群名为loriciferans的小动物在显微镜下观察不到线粒体，必须依赖其他能源，例如氢硫化物代替。但是该结论还需要进行基因组测序来进一步确认。</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      NewScientist-Animal that doesn&#39;t need oxygen to survive discovered
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="science" scheme="https://steven-shixq.github.io/tags/science/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻19</title>
    <link href="https://steven-shixq.github.io/2020/02/25/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB19/"/>
    <id>https://steven-shixq.github.io/2020/02/25/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB19/</id>
    <published>2020-02-25T01:52:58.000Z</published>
    <updated>2020-02-25T08:07:28.241Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/The-Myth-of-the-Strong-Leader" target="_blank" rel="noopener">What makes a great leader?</a></p></blockquote><p><em>The Myth of the Strong Leader</em> - by Archie Brown</p><p>Most casual observers of history probably don’t have <u>a great deal of</u> (许多) familiarity with the story of Adolfo Suárez.</p><p>We can see from the book that leaders like Suárez, who served as prime minister of Spain from 1976 to 1981, possess leadership styles and capacities that are incredibly effective, and depressingly rare in our society.</p><p>After General Francisco Franco’s death in 1975, tensions were high. The country had just emerged from nearly four decades of <strong>authoritarianism</strong> (独裁主义), and faced a number of possible futures—many of them bloody. Suárez, who had come from the right-wing Franco <strong>regime</strong> （政权，体制）, could have tried to rule through <strong>intimidation</strong> (恐吓，威胁)and <strong>exclusion</strong> （排斥）. Instead, he made it a priority to bring the left-wing leaders of the Communist and Socialist parties into the fold （放在首位）. Through negotiation, persuasion, and some very <strong>adroit</strong> (敏捷的，灵巧的) coalition-building (联盟构建), he convinced those around him of the importance of democracy and <strong>pluralism</strong> (多元化，多元主义), <strong>staving off</strong> （躲开） a <strong>military coup</strong> (军事政变) and eventually creating the constitutional <strong>monarchy</strong> (君主政体) that exists today. At one point, Suárez convinced the <strong>parliament</strong> (国会，议会) that was appointed under Franco—at that time, the “old elite”—to <em>abolish itself</em> to make way for elected parties. For scholars of leadership, it’s hard to imagine a better illustration of skill than that.</p><p>The story of Suárez is one of a series of case studies that animate (使…充满生气) Brown’s book and make it an important and unusual read. Whereas most books about political leadership are chronologies (年表；年代学), mapping the rise and fall of leaders over time, this one is more of a <strong>taxonomy</strong> (分类). Brown takes a deep look at the <strong>traits</strong> (特质) and tendencies leaders exhibit, and the categories they fall into, as a way of understanding the egos （自我）, motivations, and behaviors responsible for so much progress, and so much suffering, in the world. Throughout, he presents a new way to think about today’s challenges—and the people we <strong>entrust</strong> (委托，托付) with solving them.</p><p>Brown’s core argument is exactly what his title suggests: despite a worldwide <strong>fixation</strong> (异常依恋，痴迷) on strength as a positive quality, strong leaders—those who concentrate power and decision-making in their own hands—are not necessarily good leaders. On the contrary, Brown argues that the leaders who make the biggest difference in office, and change millions of lives for the better, are the ones who collaborate, delegate, and negotiate—the ones who recognize that no one person can or should have all the answers （没有一个人能拥有所有答案）.</p><p>To make his case, Brown sorts successful leaders into two categories. “Redefining” leaders radically change the political landscape, not by “[seeking] centre ground” but by “[moving] the centre in their direction.” Brown puts Franklin Delano Roosevelt and Lyndon Baines Johnson in this category, because several of their <u>signature achievements</u> （标志性成就）—FDR’s New Deal, and LBJ’s War on Poverty and dedication to civil rights—have had a major and lasting impact on American society. We tend to think of these men as strong leaders, and in many ways we’re right. But Brown shows a different side of the story: because of the <u>checks and balances</u> (制衡) of the American political system, neither FDR nor LBJ had the ability to govern by <strong>fiat</strong> (命令). Their strength lay in their power to persuade—to convince their colleagues in government, and the American people, to understand and support their point of view.</p><p>“Transformational” leaders, Brown argues, go a step further, by fundamentally transforming the political or economic system itself (政治或者经济体系本身). If you’re <strong>dismayed</strong> (失望的) at how rare it is for an American president to reshape our political or economic system, as many voters today seem to be, consider that the last transformational American leader, in Brown’s analysis, was Abraham Lincoln. Transformational leaders are the ones, like Suárez, who leave their country a completely different place than they found it. In this category, Brown lists Charles de Gaulle, Mikhail Gorbachev, Deng Xiaoping, and Nelson Mandela.</p><p>These qualities can be <strong><u>boiled down</u></strong> (归结) to a belief, on the part of the leader, that he or she—and usually he—is the only one who knows what the country needs, and the only one who can deliver it.</p><p>Though <em>The Myth of the Strong Leader</em> is about political leadership, you come away from Brown’s analysis with a deeper understanding of leadership in general.</p><p>Through my work in the business world and at the foundation, I’ve seen firsthand how ineffective and even dangerous it can be when leaders make decisions alone—and how much good we can do when we work together. Good leaders will challenge themselves, bring in fresh thinking and expert advice, and not only invite but seriously consider opposing viewpoints.</p><p>好的领导者会合作听取别人的意见，他们不仅欢迎别人提出相反的意见，还会认真的考虑这些相反的意见，在听取了广泛的意见之后再做出决策。这和瑞·达利欧的《原则》中三坚持的原则：<strong>“优秀想法至上”，即 idea meritocracy，而不是权力至上</strong>，有异曲同工之妙。</p><p>avid : 狂热的，贪婪的</p><hr><p><em>See you tomrrow</em></p>]]></content>
    
    <summary type="html">
    
      Gats-What makes a great leader?
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="管理" scheme="https://steven-shixq.github.io/tags/%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻18</title>
    <link href="https://steven-shixq.github.io/2020/02/24/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB18/"/>
    <id>https://steven-shixq.github.io/2020/02/24/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB18/</id>
    <published>2020-02-24T03:02:46.000Z</published>
    <updated>2020-02-24T10:40:39.235Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/The-Gene" target="_blank" rel="noopener">Lost and found with “the most wondrous map ever produced”</a></p></blockquote><p><em>The Gene: An Intimate History</em> by Siddhartha Mukherjee</p><p>中文书名：《基因转：众生之源》</p><p>本书作者悉达多.穆克吉是哥伦比亚大学癌症医生和研究员，曾写过一本书<em>The Emperor of All Maladies</em>，中文书名《众病之王：癌症传》，并以此作品获得了普利策奖。</p><p>The year Melinda and I started our foundation, President Bill Clinton convened in the White House some of the world’s great scientists to announce a huge milestone for humanity. Two rival efforts, one led by the National Institutes of Health and the other by a private company, had completed the first draft of the human genome map. “Without a doubt,” <a href="https://www.genome.gov/10001356/june-2000-white-house-event/" target="_blank" rel="noopener">Clinton said</a>, “this is the most important, most <strong>wondrous</strong> (奇妙的) map ever produced by humankind.”</p><p><u>Fast forward 16 years</u> (快进16年). With little public fanfare, geneticists have reached another super important milestone. While the human genome map gave us the ability to <em>read</em> all three billion letters of our genetic code, we now have the power to <em>edit</em> the human genome as well. </p><p>Scientists have now launched early-stage clinical trials with these new genome-editing tools. These tools are generating a ton of optimism for diagnosing, treating, and curing human disease. Even before researchers successfully complete clinical trials in humans, genome editing will be put to good use in modifying plants and animals—all of which holds big promise for our foundation’s work to alleviate hunger and improve health in poor countries.</p><p>Although I am excited about these advances, we have to approach them with caution. It’s one thing to reprogram the code that runs our computers. Reprogramming the code that runs our species is a very different thing altogether.</p><p>As with any powerful new technology, genome editing will be attractive to people with both good intentions (reducing human suffering) and bad (causing it). Even just with <strong>respect to</strong> (关于) the former, the ethical questions are enormous.</p><p>I loved <a href="https://www.ted.com/talks/siddhartha_mukherjee_soon_we_ll_cure_diseases_with_a_cell_not_a_pill?language=en#t-672063" target="_blank" rel="noopener">Mukherjee’s 2015 TED Talk</a> and his brilliant book about cancer, <em>The Emperor of All Maladies</em>, which won the Pulitzer Prize in 2011. It must really tick off full-time writers that a doctor can win a Pulitzer in his spare time!</p><p>In <em>The Gene</em>, Mukherjee once again shows his gift for making hard science easily accessible. He wrote this book for general audiences, because he knows that it’s not good enough for scientists alone to debate the huge ethical questions that their discoveries provoke. As he emphasized repeatedly in our conversation, determining the proper rules and <strong>boundaries</strong> (边界) for these technologies requires broad public discussion, debate, and consensus (共识).</p><p>Mukherjee makes <em>The Gene</em> accessible in a variety of ways. Like all good science writers, he offers creative metaphors to explain difficult concepts. He is also a beautiful storyteller. He uses that talent to weave in his own family’s history of mental illness, which I found incredibly touching.  And through stories, he introduces us to the key pioneers in genetics—from Gregor Mendel, who repeatedly failed the exam to teach high school science but later ushered in the modern science of genetics, to Francis Collins, the <strong>devout</strong> (虔诚的) Christian motorcycle enthusiast who brilliantly led the public effort to sequence the human genome.  </p><p>Within 10 years, it will be possible for clinicians to use genome editing to help people with diseases caused by faulty genes. This form of therapy could be highly effective, but it would mean that children born from these sperm or eggs <em>would <u>pass along</u> (传递) their genetically modified genomes to their own children</em>—altering the human germ line and crossing an ethical Rubicon.</p><p>“By the time this book is published … the first ‘post-genomic’ human might be on his or her way to being born,” Mukherjee reports. And he is right! He Jiankui, a Chinese scientist who had announced the world first genome editing baby had born.</p><p>As I read <em>The Gene</em>, I <u><strong>came up with</strong></u> (提出，想出) long lists of ethical questions of my own. For example, what if a prenatal test told you with a high degree of certainty that your child will have an IQ of 80 unless you do this little edit? What if a private IVF clinic offered its patients a little enhancement to their fertilized embryos to boost children’s likely IQ from high to very high? This could <strong>exacerbate</strong> (恶化，加剧) inequities that are already a big problem—especially if this technology is available only for wealthy people. What about a series of edits that could dramatically reduce the incidence of disorders on the <u>autism spectrum</u> (自闭症)? Wouldn’t that mean reducing human diversity in dangerous ways—perhaps even eliminating the possibility of a future Alan Turing, the brilliant computer pioneer (开拓者，先锋) who helped break Germany’s Enigma code during World War II?</p><p>Technology is <strong>amoral</strong> (与道德无关的，无从区分是非的). It is neither good nor bad. It is up to all of us—not just scientists, government officials, and people fortunate enough to lead foundations—to <strong>think hard</strong> (认真思考) about these new technologies and how they should and should not be used. Reading <em>The Gene</em> will get you the point where you can actively engage in that debate.</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-The Gene An Intimate History
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="gene" scheme="https://steven-shixq.github.io/tags/gene/"/>
    
      <category term="基因" scheme="https://steven-shixq.github.io/tags/%E5%9F%BA%E5%9B%A0/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻17</title>
    <link href="https://steven-shixq.github.io/2020/02/23/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB17/"/>
    <id>https://steven-shixq.github.io/2020/02/23/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB17/</id>
    <published>2020-02-23T02:32:55.000Z</published>
    <updated>2020-02-28T07:22:14.312Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><a href="https://www.gatesnotes.com/Books/Hillbilly-Elegy" target="_blank" rel="noopener">From coal country to Yale</a></p></blockquote><p><em>Hillbilly Elegy</em>—J.D. Vance</p><p>中文书名《乡下人的悲歌》</p><p>Vance grew up in Appalachian Ohio and Kentucky, in poor white communities where family <strong>strife</strong> (冲突) was a <strong>constant</strong> (经常的), work was not, and even many <strong>pawnshops</strong> (当铺) had closed their doors.</p><p>So imagine what it was like for him when he managed—through the high expectations of his grandparents, the discipline of the Marines, and his own big brain—to get himself into Yale Law School. Suddenly he began experiencing life not as the “abandoned son of a man I hardly knew and a woman I wished I didn’t”(书中作者的爸妈) but as a highly <strong>sought-after</strong> (广受欢迎的) member of one of America’s most elite institutions. He was a stranger in a strange land.</p><p>“Two years earlier, I had applied to dozens of places in the hope of landing a well-paying job after college but was rebuffed every time,” Vance writes. “After only a year at Yale Law, my classmates and I were being handed six-figure salaries by men who had argued before the United States Supreme Court.”</p><p>Through deeply personal stories like these, <em>Hillbilly Elegy</em> sheds light our nation’s vast cultural divide—a topic that has become far more relevant than Vance ever dreamed when he was writing this book.</p><p>The fact that <em>Hillbilly Elegy</em> is not just an important read but also a great one came as a bit of a surprise to me. There are no big <strong>cliffhangers</strong> (扣人心弦的)and no “how will it end?”-type mystery propelling this story. We know from the <strong>outset</strong> (开始) that the <strong>narrator</strong> (叙述者)<u>survives his chaotic</u>, mostly fatherless (没有父亲的) childhood and lands at Yale Law School.</p><p>I think the book was such a good read in part because of Vance’s bravery. Vance learns early in life that there is “no greater disloyalty than class betrayal.” Yet by writing this book he risks being called a traitor by portraying a culture that, in his view, is suffering from self-inflicted wounds.</p><p>An element that makes this book so readable is the cast of characters. My favorites are Vance’s grandparents, Mamaw and Papaw. In a scene that takes place before Vance was born, Mamaw finally gets <strong><u>fed up with</u></strong> (受够了，厌恶) her husband’s violent <strong>drunkenness</strong> (醉酒) and tells him that she’ll kill him if he ever comes home drunk again. When Papaw ignores her, “Mamaw, never one to tell a lie, calmly retrieved a <u>gasoline canister</u> (汽油罐) from the <strong>garage</strong> (车库), poured it all over her husband, <u>lit a match</u> (点燃火柴), and dropped it on his chest…. <strong>Miraculously</strong> (奇迹般地), Papaw survived the episode (插曲，经历) with only minor burns.”</p><p>While lighting your husband on fire is nothing to admire, Mamaw is usually <u>tough in the right way</u> (以正确的方式强硬). Vance can’t count the number of times he had to flee (逃跑，逃走) to Mamaw’s house to escape his mother’s dysfunction. “Mamaw was the best thing that ever happened to me,” he writes. She spent the last two decades of her life “showing me the value of love and stability.”</p><p>Another <u>guardian angel</u> (守护天使) is Vance’s half-sister Lindsay, who is five years older. “During explosive fights between Mom and whatever man she let into our home, it was Lindsay who withdrew to her bedroom to place a rescue call to Mamaw and Papaw. She fed me when I was hungry, changed my diaper when no one else did, and dragged me everywhere with her—even though … I weighed nearly as much as she did.” Papaw once called Lindsay “the one true adult in the house.”</p><p>To Vance’s credit, he doesn’t pretend to be a policy expert and doesn’t offer simplistic solutions. But of course as I read the book I thought about what can be done to empower and create opportunity in poor communities, rural and urban alike. The key take-home for me is that whatever else we do to address the complex realities of poverty in America, we must find more ways to surround children with high expectations and as many loving and caring adults as possible (我们必须找到更多的方法，使孩子们处在高期待的环境中，让尽可能多的有爱心的成年人陪伴在孩子们身边). </p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-From coal country to Yale
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="回忆录" scheme="https://steven-shixq.github.io/tags/%E5%9B%9E%E5%BF%86%E5%BD%95/"/>
    
      <category term="自传" scheme="https://steven-shixq.github.io/tags/%E8%87%AA%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>R语言学习笔记2</title>
    <link href="https://steven-shixq.github.io/2020/02/22/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/"/>
    <id>https://steven-shixq.github.io/2020/02/22/R%E8%AF%AD%E8%A8%80%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B02/</id>
    <published>2020-02-22T15:19:24.000Z</published>
    <updated>2020-02-29T13:21:42.643Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>R语言教程-R数据类型与运算1</strong></p><h2 id="3-常亮与变量"><a href="#3-常亮与变量" class="headerlink" title="3. 常亮与变量"></a>3. 常亮与变量</h2><h3 id="3-1-常量"><a href="#3-1-常量" class="headerlink" title="3.1 常量"></a>3.1 常量</h3><p>R语言基本的数据类型有数值型， 逻辑型（TRUE, FALSE），文本（字符串）。 支持缺失值，有专门的复数类型。</p><p>数值型常量包括整型、单精度、双精度等，一般不需要区分。写法如<code>123</code>, <code>123.45</code>, <code>-123.45</code>, <code>-0.012</code>, <code>1.23E2</code>, <code>-1.2E-2</code>等。 为了表示<code>123</code>是整型，可以写成<code>123L</code>。</p><p>字符型常量用两个双撇号或两个单撇号包围，如<code>&quot;Li Ming&quot;</code>或<code>&#39;Li Ming&#39;</code>。 字符型支持中文，如<code>&quot;李明&quot;</code>或<code>&#39;李明&#39;</code>。 国内的中文编码主要有GBK编码和UTF-8编码， 有时会遇到编码错误造成乱码的问题，MS Windows下R程序一般用GBK编码，但是RStudio软件采用UTF-8编码。 在R软件内字符串一般用UTF-8编码保存。</p><p>逻辑型常量只有TRUE和FALSE。</p><p>缺失值用NA表示。统计计算中经常会遇到缺失值，表示记录丢失、因为错误而不能用、节假日没有数据等。 除了数值型，逻辑型和字符型也可以有缺失值， 而且字符型的空白值不会自动辨识为缺失值，需要自己规定。 R支持特殊的Inf值，这是实数型值，表示正无穷大，不算缺失值。</p><p>复数常量写法如<code>2.2 + 3.5i</code>, <code>1i</code>等。</p><h3 id="3-2-变量"><a href="#3-2-变量" class="headerlink" title="3.2 变量"></a>3.2 变量</h3><p>程序语言中的变量用来保存输入的值或者计算得到的值。 在R中，变量可以保存所有的数据类型， 比如标量、向量、矩阵、数据框、函数等。</p><p>变量都有变量名，R变量名必须以字母、数字、下划线和句点组成， 变量名的第一个字符不能取为数字。 在中文环境下，汉字也可以作为变量名的合法字符使用。 变量名是区分大小写的， <code>y</code>和<code>Y</code>是两个不同的变量名。</p><p>赋值：<code>&lt;-</code>或<code>=</code>，一般用第一种形式</p><p>R的变量没有固定的类型， 给已有变量赋值为新的类型， 该变量就变成新的类型， 但一般应避免这样的行为。 R是“动态类型”语言， 赋值实际上是“绑定”（binding）， 即将一个变量名与一个存储地址联系在一起， 同一个存储地址可以有多个变量名与其联系。</p><h3 id="3-3-R数据类型"><a href="#3-3-R数据类型" class="headerlink" title="3.3 R数据类型"></a>3.3 R数据类型</h3><p>R语言数据结构包括向量，矩阵和数据框，多维数组， 列表，对象等。数据中元素、行、列还可以用名字访问。 最基本的是向量类型。 向量类型数据的访问方式也是其他数据类型访问方式的基础。<br><a href="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/R%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" data-fancybox="group" data-caption="R中的数据结构" class="fancybox"><img alt="R中的数据结构" title="R中的数据结构" data-src="https://cdn.jsdelivr.net/gh/Steven-Shixq/imagerepository/img/R%E4%B8%AD%E7%9A%84%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.png" class="lazyload"></a></p><h2 id="4-数值型向量及其运算"><a href="#4-数值型向量及其运算" class="headerlink" title="4. 数值型向量及其运算"></a>4. 数值型向量及其运算</h2><h3 id="4-1-数值型向量"><a href="#4-1-数值型向量" class="headerlink" title="4.1 数值型向量"></a>4.1 数值型向量</h3><p><strong>向量</strong>是将若干个<u>基础类型相同的值</u>存储在一起， 各个元素可以按序号访问。 如果将若干个数值存储在一起可以用序号访问， 就叫做一个数值型向量。</p><p>用<code>c()</code>函数把多个元素或向量组合成一个向量。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">1</span>:<span class="number">3</span>, <span class="number">10</span>:<span class="number">13</span>)</span><br><span class="line">x</span><br><span class="line">x1 &lt;- c(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">x2 &lt;- c(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">x &lt;- c(x1, x2)</span><br><span class="line">x</span><br></pre></td></tr></table></figure></div><p>10:13这样的写法表示从10到13的整数组成的向量。<br>显示结果中，每行显示的行首会有方括号和数字序号， 代表该行显示的第一个向量元素的下标。<br><code>length(x)</code>可以求x的长度。<code>numeric(10)</code>会生成元素为10个零的向量。</p><h3 id="4-2-向量运算"><a href="#4-2-向量运算" class="headerlink" title="4.2 向量运算"></a>4.2 向量运算</h3><p><strong>标量和标量运算</strong><br>单个数值称为<code>标量</code>， R没有单独的标量类型， 标量实际是长度为1的向量。<br>用<code>%/%</code>表示整除，用<code>%%</code>表示求余。</p><p><strong>向量与标量的运算</strong><br>一个向量乘以一个标量， 就是线性代数中的数乘运算。</p><p>四则运算时如果有缺失值，缺失元素参加的运算相应结果元素仍缺失。</p><p><strong>等长向量运算</strong><br>等长向量的运算为对应元素两两运算。<br>两个等长向量的加、减运算就是线性代数中两个向量的加、减运算。</p><p><strong>不等长向量的运算</strong><br>两个不等长向量的四则运算， 如果其长度为倍数关系，规则是每次从头重复利用短的一个。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x1 &lt;- c(<span class="number">10</span>, <span class="number">20</span>)</span><br><span class="line">x2 &lt;- c(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>)</span><br><span class="line">x1 + x2</span><br><span class="line">x1 * x2</span><br></pre></td></tr></table></figure></div><p>不仅是四则运算，R中有两个或多个向量按照元素一一对应参与某种运算或函数调用时， 如果向量长度不同，一般都采用这样的规则。</p><p>如果两个向量的长度不是倍数关系，会给出警告信息。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">c(<span class="number">1</span>,<span class="number">2</span>) + c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div><h3 id="4-3-向量函数"><a href="#4-3-向量函数" class="headerlink" title="4.3 向量函数"></a>4.3 向量函数</h3><p><strong>向量化的函数</strong><br>R中的函数一般都是向量化的: 在R中， 如果普通的一元函数以向量为自变量，一般会对每个元素计算。 这样的函数包括sqrt, log10, log, exp, sin, cos, tan等许多。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sqrt(c(<span class="number">1</span>, <span class="number">4</span>, <span class="number">6.25</span>))</span><br></pre></td></tr></table></figure></div><p>运行命令<code>help.start()</code>,可查看这些基础的数学函数的列表。</p><p>如果自己编写的函数没有考虑向量化问题， 可以用<code>Vectorize()</code>函数将其转换成向量化版本。</p><p><strong>排序函数</strong><br>sort(x)返回排序结果。 rev(x)返回把各元素排列次序反转后的结果。 order(x)返回排序用的下标。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">33</span>, <span class="number">55</span>, <span class="number">11</span>)</span><br><span class="line">sort(x)</span><br><span class="line">rev(sort(x))</span><br><span class="line">order(x)</span><br><span class="line">x[order(x)]</span><br></pre></td></tr></table></figure></div><p><strong>统计函数</strong></p><p><code>sum</code>(求和), <code>mean</code>(求平均值), <code>var</code>(求样本方差), <code>sd</code>(求样本标准差), <code>min</code>(求最小值), <code>max</code>(求最大值), <code>range</code>(求最小值和最大值)等函数称为统计函数， 把输入向量看作样本，计算样本统计量。 <code>prod</code>求所有元素的乘积。</p><p><code>cumsum</code>和<code>cumprod</code>计算累加和累乘积。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">cumsum(<span class="number">1</span>:<span class="number">5</span>)</span><br><span class="line">cumprod(<span class="number">1</span>:<span class="number">5</span>)</span><br></pre></td></tr></table></figure></div><p> 在命令行界面用“?函数名”的方法查询函数的帮助文档</p><p><strong>生成规则序列的函数</strong></p><p>seq函数是冒号运算符的推广。 比如，seq(5)等同于1:5。 seq(2,5)等同于2:5。 seq(11, 15, by=2)产生11,13,15。 seq(0, 2*pi, length.out=100)产生从0到的等间隔序列， 序列长度指定为100。</p><p>seq(to=5, from=2)仍等同于2:5。</p><p><code>rep()</code>函数用来产生重复数值。 为了产生一个初值为零的长度为n的向量， 用<code>x &lt;- rep(0, n)</code>。 <code>rep(c(1,3), 2)</code>把第一个自变量重复两次， 结果相当于<code>c(1,3,1,3)</code>。<br><code>rep(c(1,3), c(2,4))</code>则需要利用R的一般向量化规则， 把第一自变量的第一个元素1按照第二自变量中第一个元素2的次数重复， 把第一自变量中第二个元素3按照第二自变量中第二个元素4的次数重复， 结果相当于<code>c(1,1,3,3,3,3)</code>。</p><p>如果希望重复完一个元素后再重复另一元素，用<code>each=</code>选项， 比如<code>rep(c(1,3), each=2)</code>结果相当于<code>c(1,1,3,3)</code>。</p><p><strong>复数向量</strong><br>复数常数表示如<code>3.5+2.4i</code>, <code>1i</code>。 用函数<code>complex()</code>生成复数向量， 指定实部和虚部。 如<code>complex(real = c(1,0,-1,0), imaginary = c(0,1,0,-1))</code>相当于<code>c(1+0i, 1i, -1+0i, -1i)</code>。</p><p><strong>练习</strong></p><ol><li><p>示1到100的整数的平方根和立方根（提示：立方根就是三分之一次方）。</p></li><li><p>设有10个人的小测验成绩为:<br>77,60,91,73,85,82,35,100,66,75</p><ol><li>把这10个成绩存入变量x;</li><li>从小到大排序；</li><li>计算<code>order(x)</code>，解释<code>order(x)</code>结果中第3项代表的意义。</li><li>计算这些成绩的平均值、标准差、最小值、最大值、中位数。</li></ol></li><li><p>生成区间上等间隔的100个格子点存入变量x中。</p></li></ol><h2 id="5-逻辑型向量及其运算"><a href="#5-逻辑型向量及其运算" class="headerlink" title="5. 逻辑型向量及其运算"></a>5. 逻辑型向量及其运算</h2><h3 id="5-1-逻辑型向量与比较运算"><a href="#5-1-逻辑型向量与比较运算" class="headerlink" title="5.1 逻辑型向量与比较运算"></a>5.1 逻辑型向量与比较运算</h3><p>逻辑型是R的基本数据类型之一，只有两个值TRUE和FALSE, 缺失时为NA。逻辑值一般产生自比较<br>向量比较结果为逻辑型向量。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">c(<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>) &gt; <span class="number">2</span></span><br><span class="line">(<span class="number">1</span>:<span class="number">4</span>) &gt;= (<span class="number">4</span>:<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><p>从例子可以看出，向量比较也遵从R的向量间运算的一般规则： 向量与标量的运算是向量每个元素与标量都分别运算一次， 等长向量的运算时对应元素的运算， 不等长但长度为倍数关系的向量运算是把短的从头重复利用。</p><p>与NA比较产生NA，为了判断向量每个元素是否NA， 用is.na()函数，如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">is.na(c(<span class="number">1</span>,<span class="literal">NA</span>, <span class="number">3</span>) &gt; <span class="number">2</span>)</span><br></pre></td></tr></table></figure></div><p>用is.finite()判断向量每个元素是否Inf值。<br>%in%是比较特殊的比较， x %in% y的运算把向量y看成集合， 运算结果是一个逻辑型向量， 第个元素的值为x的第元素是否属于y的逻辑型值。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">c(<span class="number">1</span>,<span class="number">3</span>,<span class="literal">NA</span>) %<span class="keyword">in</span>% c(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="literal">NA</span>)</span><br></pre></td></tr></table></figure></div><p>函数match(x, y)起到和x %in% y运算类似的作用， 但是其返回结果不是找到与否， 而是对x的每个元素， 找到其在y中首次出现的下标，找不到时取缺失值，如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">match(c(<span class="number">1</span>, <span class="number">3</span>), c(<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">3</span>))</span><br></pre></td></tr></table></figure></div><h3 id="5-2"><a href="#5-2" class="headerlink" title="5.2"></a>5.2</h3><p>为了表达如“而且”, “或者”之类的复合比较， 需要使用逻辑运算把两个比较连接起来。 逻辑运算符为<code>&amp;</code>, <code>|</code>和<code>!</code>, 分别表示“同时成立”、“两者至少其一成立”、“条件的反面”。 比如，设<code>age&lt;=3</code>表示婴儿，<code>sex==&#39;女&#39;</code>表示女性，则 <code>age&lt;=3 &amp; sex==&#39;女&#39;</code>表示女婴, <code>age&lt;=3 | sex==&#39;女&#39;</code>表示婴儿或妇女, <code>!(age&lt;=3 | sex==&#39;女&#39;)</code>表示既非婴儿也非妇女。 为了确定运算的先后次序可以用圆括号<code>()</code>指定。</p><p><code>&amp;&amp;</code>和<code>||</code>分别为短路的标量逻辑与和短路的标量逻辑或， 仅对两个标量进行运算，如果有向量也仅使用第一个元素。</p><h3 id="5-3-逻辑运算函数"><a href="#5-3-逻辑运算函数" class="headerlink" title="5.3 逻辑运算函数"></a>5.3 逻辑运算函数</h3><p>函数which()返回真值对应的所有下标，如\</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">which(c(<span class="literal">FALSE</span>, <span class="literal">TRUE</span>, <span class="literal">TRUE</span>, <span class="literal">FALSE</span>, <span class="literal">NA</span>))</span><br><span class="line">which((<span class="number">11</span>:<span class="number">15</span>) &gt; <span class="number">12</span>)</span><br></pre></td></tr></table></figure></div><p>函数all.equal()与identical()类似， 但是在比较数值型时不区分整数型与实数型， 而且相同时返回标量TRUE， 但是不同时会返回一个说明有何不同的字符串。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">all.equal(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>), c(<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NA</span>))</span><br></pre></td></tr></table></figure></div><p>函数duplicated()返回每个元素是否为重复值的结果，用函数unique()可以返回去掉重复值的结果.如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">duplicated(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="literal">NA</span>,<span class="number">4</span>,<span class="literal">NA</span>))</span><br><span class="line">unique(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="literal">NA</span>,<span class="number">4</span>,<span class="literal">NA</span>))</span><br></pre></td></tr></table></figure></div><h2 id="6-字符型数据及其处理"><a href="#6-字符型数据及其处理" class="headerlink" title="6. 字符型数据及其处理"></a>6. 字符型数据及其处理</h2><p><strong>字符型向量</strong><br>字符型向量是元素为字符串的向量。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">s1 &lt;- c(&#39;abc&#39;, &#39;&#39;, &#39;a cat&#39;, NA, &#39;李明&#39;)</span><br></pre></td></tr></table></figure></div><p>注意空字符串并不能自动认为是缺失值， 字符型的缺失值仍用NA表示。</p><p><strong>一些函数</strong></p><ol><li>针对字符型数据最常用的R函数是paste()函数。 paste()用来连接两个字符型向量， 元素一一对应连接， 默认用空格连接。</li></ol><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 一下两种结果相等</span></span><br><span class="line">paste(c(<span class="string">"ab"</span>, <span class="string">"cd"</span>), c(<span class="string">"ef"</span>, <span class="string">"gh"</span>))</span><br><span class="line">c(<span class="string">"ab ef"</span>, <span class="string">"cd gh"</span>)</span><br></pre></td></tr></table></figure></div><p><code>paste()</code>在连接两个字符型向量时采用R的一般向量间运算规则， 而且可以自动把数值型向量转换为字符型向量。 可以作一对多连接， 如<code>paste(&quot;x&quot;, 1:3)</code>结果相当于<code>c(&quot;x 1&quot;, &quot;x 2&quot;, &quot;x 3&quot;)</code>。</p><p>用<code>sep=</code>指定分隔符， 如<code>paste(&quot;x&quot;, 1:3, sep=&quot;&quot;)</code>结果相当于<code>c(&quot;x1&quot;, &quot;x2&quot;, &quot;x3&quot;)</code>。<br>使用collapse=参数可以把字符型向量的各个元素连接成一个单一的字符串, 如paste(c(“a”, “b”, “c”), collapse=””)结果相当于”abc”。</p><ol start="2"><li><p><code>toupper()</code>函数把字符型向量内容转为大写， <code>tolower()</code>函数转为小写。<br>这两个函数可以用于不区分大小写的比较， 比如，不论x的值是’JAN’, ‘Jan’还是’jan’， toupper(x)==’JAN’的结果都为TRUE。</p></li><li><p>用nchar(x, type=’bytes’)计算字符型向量x中每个字符串的以字节为单位的长度，这一点对中英文是有差别的， 中文通常一个汉字占两个字节，英文字母、数字、标点占一个字节。 用nchar(x, type=’chars’)计算字符型向量x中每个字符串的以字符个数为单位的长度，这时一个汉字算一个单位。</p></li><li><p>substr(x, start, stop)从字符串x中取出从第start个到第stop个的子串，不同于python（计数从0开始），R的技术从1开始。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">substr(<span class="string">'JAN07'</span>, <span class="number">1</span>, <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 如果x是一个字符型向量，substr将对每个元素取子串。</span></span><br><span class="line">substr(c(<span class="string">'JAN07'</span>, <span class="string">'MAR66'</span>), <span class="number">1</span>, <span class="number">3</span>)</span><br></pre></td></tr></table></figure></div><p>用substring(x, start)可以从字符串x中取出从第start个到末尾的子串。</p></li></ol><p><strong>类型转换</strong></p><p>用as.numeric()把内容是数字的字符型值转换为数值，如<br>substr(‘JAN07’, 4, 5) + 2000不能相加，substr取出的值时字符型，不能与数值相加，需要转换为数值</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">as.numeric(substr(<span class="string">'JAN07'</span>, <span class="number">4</span>, <span class="number">5</span>)) + <span class="number">2000</span></span><br><span class="line">substr(c(<span class="string">'JAN07'</span>, <span class="string">'MAR66'</span>),<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">as.numeric(substr(c(<span class="string">'JAN07'</span>, <span class="string">'MAR66'</span>), <span class="number">4</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure></div><p>as.numeric()是向量化的， 可以转换一个向量的每个元素为数值型。</p><p>用as.character()函数把数值型转换为字符型</p><p>为了用指定的格式数值型转换成字符型， 可以使用sprintf()函数， 其用法与C语言的sprintf()函数相似， 只不过是向量化的。例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sprintf(<span class="string">'file%04d.txt'</span>, c(<span class="number">1</span>, <span class="number">99</span>, <span class="number">100</span>))</span><br></pre></td></tr></table></figure></div><p><strong>字符串拆分</strong><br>用strsplit()函数可以把一个字符串按照某种分隔符拆分开，例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- <span class="string">'10,8,7'</span></span><br><span class="line">strsplit(x, <span class="string">','</span>, fixed = <span class="literal">TRUE</span>)[[<span class="number">1</span>]]</span><br><span class="line">as.numeric(strsplit(x,<span class="string">','</span>,fixed = <span class="literal">TRUE</span>)[[<span class="number">1</span>]])</span><br></pre></td></tr></table></figure></div><p><strong>字符串替换功能</strong><br>用gsub()可以替换字符串中的子串， 这样的功能经常用在数据清理中。 比如，把数据中的中文标点改为英文标点， 去掉空格，等等。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- <span class="string">'1, 3; 5'</span></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line">a &lt;- gsub(<span class="string">';'</span>, <span class="string">','</span>, x, fixed=<span class="literal">TRUE</span>)</span><br><span class="line">a</span><br><span class="line"><span class="comment"># 将字符串按逗号分隔分开</span></span><br><span class="line">b &lt;- strsplit(a, <span class="string">","</span>,fixed = <span class="literal">T</span>)[[<span class="number">1</span>]]</span><br><span class="line">b</span><br><span class="line"><span class="comment"># 转化为数值型向量</span></span><br><span class="line">c &lt;- as.numeric(b)</span><br><span class="line">c</span><br></pre></td></tr></table></figure></div><p><strong>正则表达式</strong></p><p>正则表达式(regular expression)是一种匹配某种字符串模式的方法。 用这样的方法，可以从字符串中查找某种模式的出现位置， 替换某种模式，等等。 这样的技术可以用于文本数据的预处理， 比如用网络爬虫下载的大量网页文本数据。 R中支持perl语言格式的正则表达式， grep()和grepl()函数从字符串中查询某个模式， sub()和gsub()替换某模式。 比如， 下面的程序把多于一个空格替换成一个空格</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">gsub(<span class="string">'[[:space:]]+'</span>, <span class="string">' '</span>, <span class="string">'a   cat  in a box'</span>, perl=<span class="literal">TRUE</span>)</span><br></pre></td></tr></table></figure></div><p>后面会有更加详细的介绍。</p><h2 id="7-R向量下标和子集"><a href="#7-R向量下标和子集" class="headerlink" title="7. R向量下标和子集"></a>7. R向量下标和子集</h2><p>变量可归结为名义型、有序型或连续型变量。</p><ul><li><code>名义型变量</code>是没有顺序之分的类别变量。糖尿病类型Diabetes（Type1、Type2）是名义型变量的一例。即使在数据中Type1编码为1而Type2编码为2，这也并不意味着二者是有序的。</li><li><code>有序型变量</code>表示一种顺序关系，而非数量关系。病情Status（poor、improved、excellent）是顺序型变量的一个上佳示例。我们明白，病情为poor（较差）病人的状态不如improved（病情好转）的病人，但并不知道相差多少。</li><li><code>连续型变量</code>可以呈现为某个范围内的任意值，并同时表示了顺序和数量。年龄Age就是一个连续型变量，它能够表示像14.5或22.8这样的值以及其间的其他任意值。</li></ul><p>类别（名义型）变量和有序类别（有序型）变量在R中称为<code>因子（factor）</code>。</p><p><strong>正整数下标</strong></p><p>对向量x, 在后面加方括号和下标可以访问向量的元素和子集。<br>设x &lt;- c(1, 4, 6.25)。 x[2]取出第二个元素； x[2] &lt;- 99修改第二个元素。 x[c(1,3)]取出第1、3号元素； x[c(1,3)] &lt;- c(11, 13)修改第1、3号元素。 下标可重复。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6.25</span>)</span><br><span class="line"><span class="comment"># 下标从1开始计数</span></span><br><span class="line">x[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 修改1,3号元素为11,13</span></span><br><span class="line">x[c(<span class="number">1</span>,<span class="number">3</span>)] &lt;- c(<span class="number">11</span>, <span class="number">13</span>)</span><br><span class="line">print(x)</span><br><span class="line">x[c(<span class="number">1</span>,<span class="number">3</span>,<span class="number">1</span>)]</span><br></pre></td></tr></table></figure></div><p><strong>负整数下标</strong></p><p>负下标表示扣除相应的元素后的子集</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6.25</span>)</span><br><span class="line">x[-<span class="number">2</span>]</span><br><span class="line"><span class="comment">## 1.00 6.25</span></span><br><span class="line">x[-c(<span class="number">1</span>,<span class="number">3</span>)]</span><br><span class="line"><span class="comment">## 4</span></span><br></pre></td></tr></table></figure></div><p>负整数下标不能与正整数下标同时用来从某一向量中取子集， 比如，x[c(1,-2)]没有意义。</p><p><strong>空下标与零下标</strong></p><p>x[]表示取x的全部元素作为子集。 这与x本身不同</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6.25</span>)</span><br><span class="line">x[]</span><br><span class="line">x[] &lt;- <span class="number">999</span></span><br><span class="line">x</span><br><span class="line">x &lt;- c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6.25</span>)</span><br><span class="line">x &lt;- <span class="number">999</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure></div><p><strong>下标超界</strong></p><p>设向量x长度为n, 则使用正整数下标时下标应在1…n中取值。 如果使用大于的下标， 读取时返回缺失值，并不出错。 给超出的下标元素赋值， 则向量自动变长， 中间没有赋值的元素为缺失值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6.25</span>)</span><br><span class="line">x[<span class="number">5</span>]</span><br><span class="line">x</span><br><span class="line">x[<span class="number">5</span>] &lt;- <span class="number">9</span></span><br><span class="line">x</span><br></pre></td></tr></table></figure></div><p>虽然R的语法对下标超界不视作错误， 但是这样的做法往往来自不良的程序思路， 而且对程序效率有影响，所以实际编程中应避免下标超界。</p><p><strong>逻辑下标</strong></p><p>下标可以是与向量等长的逻辑表达式， 一般是关于本向量或者与本向量等长的其它向量的比较结果</p><p>要注意的是，如果逻辑下标中有缺失值， 对应结果也是缺失值。 所以，在用逻辑下标作子集选择时， 一定要考虑到缺失值问题。正确的做法是加上!is.na前提</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">1</span>,<span class="number">4</span>,<span class="number">6.25</span>)</span><br><span class="line">x[x &gt; <span class="number">3</span>]</span><br><span class="line">x &lt;- c(<span class="number">1</span>, <span class="number">4</span>, <span class="number">6.25</span>, <span class="literal">NA</span>)</span><br><span class="line">x[x &gt; <span class="number">2</span>]</span><br><span class="line">x[!is.na(x) &amp; x &gt; <span class="number">2</span>]</span><br></pre></td></tr></table></figure></div><p><strong>which()、which.min()、which.max()函数</strong></p><p>函数which()可以用来找到满足条件的下标,其他两个函数分别找最小与最大值的下标。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="number">3</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">9</span>)</span><br><span class="line">which(x &gt; <span class="number">5</span>)</span><br></pre></td></tr></table></figure></div><p><strong>元素名</strong></p><p>向量可以为每个元素命名。如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages &lt;- c(&quot;李明&quot;&#x3D;30, &quot;张聪&quot;&#x3D;25, &quot;刘颖&quot;&#x3D;28)</span><br></pre></td></tr></table></figure></div><p>或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages &lt;- c(30, 25, 28)</span><br><span class="line">names(ages) &lt;- c(&quot;李明&quot;, &quot;张聪&quot;, &quot;刘颖&quot;)</span><br></pre></td></tr></table></figure></div><p>或</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages &lt;- setNames(c(30, 25, 28), c(&quot;李明&quot;, &quot;张聪&quot;, &quot;刘颖&quot;))</span><br></pre></td></tr></table></figure></div><p>这时可以用元素名或元素名向量作为向量的下标，如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages[&quot;张聪&quot;]</span><br><span class="line">## 张聪 </span><br><span class="line">##   25</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages[c(&quot;李明&quot;, &quot;刘颖&quot;)]</span><br><span class="line">## 李明 刘颖 </span><br><span class="line">##   30   28</span><br></pre></td></tr></table></figure></div><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ages[&quot;张聪&quot;] &lt;- 26</span><br></pre></td></tr></table></figure></div><p>这实际上建立了字符串到数值的映射表。</p><p>用unname(x)返回去掉了元素名的x的副本， 用names(x) &lt;- NULL可以去掉x的元素名。</p><p><strong>练习</strong></p><p>设文件class.csv内容如下:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name,sex,age,height,weight</span><br><span class="line">Alice,F,13,56.5,84</span><br><span class="line">Becka,F,13,65.3,98</span><br><span class="line">Gail,F,14,64.3,90</span><br><span class="line">Karen,F,12,56.3,77</span><br><span class="line">Kathy,F,12,59.8,84.5</span><br><span class="line">Mary,F,15,66.5,112</span><br><span class="line">Sandy,F,11,51.3,50.5</span><br><span class="line">Sharon,F,15,62.5,112.5</span><br><span class="line">Tammy,F,14,62.8,102.5</span><br><span class="line">Alfred,M,14,69,112.5</span><br><span class="line">Duke,M,14,63.5,102.5</span><br><span class="line">Guido,M,15,67,133</span><br><span class="line">James,M,12,57.3,83</span><br><span class="line">Jeffrey,M,13,62.5,84</span><br><span class="line">John,M,12,59,99.5</span><br><span class="line">Philip,M,16,72,150</span><br><span class="line">Robert,M,12,64.8,128</span><br><span class="line">Thomas,M,11,57.5,85</span><br><span class="line">William,M,15,66.5,112</span><br></pre></td></tr></table></figure></div><p>用如下程序可以把上述文件读入为R数据框d.class, 并取出其中的name和age列到变量name和age中：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d.class &lt;- read.csv(<span class="string">'class.csv'</span>, header=<span class="literal">TRUE</span>, stringsAsFactors=<span class="literal">FALSE</span>)</span><br><span class="line">name &lt;- d.class[,<span class="string">'name'</span>]</span><br><span class="line">name</span><br><span class="line">age &lt;- d.class[,<span class="string">'age'</span>]</span><br><span class="line">age</span><br></pre></td></tr></table></figure></div><ol><li><p>求出age中第3, 5, 7号的值；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">age[c(<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>)]</span><br></pre></td></tr></table></figure></div></li><li><p>用变量age, 求出达到15岁及以上的那些值；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">which(age &gt; <span class="number">15</span>)</span><br><span class="line">age[age &gt; <span class="number">15</span>]</span><br></pre></td></tr></table></figure></div></li><li><p>用变量name和age, 求出Mary与James的年龄。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">names(age) &lt;- name</span><br><span class="line">name</span><br><span class="line">age</span><br><span class="line">age[<span class="string">"Mary"</span>]</span><br><span class="line">age[<span class="string">"James"</span>]</span><br></pre></td></tr></table></figure></div></li><li><p>求age中除Mary与James这两人之外的那些人的年龄值，保存到变量age1中。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">age</span><br><span class="line">age1 &lt;- age[-c(<span class="number">6</span>,<span class="number">13</span>)]</span><br><span class="line">age1</span><br></pre></td></tr></table></figure></div></li><li><p>假设向量x长度为n, 其元素是{1,2,…,n}的一个重排。 可以把x看成一个i到x[i]的映射(i在{1,2,…,n}中取值)。 求向量y, 保存了上述映射的逆映射，即： 如果x[i]=j, 则y[j]=i。</p></li></ol><h2 id="8-R数据类型的性质"><a href="#8-R数据类型的性质" class="headerlink" title="8. R数据类型的性质"></a>8. R数据类型的性质</h2><p>在R语言中数值一般看作double, 如果需要明确表明某些数值是整数， 可以在数值后面附加字母L</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">is.double(c(<span class="number">1</span>,-<span class="number">3</span>))</span><br><span class="line">is.integer(c(<span class="number">1L</span>, -<span class="number">3L</span>))</span><br></pre></td></tr></table></figure></div><p>在R的向量类型中， integer类型、double类型、logical类型、character类型、还有complex类型和raw类型称为原子类型(atomic types)， 原子类型的向量中元素都是同一基本类型的。 比如， double型向量的元素都是double或者缺失值。 除了原子类型的向量， 在R语言的定义中， 向量还包括后面要讲到的列表（list）， 列表的元素不需要属于相同的基本类型， 而且列表的元素可以不是单一基本类型元素。 用typeof()函数可以返回向量的类型， 列表返回结果为”list”:</p><p>原子类型的各个元素除了基本类型相同， 还不包含任何嵌套结构，如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">c(<span class="number">1</span>, c(<span class="number">2</span>,<span class="number">3</span>, c(<span class="number">4</span>,<span class="number">5</span>)))</span><br></pre></td></tr></table></figure></div><p>R有一个特殊的NULL类型， 这个类型只有唯一的一个NULL值， 表示不存在。 要把NULL与NA区分开来， NA是有类型的（integer、double、logical、character等), NA表示存在但是未知。 用is.null()函数判断某个变量是否取NULL。</p><p>在用c()函数合并若干元素时， 如果元素基本类型不同， 将统一转换成最复杂的一个，复杂程度从简单到复杂依次为： logical&lt;integer&lt;double&lt;character。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">c(<span class="literal">FALSE</span>, <span class="number">1L</span>, <span class="number">2.5</span>, <span class="string">"3.6"</span>)</span><br></pre></td></tr></table></figure></div><p>不同类型参与要求类型相同的运算时，也会统一转换为最复杂的类型， 如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="literal">TRUE</span> + <span class="number">10</span></span><br></pre></td></tr></table></figure></div><p>不同类型参与要求类型相同的运算时，也会统一转换为最复杂的类型， 如：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">paste(<span class="string">"abc"</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><p><strong>属性</strong></p><p>除了NULL以外， R的变量都可以看成是对象， 都可以有属性。 在R语言中， 属性是把变量看成对象后， 除了其存储内容（如元素）之外的其它附加信息， 如维数、类属等。 对象x的所有属性可以用attributes()读取， 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- table(c(<span class="number">1</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>)); </span><br><span class="line">print(x)</span><br><span class="line">attributes(x)</span><br></pre></td></tr></table></figure></div><p>用print()函数可以显示对象内容。 如果内容很多， 显示行数可能也很多。 用str()函数可以显示对象的类型和主要结构及典型内容。例如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">s &lt;- <span class="number">101</span>:<span class="number">200</span></span><br><span class="line">attr(s,<span class="string">'author'</span>) &lt;- <span class="string">'李小明'</span></span><br><span class="line">attr(s,<span class="string">'date'</span>) &lt;- <span class="string">'2016-09-12'</span></span><br><span class="line">str(s)</span><br></pre></td></tr></table></figure></div><p>str函数<br>即structure，紧凑的显示对象内部结构，即对象里有什么。</p><h2 id="9-R日期时间"><a href="#9-R日期时间" class="headerlink" title="9. R日期时间"></a>9. R日期时间</h2><p>主要为lubridate()函数的使用</p><blockquote><p>详细讲解：<a href="http://www.math.pku.edu.cn/teachers/lidf/docs/Rbook/html/_Rbook/prog-type-date.html" target="_blank" rel="noopener">R日期时间</a></p></blockquote><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(lubridate)</span><br><span class="line"><span class="comment"># 函数lubridate::today()返回当前日期</span></span><br><span class="line">today()</span><br><span class="line"><span class="comment"># 函数lubridate::now()返回当前日期时间：</span></span><br><span class="line">now()</span><br><span class="line"><span class="comment"># </span></span><br><span class="line">ymd(c(<span class="string">"1998-3-10"</span>, <span class="string">"2018-01-17"</span>, <span class="string">"18-1-17"</span>))</span><br></pre></td></tr></table></figure></div><p>lubridate包的如下函数可以取出日期型或日期时间型数据中的组成部分：</p><ul><li><code>year()</code>取出年</li><li><code>month()</code>取出月份数值</li><li><code>mday()</code>取出日数值</li><li><code>yday()</code>取出日期在一年中的序号，元旦为1</li><li><code>wday()</code>取出日期在一个星期内的序号， 但是一个星期从星期天开始， 星期天为1,星期一为2，星期六为7。</li><li><code>hour()</code>取出小时</li><li><code>minute()</code>取出分钟</li><li><code>second()</code>取出秒</li></ul><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 取出月份</span></span><br><span class="line">month(as.POSIXct(<span class="string">"2018-1-17 13:15:40"</span>))</span><br><span class="line"><span class="comment"># 取出日</span></span><br><span class="line">mday(as.POSIXct(<span class="string">"2018-1-17 13:15:40"</span>))</span><br></pre></td></tr></table></figure></div><h2 id="10-R因子类型"><a href="#10-R因子类型" class="headerlink" title="10 R因子类型"></a>10 R因子类型</h2><h3 id="10-1-因子"><a href="#10-1-因子" class="headerlink" title="10.1 因子"></a>10.1 因子</h3><p>R中用因子代表数据中分类变量, 如性别、省份、职业。 有序因子代表有序量度，如打分结果，疾病严重程度等。</p><p>用factor()函数把字符型向量转换成因子</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="string">"男"</span>, <span class="string">"女"</span>, <span class="string">"男"</span>, <span class="string">"男"</span>,  <span class="string">"女"</span>)</span><br><span class="line">sex &lt;- factor(x)</span><br><span class="line">sex</span><br><span class="line"><span class="comment"># 查看属性</span></span><br><span class="line">attributes(sex)</span><br></pre></td></tr></table></figure></div><p>因子有class属性，取值为”factor”， 还有一个levels(水平值)属性， 此属性可以用levels()函数访问</p><p>事实上， <code>read.csv()</code>函数的默认操作会把输入文件的字符型列自动转换成因子， 这对于性别、职业、地名这样的列是合适的， 但是对于姓名、日期、详细地址这样的列则不合适。 所以，在<code>read.csv()</code>调用中经常加选项<code>stringsAsFactors=FALSE</code>选项禁止这样的自动转换，还可以用<code>colClasses</code>选项逐个指定每列的类型。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 把因子转换为纯粹的整数值</span></span><br><span class="line">as.numeric(sex)</span><br><span class="line"><span class="comment"># 把因子转换成原来的字符型</span></span><br><span class="line">as.character(sex)</span><br></pre></td></tr></table></figure></div><p>为了对因子执行字符型操作（如取子串）， 保险的做法是先用as.character()函数强制转换为字符型。</p><p>factor()函数的一般形式为：</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">factor(x, levels = sort(unique(x), na.last = <span class="literal">TRUE</span>), </span><br><span class="line">       labels, exclude = <span class="literal">NA</span>, ordered = <span class="literal">FALSE</span>)</span><br></pre></td></tr></table></figure></div><ul><li><code>levels</code>自行指定各水平值, 不指定时由x的不同值来求得。</li><li><code>labels</code>指定各水平的标签, 不指定时用各水平值的对应字符串。</li><li><code>exclude</code>选项指定要转换为缺失值(NA)的元素值集合。</li><li><code>ordered</code>取真值时表示因子水平是有次序的(按编码次序)。</li></ul><p>在使用factor()函数定义因子时， 如果知道自变量元素的所有可能取值， 应尽可能使用levels=参数指定这些不同可能取值， 这样， 即使某个取值没有出现， 此变量代表的含义和频数信息也是完整的。 自己指定levels=的另一好处是可以按正确的次序显示因子的分类统计值。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">li1 &lt;- factor(c(<span class="string">'男'</span>, <span class="string">'女'</span>), levels=c(<span class="string">'男'</span>, <span class="string">'女'</span>))</span><br><span class="line">li2 &lt;- factor(c(<span class="string">'男'</span>, <span class="string">'男'</span>), levels=c(<span class="string">'男'</span>, <span class="string">'女'</span>))</span><br><span class="line"><span class="comment"># 这种合并方法会出错，结果不在是因子</span></span><br><span class="line">c(li1, li2)</span><br><span class="line"><span class="comment"># 恢复成字符型后合并， 然后再转换为因子。 在合并两个数据框时也存在这样的问题。</span></span><br><span class="line">factor(c(as.character(li1), as.character(li2)))</span><br><span class="line">print(levels(factor(<span class="string">"------"</span>)))</span><br><span class="line">attributes(li1)</span><br><span class="line">print(<span class="string">"------"</span>)</span><br><span class="line">levels(li1)</span><br></pre></td></tr></table></figure></div><h3 id="10-2-table-函数"><a href="#10-2-table-函数" class="headerlink" title="10.2 table()函数"></a>10.2 <code>table()</code>函数</h3><p>用table()函数统计因子各水平的出现次数（称为频数或频率）。 也可以对一般的向量统计每个不同元素的出现次数。 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">x &lt;- c(<span class="string">"男"</span>, <span class="string">"女"</span>, <span class="string">"男"</span>, <span class="string">"男"</span>,  <span class="string">"女"</span>)</span><br><span class="line">sex &lt;- factor(x)</span><br><span class="line">table(sex)</span><br></pre></td></tr></table></figure></div><h3 id="10-3-tapply-函数"><a href="#10-3-tapply-函数" class="headerlink" title="10.3 tapply()函数"></a>10.3 <code>tapply()</code>函数</h3><p>可以按照因子分组然后每组计算另一变量的概括统计。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sex &lt;- factor(c(<span class="string">"男"</span>, <span class="string">"女"</span>, <span class="string">"男"</span>, <span class="string">"男"</span>,  <span class="string">"女"</span>))</span><br><span class="line"><span class="comment"># h与sex等长</span></span><br><span class="line">h &lt;- c(<span class="number">165</span>, <span class="number">170</span>, <span class="number">168</span>, <span class="number">172</span>, <span class="number">159</span>)</span><br><span class="line"><span class="comment"># 按照sex分组，然后统计h变量的Mean值</span></span><br><span class="line">tapply(h, sex, mean)</span><br></pre></td></tr></table></figure></div><h3 id="10-4-forcats包的因子函数"><a href="#10-4-forcats包的因子函数" class="headerlink" title="10.4 forcats包的因子函数"></a>10.4 forcats包的因子函数</h3><ul><li>tapply()函数可以按照因子分组然后每组计算另一变量的概括统计。</li><li>R语言中set.seed()作用是设定生成随机数的种子，种子是为了让结果具有重复性，重现结果。如果不设定种子，生成的随机数无法重现。如set.seed(1),中的1知识一个标记符号</li><li>round函数用于舍入到最接近的整数。<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line"><span class="keyword">library</span>(forcats)</span><br><span class="line">set.seed(<span class="number">1</span>)</span><br><span class="line">fac &lt;- sample(c(<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>), <span class="number">30</span>, replace = <span class="literal">TRUE</span>)</span><br><span class="line">fac &lt;- factor(fac, levels = c(<span class="string">"red"</span>, <span class="string">"green"</span>, <span class="string">"blue"</span>))</span><br><span class="line">x &lt;- round(<span class="number">100</span>*(<span class="number">10</span>+rt(<span class="number">30</span>,<span class="number">2</span>)))</span><br><span class="line">res1 &lt;- tapply(x,fac,sd);res1</span><br><span class="line">barplot(res1)</span><br></pre></td></tr></table></figure></div>如果希望按照统计量次序对因子排序， 可以用forcats::fct_reorder()函数<div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">fac2 &lt;- fct_reorder(fac, x, sd)</span><br><span class="line">res2 &lt;- tapply(x, fac2, sd);barplot(res2)</span><br></pre></td></tr></table></figure></div></li></ul><p>有时在因子水平数较多时仅想将特定的一个或几个水平次序放到因子水平最前面， 可以用forcats::fct_relevel()函数</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">levels(fac)</span><br><span class="line">fac3 &lt;- fct_relevel(fac, <span class="string">"blue"</span>,<span class="string">"green"</span>)</span><br><span class="line">levels(fac3)</span><br><span class="line">fac3 &lt;- fct_relevel(fac, <span class="string">"blue"</span>)</span><br><span class="line">levels(fac3)</span><br></pre></td></tr></table></figure></div><p>fct_relevel()第一个参数是要修改次序的因子， 后续可以有多个字符型参数表示要提前的水平。</p><p>forcats::fct_reorder2(f, x, y)也调整因子f的水平的次序， 但是根据与每组中最大的x值相对应的y值大小调整次序， 这样在作多个因子水平对应的曲线图时可以比较容易地区分多条曲线。</p><p>forcats::fct_recode()可以修改每个水平的名称</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">fac4 &lt;- fct_recode(</span><br><span class="line">  fac,</span><br><span class="line">  <span class="string">"红"</span>=<span class="string">"red"</span>, <span class="string">"绿"</span>=<span class="string">"green"</span>, <span class="string">"蓝"</span>=<span class="string">"blue"</span>)</span><br><span class="line">table(fac4)</span><br><span class="line">levels(fac4)</span><br></pre></td></tr></table></figure></div><p>fct_recode()在修改水平名时允许多个旧水平对应到一个新水平， 从而合并原来的水平。 如果合并很多， 可以用fct_collapse()函数， 如</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">exam &lt;- factor(c(<span class="string">"其他"</span>,<span class="string">"联想"</span>,<span class="string">"百度"</span>),levels = c(<span class="string">"其他"</span>,<span class="string">"联想"</span>,<span class="string">"百度"</span>))</span><br><span class="line">levels(exam)</span><br><span class="line">exam1 &lt;- fct_recode(</span><br><span class="line">  exam,</span><br><span class="line">  <span class="string">"other"</span>=<span class="string">"其他"</span>, <span class="string">"lenovo"</span>=<span class="string">"联想"</span>, <span class="string">"baidu"</span>=<span class="string">"百度"</span></span><br><span class="line">)</span><br><span class="line">levels(exam1)</span><br><span class="line">exam2 &lt;- fct_collapse(</span><br><span class="line">  exam,</span><br><span class="line">  <span class="string">"其它"</span>=c(<span class="string">"无名"</span>, <span class="string">"无应答"</span>),</span><br><span class="line">  <span class="string">"联想"</span>=c(<span class="string">"联想"</span>, <span class="string">"联想集团"</span>),</span><br><span class="line">  <span class="string">"百度"</span>=c(<span class="string">"百度"</span>, <span class="string">"百度集团"</span>)</span><br><span class="line">)</span><br><span class="line">levels(exam2)</span><br></pre></td></tr></table></figure></div><p><strong>练习</strong></p><p>设文件class.csv中包含如下内容:</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">Code</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">name,sex,age,height,weight</span><br><span class="line">Alice,F,13,56.5,84</span><br><span class="line">Becka,F,13,65.3,98</span><br><span class="line">Gail,F,14,64.3,90</span><br><span class="line">Karen,F,12,56.3,77</span><br><span class="line">Kathy,F,12,59.8,84.5</span><br><span class="line">Mary,F,15,66.5,112</span><br><span class="line">Sandy,F,11,51.3,50.5</span><br><span class="line">Sharon,F,15,62.5,112.5</span><br><span class="line">Tammy,F,14,62.8,102.5</span><br><span class="line">Alfred,M,14,69,112.5</span><br><span class="line">Duke,M,14,63.5,102.5</span><br><span class="line">Guido,M,15,67,133</span><br><span class="line">James,M,12,57.3,83</span><br><span class="line">Jeffrey,M,13,62.5,84</span><br><span class="line">John,M,12,59,99.5</span><br><span class="line">Philip,M,16,72,150</span><br><span class="line">Robert,M,12,64.8,128</span><br><span class="line">Thomas,M,11,57.5,85</span><br><span class="line">William,M,15,66.5,112</span><br></pre></td></tr></table></figure></div><p>用如下程序把该文件读入为R数据框d.class, 其中的sex列已经自动转换为因子。 取出其中的sex和age列到变量sex和age中</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">d.class &lt;- read.csv(<span class="string">'class.csv'</span>, header=<span class="literal">TRUE</span>)</span><br><span class="line">sex &lt;- d.class[,<span class="string">'sex'</span>]</span><br><span class="line">age &lt;- d.class[,<span class="string">'age'</span>]</span><br></pre></td></tr></table></figure></div><ol><li><p>统计并显示列出sex的不同值频数；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">table(sex)</span><br></pre></td></tr></table></figure></div></li><li><p>分男女两组分别求年龄最大值；</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">tapply(age,sex,max)</span><br></pre></td></tr></table></figure></div></li><li><p>把sex变量转换为一个新的因子，F显示成“Female”，M显示成“Male”。</p><div class="code-area-wrap"><div class="highlight-tools"><i class="fa fa-angle-down code-expand" aria-hidden="true"></i><div class="code_lang">r</div><div class="copy-notice"></div><i class="fa fa-clipboard" aria-hidden="true"></i></div><figure class="highlight r"><table><tr><td class="code"><pre><span class="line">sex</span><br><span class="line">sexf1 &lt;- factor(sex)</span><br><span class="line"><span class="keyword">library</span>(forcats)</span><br><span class="line">sexf2 &lt;- fct_recode(</span><br><span class="line">  sexf1,</span><br><span class="line">  <span class="string">"Femal"</span>=<span class="string">"F"</span>, <span class="string">"Male"</span>=<span class="string">"M"</span></span><br><span class="line">)</span><br><span class="line">sexf2</span><br></pre></td></tr></table></figure></div></li></ol>]]></content>
    
    <summary type="html">
    
      R语言的基本数据类型与运算1
    
    </summary>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA/R%E8%AF%AD%E8%A8%80/"/>
    
    
      <category term="计算机" scheme="https://steven-shixq.github.io/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
      <category term="编程" scheme="https://steven-shixq.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
      <category term="R语言" scheme="https://steven-shixq.github.io/tags/R%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>每日外闻16</title>
    <link href="https://steven-shixq.github.io/2020/02/22/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB16/"/>
    <id>https://steven-shixq.github.io/2020/02/22/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB16/</id>
    <published>2020-02-22T02:12:03.000Z</published>
    <updated>2020-02-22T04:15:00.345Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p> <a href="https://www.gatesnotes.com/Books/How-Not-to-be-Wrong" target="_blank" rel="noopener">How math secretly affects your life</a></p></blockquote><p><em>How Not to Be Wrong: The Power of Mathematical Thinking</em></p><p><em>如何不犯错：数学思维的力量</em></p><p>中文书名《魔鬼数学》</p><p>I took a lot of math classes in college. I remember Professor Shlomo Sternberg getting up on the first day of his class and telling us we weren’t going to see any numbers other than 0, 1, and 2. I had a great time in that one.</p><p>Jordan Ellenberg, the author of <em>How Not to Be Wrong: The Power of Mathematical Thinking</em>, also studied under Sternberg. On the surface it’s about math, but it’s really about how much math plays into our daily lives without our even knowing it.</p><p>The book starts with a story about Abraham Wald, an Eastern European mathematician who worked for the American government during World War II. One day the military <u>came to him and said</u> (来找他说), “We have a problem. We send our planes overseas, and when they come back, their engines are fine, but their tails are <strong>riddled with</strong> (充满) bullet holes. If we put more <strong>armor</strong> (装甲，盔甲) on the tails, though, the planes get too heavy to fly. Can you help us <u>figure out</u> (弄清楚) how to protect the planes’ tails better?”</p><p>And he said, “No.”</p><p>They were surprised, but then he explained that they were asking the wrong question. “You need to put more armor where there <em>aren’t</em> bullet holes. Clearly, when the plane gets hit in the tail, it makes it back to you. Your problem is the planes that get hit in the engine, because those are the ones that aren’t coming back.”</p><p>Ultimately, that’s really what the book is: a series of stories about how a lot of the apparently non-mathematical systems that <strong>underpin</strong> (巩固，支持) our daily lives are actually deeply mathematical, and people couldn’t develop them until they started asking the right questions. Each chapter starts somewhere that seems <u>fairly straightforward</u> (相当简单)—electoral politics, say, or the Massachusetts lottery—and then uses that as a jumping-off point to talk about the math involved.</p><p>In some places the math gets quite complicated. Ellenberg deals with cutting-edge thinking about subjects like <strong>prime numbers</strong> (质数，素数), extra dimensions, and relative infinities. A non-mathematician might get a little lost along the way. But even if you don’t feel like following him all the way to the bottom of things like Fano planes, 24-dimensional <strong>spheres</strong> (球，领域), and Condorcet’s <strong>paradox</strong> (悖论), after he goes really deep he always comes back to make sure you’ re still with him.</p><p>The way he deals with the lottery is a great example. For several years, the Massachusetts lottery ran in a way that allowed three teams—one led by an MIT student, one by a medical researcher, and one by a guy from Michigan—to game the system and win millions of dollars. You might ask, How could the state let them cheat like that for so long? Part of the answer is, the state didn’t care. Massachusetts got 80 cents for every $2 lottery ticket sold, no matter who won. And the second part of the answer is, they weren’t cheating. They were taking advantage of math to give themselves slightly better odds at winning and other people slightly worse odds. They basically turned themselves into the house at a casino.</p><p>But Ellenberg extends his analysis even further, because while two of the teams just had the Quic Pic machine choose their numbers randomly, the team of students <strong><u>filled out</u></strong> (填写) its tickets by hand. Tens of thousands of tickets, every time they played! Ellenberg has mathematical explanations for the difference—filling out the tickets by hand exposed the students to less risk of losing money in any given week—and then points out that, if you’re on a student’s budget, the thought of losing any money at all is pretty scary.</p><p>Toward the end of each chapter, Ellenberg broadens from these specific examples to a series of questions about how <em>else</em> some of the ideas in the chapter might be used, what kinds of mathematical questions are left to answer, and what kinds of real-life problems they might eventually solve.</p><p>Given how black-and-white so much of our political dialogue has become, I think it’s great to have somebody advocating for looking at the numbers, explaining the relative costs of things like alternative tax policies or what happens when you <strong>implement</strong> different voting strategies. Even if you don’t follow the deepest math behind these things, you can still appreciate the argument and the rigor (严密) of the thinking, and the world can always use more rigorous (严格的) thinking.</p><p>The writing is funny, smooth, and accessible—not what you might expect from a book about math. What Ellenberg has written is ultimately a love letter to math. If the stories he tells add up to a larger lesson, it’s that “to do mathematics is to be, at once, touched by fire and bound by reason”—and that there are ways in which we’re <em>all</em> doing math, all the time (一直是这样).</p><p>riddled ：充斥的；解谜</p><hr><p><em>See you tomorrow</em></p>]]></content>
    
    <summary type="html">
    
      Gates-How math secretly affects your life
    
    </summary>
    
    
      <category term="English" scheme="https://steven-shixq.github.io/categories/English/"/>
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/categories/English/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
    
      <category term="每日外闻" scheme="https://steven-shixq.github.io/tags/%E6%AF%8F%E6%97%A5%E5%A4%96%E9%97%BB/"/>
    
      <category term="English" scheme="https://steven-shixq.github.io/tags/English/"/>
    
      <category term="GatesNotes" scheme="https://steven-shixq.github.io/tags/GatesNotes/"/>
    
      <category term="BOOK" scheme="https://steven-shixq.github.io/tags/BOOK/"/>
    
      <category term="Math" scheme="https://steven-shixq.github.io/tags/Math/"/>
    
      <category term="数学" scheme="https://steven-shixq.github.io/tags/%E6%95%B0%E5%AD%A6/"/>
    
  </entry>
  
</feed>
